
Project GBS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b4c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08007c80  08007c80  00017c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008440  08008440  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  08008440  08008440  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008440  08008440  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08008448  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000224  0800866c  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800866c  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b8c  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6b  00000000  00000000  00026dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00028848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00029028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104c4  00000000  00000000  00029740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096b1  00000000  00000000  00039c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056663  00000000  00000000  000432b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00099918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  00099968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000224 	.word	0x20000224
 800014c:	00000000 	.word	0x00000000
 8000150:	08007c64 	.word	0x08007c64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000228 	.word	0x20000228
 800016c:	08007c64 	.word	0x08007c64

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <SystemInit+0x5c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <SystemInit+0x5c>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <SystemInit+0x5c>)
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4911      	ldr	r1, [pc, #68]	; (8000ba4 <SystemInit+0x5c>)
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <SystemInit+0x60>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x5c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <SystemInit+0x5c>)
 8000b6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <SystemInit+0x5c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SystemInit+0x5c>)
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <SystemInit+0x5c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <SystemInit+0x5c>)
 8000b86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SystemInit+0x5c>)
 8000b8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b92:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000b94:	f000 f80c 	bl	8000bb0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SystemInit+0x64>)
 8000b9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	f8ff0000 	.word	0xf8ff0000
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000bb4:	f000 f802 	bl	8000bbc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d103      	bne.n	8000bf4 <SetSysClockTo72+0x38>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bf2:	d1f0      	bne.n	8000bd6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000c00:	2301      	movs	r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	e001      	b.n	8000c0a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d14b      	bne.n	8000ca8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <SetSysClockTo72+0xfc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <SetSysClockTo72+0xfc>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <SetSysClockTo72+0xfc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <SetSysClockTo72+0xfc>)
 8000c22:	f023 0303 	bic.w	r3, r3, #3
 8000c26:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <SetSysClockTo72+0xfc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <SetSysClockTo72+0xfc>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c56:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c5a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c62:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000c66:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c72:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c74:	bf00      	nop
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c88:	f023 0303 	bic.w	r3, r3, #3
 8000c8c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000c9a:	bf00      	nop
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SetSysClockTo72+0xf8>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	d1f9      	bne.n	8000c9c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40022000 	.word	0x40022000

08000cbc <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <NVIC_PriorityGroupConfig+0x20>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60d3      	str	r3, [r2, #12]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	78db      	ldrb	r3, [r3, #3]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d03a      	beq.n	8000d72 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <NVIC_Init+0xbc>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f1c3 0304 	rsb	r3, r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	785b      	ldrb	r3, [r3, #1]
 8000d20:	461a      	mov	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	789b      	ldrb	r3, [r3, #2]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4013      	ands	r3, r2
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d40:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <NVIC_Init+0xc0>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	6979      	ldr	r1, [r7, #20]
 8000d48:	b2c9      	uxtb	r1, r1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d5a:	4911      	ldr	r1, [pc, #68]	; (8000da0 <NVIC_Init+0xc0>)
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	0952      	lsrs	r2, r2, #5
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d66:	2201      	movs	r2, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d6c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d70:	e00f      	b.n	8000d92 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d7a:	4909      	ldr	r1, [pc, #36]	; (8000da0 <NVIC_Init+0xc0>)
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	0952      	lsrs	r2, r2, #5
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d86:	2201      	movs	r2, #1
 8000d88:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d8a:	f100 0320 	add.w	r3, r0, #32
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	78db      	ldrb	r3, [r3, #3]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	78db      	ldrb	r3, [r3, #3]
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	461a      	mov	r2, r3
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d044      	beq.n	8000e7c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	e038      	b.n	8000e70 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000dfe:	2201      	movs	r2, #1
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d126      	bne.n	8000e6a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e22:	220f      	movs	r2, #15
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	4013      	ands	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	78db      	ldrb	r3, [r3, #3]
 8000e48:	2b28      	cmp	r3, #40	; 0x28
 8000e4a:	d105      	bne.n	8000e58 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	409a      	lsls	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	e008      	b.n	8000e6a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	2b48      	cmp	r3, #72	; 0x48
 8000e5e:	d104      	bne.n	8000e6a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000e60:	2201      	movs	r2, #1
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	409a      	lsls	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b07      	cmp	r3, #7
 8000e74:	d9c3      	bls.n	8000dfe <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	2bff      	cmp	r3, #255	; 0xff
 8000e82:	d946      	bls.n	8000f12 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	e03a      	b.n	8000f06 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3308      	adds	r3, #8
 8000e94:	2201      	movs	r2, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d127      	bne.n	8000f00 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	78db      	ldrb	r3, [r3, #3]
 8000edc:	2b28      	cmp	r3, #40	; 0x28
 8000ede:	d105      	bne.n	8000eec <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	2b48      	cmp	r3, #72	; 0x48
 8000ef2:	d105      	bne.n	8000f00 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	2201      	movs	r2, #1
 8000efa:	409a      	lsls	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	3301      	adds	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2b07      	cmp	r3, #7
 8000f0a:	d9c1      	bls.n	8000e90 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	605a      	str	r2, [r3, #4]
  }
}
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e001      	b.n	8000f42 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	611a      	str	r2, [r3, #16]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	615a      	str	r2, [r3, #20]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
	...

08000f88 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da03      	bge.n	8000fb2 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <GPIO_PinRemapConfig+0xdc>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e002      	b.n	8000fb8 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <GPIO_PinRemapConfig+0xdc>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000fce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000fd2:	d10a      	bne.n	8000fea <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fda:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <GPIO_PinRemapConfig+0xdc>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <GPIO_PinRemapConfig+0xdc>)
 8000fe2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fe6:	6053      	str	r3, [r2, #4]
 8000fe8:	e021      	b.n	800102e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00e      	beq.n	8001012 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e00d      	b.n	800102e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0d5b      	lsrs	r3, r3, #21
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	4013      	ands	r3, r2
 8001024:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800102c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	0d5b      	lsrs	r3, r3, #21
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4313      	orrs	r3, r2
 8001044:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	da03      	bge.n	8001054 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <GPIO_PinRemapConfig+0xdc>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8001052:	e002      	b.n	800105a <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <GPIO_PinRemapConfig+0xdc>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	6053      	str	r3, [r2, #4]
}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40010000 	.word	0x40010000

08001068 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001076:	2300      	movs	r3, #0
 8001078:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800107a:	2304      	movs	r3, #4
 800107c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800107e:	4b57      	ldr	r3, [pc, #348]	; (80011dc <I2C_Init+0x174>)
 8001080:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	889b      	ldrh	r3, [r3, #4]
 8001086:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8001088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800108a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800108e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f961 	bl	800135c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <I2C_Init+0x178>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80010aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010ae:	4313      	orrs	r3, r2
 80010b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010b6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	f023 0301 	bic.w	r3, r3, #1
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a44      	ldr	r2, [pc, #272]	; (80011e4 <I2C_Init+0x17c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d815      	bhi.n	8001102 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80010e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d801      	bhi.n	80010ee <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80010ea:	2304      	movs	r3, #4
 80010ec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80010ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f2:	4313      	orrs	r3, r2
 80010f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80010f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010f8:	3301      	adds	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	841a      	strh	r2, [r3, #32]
 8001100:	e040      	b.n	8001184 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	88db      	ldrh	r3, [r3, #6]
 8001106:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800110a:	4293      	cmp	r3, r2
 800110c:	d109      	bne.n	8001122 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001120:	e00e      	b.n	8001140 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009a      	lsls	r2, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800113a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8001140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800114a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8001152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001154:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001156:	4313      	orrs	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800115e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001162:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <I2C_Init+0x180>)
 8001170:	fb82 1203 	smull	r1, r2, r2, r3
 8001174:	1192      	asrs	r2, r2, #6
 8001176:	17db      	asrs	r3, r3, #31
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	b29b      	uxth	r3, r3
 800117c:	3301      	adds	r3, #1
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001188:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80011a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80011a6:	f023 0302 	bic.w	r3, r3, #2
 80011aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	889a      	ldrh	r2, [r3, #4]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	895b      	ldrh	r3, [r3, #10]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ba:	4313      	orrs	r3, r2
 80011bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011c2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	899a      	ldrh	r2, [r3, #12]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	891b      	ldrh	r3, [r3, #8]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	811a      	strh	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	007a1200 	.word	0x007a1200
 80011e0:	431bde83 	.word	0x431bde83
 80011e4:	000186a0 	.word	0x000186a0
 80011e8:	10624dd3 	.word	0x10624dd3

080011ec <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d008      	beq.n	8001210 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 800120e:	e007      	b.n	8001220 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	b29a      	uxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	801a      	strh	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 800124c:	e007      	b.n	800125e <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	801a      	strh	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800128a:	e007      	b.n	800129c <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	801a      	strh	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	821a      	strh	r2, [r3, #16]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
 80012d0:	4613      	mov	r3, r2
 80012d2:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	70fb      	strb	r3, [r7, #3]
 80012e2:	e003      	b.n	80012ec <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	821a      	strh	r2, [r3, #16]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001314:	2300      	movs	r3, #0
 8001316:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	8a9b      	ldrh	r3, [r3, #20]
 800131c:	b29b      	uxth	r3, r3
 800131e:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	8b1b      	ldrh	r3, [r3, #24]
 8001324:	b29b      	uxth	r3, r3
 8001326:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
 8001334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001338:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4013      	ands	r3, r2
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d102      	bne.n	800134c <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001346:	2301      	movs	r3, #1
 8001348:	75fb      	strb	r3, [r7, #23]
 800134a:	e001      	b.n	8001350 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001350:	7dfb      	ldrb	r3, [r7, #23]
}
 8001352:	4618      	mov	r0, r3
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b08      	cmp	r3, #8
 8001382:	d011      	beq.n	80013a8 <RCC_GetClocksFreq+0x4c>
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d83a      	bhi.n	8001400 <RCC_GetClocksFreq+0xa4>
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <RCC_GetClocksFreq+0x3c>
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b04      	cmp	r3, #4
 8001394:	d004      	beq.n	80013a0 <RCC_GetClocksFreq+0x44>
 8001396:	e033      	b.n	8001400 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a47      	ldr	r2, [pc, #284]	; (80014b8 <RCC_GetClocksFreq+0x15c>)
 800139c:	601a      	str	r2, [r3, #0]
      break;
 800139e:	e033      	b.n	8001408 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <RCC_GetClocksFreq+0x15c>)
 80013a4:	601a      	str	r2, [r3, #0]
      break;
 80013a6:	e02f      	b.n	8001408 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80013a8:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013b0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	3302      	adds	r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4a3b      	ldr	r2, [pc, #236]	; (80014bc <RCC_GetClocksFreq+0x160>)
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80013d6:	e017      	b.n	8001408 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4a35      	ldr	r2, [pc, #212]	; (80014bc <RCC_GetClocksFreq+0x160>)
 80013e8:	fb03 f202 	mul.w	r2, r3, r2
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
      break;
 80013f0:	e00a      	b.n	8001408 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <RCC_GetClocksFreq+0x15c>)
 80013f6:	fb03 f202 	mul.w	r2, r3, r2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
      break;
 80013fe:	e003      	b.n	8001408 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <RCC_GetClocksFreq+0x15c>)
 8001404:	601a      	str	r2, [r3, #0]
      break;
 8001406:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001410:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001418:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <RCC_GetClocksFreq+0x164>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	40da      	lsrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001438:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001440:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <RCC_GetClocksFreq+0x164>)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	40da      	lsrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001460:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	0adb      	lsrs	r3, r3, #11
 8001466:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001468:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <RCC_GetClocksFreq+0x164>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	40da      	lsrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001488:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	0b9b      	lsrs	r3, r3, #14
 800148e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <RCC_GetClocksFreq+0x168>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	611a      	str	r2, [r3, #16]
}
 80014aa:	bf00      	nop
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000
 80014b8:	007a1200 	.word	0x007a1200
 80014bc:	003d0900 	.word	0x003d0900
 80014c0:	20000004 	.word	0x20000004
 80014c4:	20000014 	.word	0x20000014

080014c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <RCC_APB2PeriphClockCmd+0x38>)
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <RCC_APB2PeriphClockCmd+0x38>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80014e6:	e006      	b.n	80014f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <RCC_APB2PeriphClockCmd+0x38>)
 80014ea:	699a      	ldr	r2, [r3, #24]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4903      	ldr	r1, [pc, #12]	; (8001500 <RCC_APB2PeriphClockCmd+0x38>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	618b      	str	r3, [r1, #24]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000

08001504 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <RCC_APB1PeriphClockCmd+0x38>)
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <RCC_APB1PeriphClockCmd+0x38>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4313      	orrs	r3, r2
 8001520:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001522:	e006      	b.n	8001532 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <RCC_APB1PeriphClockCmd+0x38>)
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	43db      	mvns	r3, r3
 800152c:	4903      	ldr	r1, [pc, #12]	; (800153c <RCC_APB1PeriphClockCmd+0x38>)
 800152e:	4013      	ands	r3, r2
 8001530:	61cb      	str	r3, [r1, #28]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000

08001540 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8a1b      	ldrh	r3, [r3, #16]
 8001566:	b29b      	uxth	r3, r3
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800156a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001570:	4013      	ands	r3, r2
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	88db      	ldrh	r3, [r3, #6]
 8001578:	461a      	mov	r2, r3
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	4313      	orrs	r3, r2
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	b29a      	uxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	899b      	ldrh	r3, [r3, #12]
 800158c:	b29b      	uxth	r3, r3
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001592:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001596:	4013      	ands	r3, r2
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	889a      	ldrh	r2, [r3, #4]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	891b      	ldrh	r3, [r3, #8]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	4313      	orrs	r3, r2
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8a9b      	ldrh	r3, [r3, #20]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80015c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c8:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80015cc:	4013      	ands	r3, r2
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	899b      	ldrh	r3, [r3, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d8:	4313      	orrs	r3, r2
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff feb7 	bl	800135c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <USART_Init+0x16c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d102      	bne.n	80015fc <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015fa:	e001      	b.n	8001600 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	899b      	ldrh	r3, [r3, #12]
 8001604:	b29b      	uxth	r3, r3
 8001606:	b21b      	sxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	da0c      	bge.n	8001626 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800160c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	441a      	add	r2, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
 8001624:	e00b      	b.n	800163e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	009a      	lsls	r2, r3, #2
 8001630:	441a      	add	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fbb2 f3f3 	udiv	r3, r2, r3
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <USART_Init+0x170>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	2264      	movs	r2, #100	; 0x64
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	899b      	ldrh	r3, [r3, #12]
 8001660:	b29b      	uxth	r3, r3
 8001662:	b21b      	sxth	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	da0c      	bge.n	8001682 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	3332      	adds	r3, #50	; 0x32
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <USART_Init+0x170>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	095b      	lsrs	r3, r3, #5
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167c:	4313      	orrs	r3, r2
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001680:	e00b      	b.n	800169a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	3332      	adds	r3, #50	; 0x32
 8001688:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <USART_Init+0x170>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001696:	4313      	orrs	r3, r2
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	811a      	strh	r2, [r3, #8]
}
 80016a2:	bf00      	nop
 80016a4:	3730      	adds	r7, #48	; 0x30
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40013800 	.word	0x40013800
 80016b0:	51eb851f 	.word	0x51eb851f

080016b4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	899b      	ldrh	r3, [r3, #12]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80016d6:	e007      	b.n	80016e8 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	899b      	ldrh	r3, [r3, #12]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	819a      	strh	r2, [r3, #12]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b087      	sub	sp, #28
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	807b      	strh	r3, [r7, #2]
 80016fe:	4613      	mov	r3, r2
 8001700:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	b2db      	uxtb	r3, r3
 800171e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001728:	2201      	movs	r2, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d103      	bne.n	8001740 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	330c      	adds	r3, #12
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e009      	b.n	8001754 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d103      	bne.n	800174e <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3310      	adds	r3, #16
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e002      	b.n	8001754 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3314      	adds	r3, #20
 8001752:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001766:	e006      	b.n	8001776 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	6819      	ldr	r1, [r3, #0]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	43da      	mvns	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	400a      	ands	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001792:	b29a      	uxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	809a      	strh	r2, [r3, #4]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	889b      	ldrh	r3, [r3, #4]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b4:	b29b      	uxth	r3, r3
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	4013      	ands	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e001      	b.n	80017ea <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	43db      	mvns	r3, r3
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	801a      	strh	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	b2db      	uxtb	r3, r3
 800183a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001844:	2201      	movs	r2, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d107      	bne.n	8001864 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	899b      	ldrh	r3, [r3, #12]
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4013      	ands	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e011      	b.n	8001888 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d107      	bne.n	800187a <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	8a1b      	ldrh	r3, [r3, #16]
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e006      	b.n	8001888 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	8a9b      	ldrh	r3, [r3, #20]
 800187e:	b29b      	uxth	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001890:	2201      	movs	r2, #1
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <USART_GetITStatus+0xa4>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	74fb      	strb	r3, [r7, #19]
 80018b8:	e001      	b.n	80018be <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80018be:	7cfb      	ldrb	r3, [r7, #19]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80018d6:	2300      	movs	r3, #0
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	2300      	movs	r3, #0
 80018dc:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	2201      	movs	r2, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80018ee:	89bb      	ldrh	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	801a      	strh	r2, [r3, #0]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <Send1>:
//char *json = "{\"iddevice\": \"7\",\"date\" :{\"ngaythangnam\" : \"2011/9/24\",\"giophutgiay\" : \"10:11:59\"},\"coordinatesDevice\" : {\"latitude\" : \"21.014927925937805\",\"longtitude\" : \"105.84262852543921\"},\"coordinatesGateway\" : {\"latitude\" : \"21.01492792593785\",\"longtitude\" : \"105.8426285254321\"},\"distance\" :123,\"diachi\":\"diachi3\",\"bando\" : \"2144\",\"state\" : 0}";



 void Send1(char* s)
 {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    Uart_flush(USART3);
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <Send1+0x28>)
 800190e:	f001 ffd5 	bl	80038bc <Uart_flush>
    Uart_sendstring(s, USART3);
 8001912:	4906      	ldr	r1, [pc, #24]	; (800192c <Send1+0x28>)
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f001 ffa5 	bl	8003864 <Uart_sendstring>
    delay_ms(1500);
 800191a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800191e:	f000 fec9 	bl	80026b4 <delay_ms>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40004800 	.word	0x40004800

08001930 <Send>:

void Send(char *s)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	Uart_flush(USART3);
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <Send+0x30>)
 800193a:	f001 ffbf 	bl	80038bc <Uart_flush>
	Uart_sendstring(s, USART3);
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <Send+0x30>)
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f001 ff8f 	bl	8003864 <Uart_sendstring>
	while(!(Wait_for("OK\r\n", USART3) ));
 8001946:	bf00      	nop
 8001948:	4905      	ldr	r1, [pc, #20]	; (8001960 <Send+0x30>)
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <Send+0x34>)
 800194c:	f002 f8e2 	bl	8003b14 <Wait_for>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f8      	beq.n	8001948 <Send+0x18>

}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40004800 	.word	0x40004800
 8001964:	08007c80 	.word	0x08007c80

08001968 <SendCIPSEND>:

void SendCIPSEND(char* s)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	char tmp[30];
    sprintf(tmp, "AT+CIPSEND=%d\r\n", strlen(s));
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7fe fbfd 	bl	8000170 <strlen>
 8001976:	4602      	mov	r2, r0
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	490a      	ldr	r1, [pc, #40]	; (80019a8 <SendCIPSEND+0x40>)
 800197e:	4618      	mov	r0, r3
 8001980:	f002 ff8e 	bl	80048a0 <siprintf>
    Uart_flush(USART3);
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <SendCIPSEND+0x44>)
 8001986:	f001 ff99 	bl	80038bc <Uart_flush>

    Uart_sendstring(tmp, USART3); delay_ms(1500);
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4907      	ldr	r1, [pc, #28]	; (80019ac <SendCIPSEND+0x44>)
 8001990:	4618      	mov	r0, r3
 8001992:	f001 ff67 	bl	8003864 <Uart_sendstring>
 8001996:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800199a:	f000 fe8b 	bl	80026b4 <delay_ms>

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08007c88 	.word	0x08007c88
 80019ac:	40004800 	.word	0x40004800

080019b0 <ESP_Init>:

void ESP_Init (char *SSID, char *PASSWD, char *ipServer, int port, char *json, uint32_t flagESP)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 80019b6:	af02      	add	r7, sp, #8
 80019b8:	f507 7434 	add.w	r4, r7, #720	; 0x2d0
 80019bc:	f5a4 7431 	sub.w	r4, r4, #708	; 0x2c4
 80019c0:	6020      	str	r0, [r4, #0]
 80019c2:	f507 7034 	add.w	r0, r7, #720	; 0x2d0
 80019c6:	f5a0 7032 	sub.w	r0, r0, #712	; 0x2c8
 80019ca:	6001      	str	r1, [r0, #0]
 80019cc:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 80019d0:	f5a1 7133 	sub.w	r1, r1, #716	; 0x2cc
 80019d4:	600a      	str	r2, [r1, #0]
 80019d6:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80019da:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 80019de:	6013      	str	r3, [r2, #0]

	char data[500];
	char form[200];
	delay_ms(500);
 80019e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e4:	f000 fe66 	bl	80026b4 <delay_ms>

	if(flagESP == 0 ) goto resetlai;
 80019e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d11d      	bne.n	8001a2c <ESP_Init+0x7c>
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <ESP_Init+0x46>

	Send1(data);

	while(!(Wait_for("OK\r\n", USART3) )){
		//delay_ms(1000);
		goto resetlai ;
 80019f4:	bf00      	nop
		Send1("\rAT+RST\r\n");
 80019f6:	4834      	ldr	r0, [pc, #208]	; (8001ac8 <ESP_Init+0x118>)
 80019f8:	f7ff ff84 	bl	8001904 <Send1>
		Send1("\rAT+CWMODE=0\r\n");
 80019fc:	4833      	ldr	r0, [pc, #204]	; (8001acc <ESP_Init+0x11c>)
 80019fe:	f7ff ff81 	bl	8001904 <Send1>
		sprintf (data,"\rAT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8001a02:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a06:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8001a0a:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001a0e:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8001a12:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	492d      	ldr	r1, [pc, #180]	; (8001ad0 <ESP_Init+0x120>)
 8001a1c:	f002 ff40 	bl	80048a0 <siprintf>
		Send(data);
 8001a20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff83 	bl	8001930 <Send>
 8001a2a:	e000      	b.n	8001a2e <ESP_Init+0x7e>
	else goto guilan2;
 8001a2c:	bf00      	nop
	sprintf(data,"\rAT+CIPSTART=\"TCP\",\"%s\",%d\r\n", ipServer,port) ;
 8001a2e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a32:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001a36:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001a3a:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8001a3e:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4923      	ldr	r1, [pc, #140]	; (8001ad4 <ESP_Init+0x124>)
 8001a48:	f002 ff2a 	bl	80048a0 <siprintf>
	Send1(data);
 8001a4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff57 	bl	8001904 <Send1>
	while(!(Wait_for("OK\r\n", USART3) )){
 8001a56:	bf00      	nop
 8001a58:	491f      	ldr	r1, [pc, #124]	; (8001ad8 <ESP_Init+0x128>)
 8001a5a:	4820      	ldr	r0, [pc, #128]	; (8001adc <ESP_Init+0x12c>)
 8001a5c:	f002 f85a 	bl	8003b14 <Wait_for>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0c6      	beq.n	80019f4 <ESP_Init+0x44>
	}


	sprintf(form,"POST /postdata HTTP/1.1\r\nHost: %s:%d\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n",ipServer, port,strlen(json));
 8001a66:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8001a6a:	f7fe fb81 	bl	8000170 <strlen>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001a74:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001a78:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001a7c:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8001a80:	f107 0014 	add.w	r0, r7, #20
 8001a84:	9100      	str	r1, [sp, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4915      	ldr	r1, [pc, #84]	; (8001ae0 <ESP_Init+0x130>)
 8001a8c:	f002 ff08 	bl	80048a0 <siprintf>

	sprintf(data,"%s%s",form,json);
 8001a90:	f107 0214 	add.w	r2, r7, #20
 8001a94:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001a98:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001a9c:	4911      	ldr	r1, [pc, #68]	; (8001ae4 <ESP_Init+0x134>)
 8001a9e:	f002 feff 	bl	80048a0 <siprintf>

	SendCIPSEND(data);
 8001aa2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff5e 	bl	8001968 <SendCIPSEND>

	Send1(data);
 8001aac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff27 	bl	8001904 <Send1>

	Send1("\rAT+CIPCLOSE\r\n");
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <ESP_Init+0x138>)
 8001ab8:	f7ff ff24 	bl	8001904 <Send1>

}
 8001abc:	bf00      	nop
 8001abe:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	08007c98 	.word	0x08007c98
 8001acc:	08007ca4 	.word	0x08007ca4
 8001ad0:	08007cb4 	.word	0x08007cb4
 8001ad4:	08007ccc 	.word	0x08007ccc
 8001ad8:	40004800 	.word	0x40004800
 8001adc:	08007c80 	.word	0x08007c80
 8001ae0:	08007cec 	.word	0x08007cec
 8001ae4:	08007d4c 	.word	0x08007d4c
 8001ae8:	08007d54 	.word	0x08007d54

08001aec <decodeGGA>:
/*                     			 PROTOTYPE                        		      */
/******************************************************************************/


int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001aec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001af0:	b08e      	sub	sp, #56	; 0x38
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001af8:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <decodeGGA+0x17c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001b02:	e004      	b.n	8001b0e <decodeGGA+0x22>
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <decodeGGA+0x17c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <decodeGGA+0x17c>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <decodeGGA+0x17c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b2c      	cmp	r3, #44	; 0x2c
 8001b1c:	d1f2      	bne.n	8001b04 <decodeGGA+0x18>
	inx++;
 8001b1e:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <decodeGGA+0x17c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a50      	ldr	r2, [pc, #320]	; (8001c68 <decodeGGA+0x17c>)
 8001b26:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001b28:	e004      	b.n	8001b34 <decodeGGA+0x48>
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <decodeGGA+0x17c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <decodeGGA+0x17c>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <decodeGGA+0x17c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b2c      	cmp	r3, #44	; 0x2c
 8001b42:	d1f2      	bne.n	8001b2a <decodeGGA+0x3e>
	inx++;
 8001b44:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <decodeGGA+0x17c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	4a47      	ldr	r2, [pc, #284]	; (8001c68 <decodeGGA+0x17c>)
 8001b4c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001b4e:	e004      	b.n	8001b5a <decodeGGA+0x6e>
 8001b50:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <decodeGGA+0x17c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <decodeGGA+0x17c>)
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <decodeGGA+0x17c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b2c      	cmp	r3, #44	; 0x2c
 8001b68:	d1f2      	bne.n	8001b50 <decodeGGA+0x64>
	inx++;
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <decodeGGA+0x17c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a3d      	ldr	r2, [pc, #244]	; (8001c68 <decodeGGA+0x17c>)
 8001b72:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001b74:	e004      	b.n	8001b80 <decodeGGA+0x94>
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <decodeGGA+0x17c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a3a      	ldr	r2, [pc, #232]	; (8001c68 <decodeGGA+0x17c>)
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <decodeGGA+0x17c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b8e:	d1f2      	bne.n	8001b76 <decodeGGA+0x8a>
	inx++;
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <decodeGGA+0x17c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <decodeGGA+0x17c>)
 8001b98:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001b9a:	e004      	b.n	8001ba6 <decodeGGA+0xba>
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <decodeGGA+0x17c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <decodeGGA+0x17c>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <decodeGGA+0x17c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b2c      	cmp	r3, #44	; 0x2c
 8001bb4:	d1f2      	bne.n	8001b9c <decodeGGA+0xb0>
	inx++;
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <decodeGGA+0x17c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <decodeGGA+0x17c>)
 8001bbe:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001bc0:	e004      	b.n	8001bcc <decodeGGA+0xe0>
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <decodeGGA+0x17c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <decodeGGA+0x17c>)
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <decodeGGA+0x17c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b2c      	cmp	r3, #44	; 0x2c
 8001bda:	d1f2      	bne.n	8001bc2 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <decodeGGA+0x17c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <decodeGGA+0x17c>)
 8001be4:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <decodeGGA+0x17c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b31      	cmp	r3, #49	; 0x31
 8001bf4:	d00f      	beq.n	8001c16 <decodeGGA+0x12a>
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <decodeGGA+0x17c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b32      	cmp	r3, #50	; 0x32
 8001c04:	d007      	beq.n	8001c16 <decodeGGA+0x12a>
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <decodeGGA+0x17c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b36      	cmp	r3, #54	; 0x36
 8001c14:	d106      	bne.n	8001c24 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <decodeGGA+0x17c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c22:	e009      	b.n	8001c38 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e300      	b.n	8002230 <decodeGGA+0x744>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <decodeGGA+0x17c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <decodeGGA+0x17c>)
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <decodeGGA+0x17c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b2c      	cmp	r3, #44	; 0x2c
 8001c46:	d1f2      	bne.n	8001c2e <decodeGGA+0x142>
	/******************************************************************************/
	/*                     					Get TIME                              */
	/*				      (Update the GMT Offset at the top of this file)		  */
	/******************************************************************************/

	inx++;   // reach the first number in time
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <decodeGGA+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <decodeGGA+0x17c>)
 8001c50:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	220c      	movs	r2, #12
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 f92a 	bl	8003eb4 <memset>
	i=0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy up to the we reach the after time ','
 8001c64:	e016      	b.n	8001c94 <decodeGGA+0x1a8>
 8001c66:	bf00      	nop
 8001c68:	20000240 	.word	0x20000240
	{
		buffer[i] = GGAbuffer[inx];
 8001c6c:	4baa      	ldr	r3, [pc, #680]	; (8001f18 <decodeGGA+0x42c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	7819      	ldrb	r1, [r3, #0]
 8001c78:	f107 020c 	add.w	r2, r7, #12
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7e:	4413      	add	r3, r2
 8001c80:	460a      	mov	r2, r1
 8001c82:	701a      	strb	r2, [r3, #0]
		i++;
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	3301      	adds	r3, #1
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001c8a:	4ba3      	ldr	r3, [pc, #652]	; (8001f18 <decodeGGA+0x42c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4aa1      	ldr	r2, [pc, #644]	; (8001f18 <decodeGGA+0x42c>)
 8001c92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy up to the we reach the after time ','
 8001c94:	4ba0      	ldr	r3, [pc, #640]	; (8001f18 <decodeGGA+0x42c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ca2:	d1e3      	bne.n	8001c6c <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 f8d4 	bl	8003e56 <atoi>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a9a      	ldr	r2, [pc, #616]	; (8001f1c <decodeGGA+0x430>)
 8001cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb6:	1312      	asrs	r2, r2, #12
 8001cb8:	17db      	asrs	r3, r3, #31
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	4b98      	ldr	r3, [pc, #608]	; (8001f20 <decodeGGA+0x434>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4998      	ldr	r1, [pc, #608]	; (8001f24 <decodeGGA+0x438>)
 8001cc2:	fb81 0103 	smull	r0, r1, r1, r3
 8001cc6:	1149      	asrs	r1, r1, #5
 8001cc8:	17db      	asrs	r3, r3, #31
 8001cca:	1acb      	subs	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a96      	ldr	r2, [pc, #600]	; (8001f28 <decodeGGA+0x43c>)
 8001cd0:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 f8bd 	bl	8003e56 <atoi>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a91      	ldr	r2, [pc, #580]	; (8001f24 <decodeGGA+0x438>)
 8001ce0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce4:	1152      	asrs	r2, r2, #5
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	4a8e      	ldr	r2, [pc, #568]	; (8001f24 <decodeGGA+0x438>)
 8001cec:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf0:	1151      	asrs	r1, r2, #5
 8001cf2:	17da      	asrs	r2, r3, #31
 8001cf4:	1a8a      	subs	r2, r1, r2
 8001cf6:	2164      	movs	r1, #100	; 0x64
 8001cf8:	fb01 f202 	mul.w	r2, r1, r2
 8001cfc:	1a9a      	subs	r2, r3, r2
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <decodeGGA+0x434>)
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <decodeGGA+0x438>)
 8001d04:	fb83 0301 	smull	r0, r3, r3, r1
 8001d08:	1158      	asrs	r0, r3, #5
 8001d0a:	17cb      	asrs	r3, r1, #31
 8001d0c:	1ac3      	subs	r3, r0, r3
 8001d0e:	2064      	movs	r0, #100	; 0x64
 8001d10:	fb00 f303 	mul.w	r3, r0, r3
 8001d14:	1acb      	subs	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	4a84      	ldr	r2, [pc, #528]	; (8001f2c <decodeGGA+0x440>)
 8001d1a:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001d1c:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <decodeGGA+0x440>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b3b      	cmp	r3, #59	; 0x3b
 8001d22:	dd09      	ble.n	8001d38 <decodeGGA+0x24c>
	{
		min = min-60;
 8001d24:	4b81      	ldr	r3, [pc, #516]	; (8001f2c <decodeGGA+0x440>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3b3c      	subs	r3, #60	; 0x3c
 8001d2a:	4a80      	ldr	r2, [pc, #512]	; (8001f2c <decodeGGA+0x440>)
 8001d2c:	6013      	str	r3, [r2, #0]
		hr++;
 8001d2e:	4b7e      	ldr	r3, [pc, #504]	; (8001f28 <decodeGGA+0x43c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	4a7c      	ldr	r2, [pc, #496]	; (8001f28 <decodeGGA+0x43c>)
 8001d36:	6013      	str	r3, [r2, #0]
	}

	if (hr<0)
 8001d38:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <decodeGGA+0x43c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da09      	bge.n	8001d54 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001d40:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <decodeGGA+0x43c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3318      	adds	r3, #24
 8001d46:	4a78      	ldr	r2, [pc, #480]	; (8001f28 <decodeGGA+0x43c>)
 8001d48:	6013      	str	r3, [r2, #0]
		daychange--;
 8001d4a:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <decodeGGA+0x444>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a77      	ldr	r2, [pc, #476]	; (8001f30 <decodeGGA+0x444>)
 8001d52:	6013      	str	r3, [r2, #0]
	}

	if (hr>=24)
 8001d54:	4b74      	ldr	r3, [pc, #464]	; (8001f28 <decodeGGA+0x43c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b17      	cmp	r3, #23
 8001d5a:	dd09      	ble.n	8001d70 <decodeGGA+0x284>
	{
		hr=hr-24;
 8001d5c:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <decodeGGA+0x43c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3b18      	subs	r3, #24
 8001d62:	4a71      	ldr	r2, [pc, #452]	; (8001f28 <decodeGGA+0x43c>)
 8001d64:	6013      	str	r3, [r2, #0]
		daychange++;
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <decodeGGA+0x444>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a70      	ldr	r2, [pc, #448]	; (8001f30 <decodeGGA+0x444>)
 8001d6e:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001d70:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <decodeGGA+0x43c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001d78:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <decodeGGA+0x440>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 f866 	bl	8003e56 <atoi>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <decodeGGA+0x438>)
 8001d8e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d92:	1159      	asrs	r1, r3, #5
 8001d94:	17d3      	asrs	r3, r2, #31
 8001d96:	1acb      	subs	r3, r1, r3
 8001d98:	2164      	movs	r1, #100	; 0x64
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6193      	str	r3, [r2, #24]

	/******************************************************************************/
	/*                     					Get LATITUDE                          */
	/******************************************************************************/

	inx++;   // Reach the first number in the latitude
 8001da4:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <decodeGGA+0x42c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a5b      	ldr	r2, [pc, #364]	; (8001f18 <decodeGGA+0x42c>)
 8001dac:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	220c      	movs	r2, #12
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 f87c 	bl	8003eb4 <memset>
	i=0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')   // copy up to the we reach the after latitude ','
 8001dc0:	e013      	b.n	8001dea <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <decodeGGA+0x42c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	7819      	ldrb	r1, [r3, #0]
 8001dce:	f107 020c 	add.w	r2, r7, #12
 8001dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd4:	4413      	add	r3, r2
 8001dd6:	460a      	mov	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
		i++;
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	3301      	adds	r3, #1
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001de0:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <decodeGGA+0x42c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	4a4c      	ldr	r2, [pc, #304]	; (8001f18 <decodeGGA+0x42c>)
 8001de8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy up to the we reach the after latitude ','
 8001dea:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <decodeGGA+0x42c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b2c      	cmp	r3, #44	; 0x2c
 8001df8:	d1e3      	bne.n	8001dc2 <decodeGGA+0x2d6>
	}

	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe f9b6 	bl	8000170 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d801      	bhi.n	8001e0e <decodeGGA+0x322>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e210      	b.n	8002230 <decodeGGA+0x744>

	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert up to decimal
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 f81f 	bl	8003e56 <atoi>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001e20:	e002      	b.n	8001e28 <decodeGGA+0x33c>
 8001e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e24:	3301      	adds	r3, #1
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
 8001e28:	f107 020c 	add.w	r2, r7, #12
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b2e      	cmp	r3, #46	; 0x2e
 8001e34:	d1f5      	bne.n	8001e22 <decodeGGA+0x336>
	j++;
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	3301      	adds	r3, #1
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe f995 	bl	8000170 <strlen>
 8001e46:	4602      	mov	r2, r0
 8001e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi ((char *) buffer+j);  // convert the decimal part a a separate number
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	f107 020c 	add.w	r2, r7, #12
 8001e54:	4413      	add	r3, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fffd 	bl	8003e56 <atoi>
 8001e5c:	6278      	str	r0, [r7, #36]	; 0x24
	double lat = (num/100.0) + (dec/ (60 * pow(10, (declen+2) ) ) );  // 1234.56789 -> 12 + 0.3456789/60
 8001e5e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fade 	bl	8000424 <__aeabi_i2d>
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <decodeGGA+0x448>)
 8001e6e:	f7fe fc6d 	bl	800074c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4690      	mov	r8, r2
 8001e78:	4699      	mov	r9, r3
 8001e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e7c:	f7fe fad2 	bl	8000424 <__aeabi_i2d>
 8001e80:	4604      	mov	r4, r0
 8001e82:	460d      	mov	r5, r1
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	3302      	adds	r3, #2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe facb 	bl	8000424 <__aeabi_i2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	4928      	ldr	r1, [pc, #160]	; (8001f38 <decodeGGA+0x44c>)
 8001e98:	f005 f802 	bl	8006ea0 <pow>
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <decodeGGA+0x450>)
 8001ea2:	f7fe fb29 	bl	80004f8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe fc4d 	bl	800074c <__aeabi_ddiv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4640      	mov	r0, r8
 8001eb8:	4649      	mov	r1, r9
 8001eba:	f7fe f967 	bl	800018c <__adddf3>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the latitude data into the structure
 8001ec6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eca:	f7fe fded 	bl	8000aa8 <__aeabi_d2f>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	601a      	str	r2, [r3, #0]
	inx++;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <decodeGGA+0x42c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <decodeGGA+0x42c>)
 8001edc:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <decodeGGA+0x42c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	711a      	strb	r2, [r3, #4]

	/******************************************************************************/
	/*                     			Get LONGITUDE                                 */
	/******************************************************************************/

	inx++;  // ',' after NS character
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <decodeGGA+0x42c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <decodeGGA+0x42c>)
 8001ef6:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <decodeGGA+0x42c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <decodeGGA+0x42c>)
 8001f00:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	220c      	movs	r2, #12
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 ffd2 	bl	8003eb4 <memset>
	i=0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34

	while (GGAbuffer[inx] != ',')  // copy up to the we reach the after longitude ','
 8001f14:	e028      	b.n	8001f68 <decodeGGA+0x47c>
 8001f16:	bf00      	nop
 8001f18:	20000240 	.word	0x20000240
 8001f1c:	68db8bad 	.word	0x68db8bad
 8001f20:	20000018 	.word	0x20000018
 8001f24:	51eb851f 	.word	0x51eb851f
 8001f28:	20000244 	.word	0x20000244
 8001f2c:	20000248 	.word	0x20000248
 8001f30:	20000258 	.word	0x20000258
 8001f34:	40590000 	.word	0x40590000
 8001f38:	40240000 	.word	0x40240000
 8001f3c:	404e0000 	.word	0x404e0000
	{
		buffer[i] = GGAbuffer[inx];
 8001f40:	4b8a      	ldr	r3, [pc, #552]	; (800216c <decodeGGA+0x680>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	7819      	ldrb	r1, [r3, #0]
 8001f4c:	f107 020c 	add.w	r2, r7, #12
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	4413      	add	r3, r2
 8001f54:	460a      	mov	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
		i++;
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001f5e:	4b83      	ldr	r3, [pc, #524]	; (800216c <decodeGGA+0x680>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a81      	ldr	r2, [pc, #516]	; (800216c <decodeGGA+0x680>)
 8001f66:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy up to the we reach the after longitude ','
 8001f68:	4b80      	ldr	r3, [pc, #512]	; (800216c <decodeGGA+0x680>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b2c      	cmp	r3, #44	; 0x2c
 8001f76:	d1e3      	bne.n	8001f40 <decodeGGA+0x454>
	}

	num = (atoi(buffer));  					// change the buffer to the number. It will only convert up to decimal
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 ff6a 	bl	8003e56 <atoi>
 8001f82:	4603      	mov	r3, r0
 8001f84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.') j++;  			// Figure out how many digits before the decimal
 8001f8a:	e002      	b.n	8001f92 <decodeGGA+0x4a6>
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	3301      	adds	r3, #1
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
 8001f92:	f107 020c 	add.w	r2, r7, #12
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8001f9e:	d1f5      	bne.n	8001f8c <decodeGGA+0x4a0>
	j++;
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer))-j;  			// calculate the number of digit after decimal
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f8e0 	bl	8000170 <strlen>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi ((char *) buffer+j);  		// convert the decimal part a a separate number
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	f107 020c 	add.w	r2, r7, #12
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 ff48 	bl	8003e56 <atoi>
 8001fc6:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num/100.0) + (dec/(60 * pow(10, (declen+2) ) ) );  // 1234.56789 = 12.3456789
 8001fc8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa29 	bl	8000424 <__aeabi_i2d>
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <decodeGGA+0x684>)
 8001fd8:	f7fe fbb8 	bl	800074c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fe6:	f7fe fa1d 	bl	8000424 <__aeabi_i2d>
 8001fea:	4604      	mov	r4, r0
 8001fec:	460d      	mov	r5, r1
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fa16 	bl	8000424 <__aeabi_i2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	f04f 0000 	mov.w	r0, #0
 8002000:	495c      	ldr	r1, [pc, #368]	; (8002174 <decodeGGA+0x688>)
 8002002:	f004 ff4d 	bl	8006ea0 <pow>
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <decodeGGA+0x68c>)
 800200c:	f7fe fa74 	bl	80004f8 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	f7fe fb98 	bl	800074c <__aeabi_ddiv>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4640      	mov	r0, r8
 8002022:	4649      	mov	r1, r9
 8002024:	f7fe f8b2 	bl	800018c <__adddf3>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.longitude = lat;  			// save the longitude data into the structure
 8002030:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002034:	f7fe fd38 	bl	8000aa8 <__aeabi_d2f>
 8002038:	4602      	mov	r2, r0
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	609a      	str	r2, [r3, #8]
	inx++;
 800203e:	4b4b      	ldr	r3, [pc, #300]	; (800216c <decodeGGA+0x680>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <decodeGGA+0x680>)
 8002046:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  		// save the E/W into the structure
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <decodeGGA+0x680>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	731a      	strb	r2, [r3, #12]

	/**************************************************/
	/* skip positition fix */
	inx++;   								// ',' after E/W
 8002058:	4b44      	ldr	r3, [pc, #272]	; (800216c <decodeGGA+0x680>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <decodeGGA+0x680>)
 8002060:	6013      	str	r3, [r2, #0]
	inx++;   								// position fix
 8002062:	4b42      	ldr	r3, [pc, #264]	; (800216c <decodeGGA+0x680>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a40      	ldr	r2, [pc, #256]	; (800216c <decodeGGA+0x680>)
 800206a:	6013      	str	r3, [r2, #0]
	inx++;   								// ',' after position fix;
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <decodeGGA+0x680>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	4a3e      	ldr	r2, [pc, #248]	; (800216c <decodeGGA+0x680>)
 8002074:	6013      	str	r3, [r2, #0]

	/* number of satellites */
	inx++;  								// Reach the first number in the satellites
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <decodeGGA+0x680>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <decodeGGA+0x680>)
 800207e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	220c      	movs	r2, #12
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f001 ff13 	bl	8003eb4 <memset>
	i=0;
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  			// copy up to the ',' after number of satellites
 8002092:	e013      	b.n	80020bc <decodeGGA+0x5d0>
	{
		buffer[i] = GGAbuffer[inx];
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <decodeGGA+0x680>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	7819      	ldrb	r1, [r3, #0]
 80020a0:	f107 020c 	add.w	r2, r7, #12
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	4413      	add	r3, r2
 80020a8:	460a      	mov	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
		i++;
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	3301      	adds	r3, #1
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <decodeGGA+0x680>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4a2c      	ldr	r2, [pc, #176]	; (800216c <decodeGGA+0x680>)
 80020ba:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  			// copy up to the ',' after number of satellites
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <decodeGGA+0x680>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b2c      	cmp	r3, #44	; 0x2c
 80020ca:	d1e3      	bne.n	8002094 <decodeGGA+0x5a8>
	}
	gga->numofsat = atoi(buffer);   		// convert the buffer to number and save into the structure
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 fec0 	bl	8003e56 <atoi>
 80020d6:	4602      	mov	r2, r0
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28

	/******************************************************************************/
	/*                     			skip HDOP                                	  */
	/******************************************************************************/

	inx++;
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <decodeGGA+0x680>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a22      	ldr	r2, [pc, #136]	; (800216c <decodeGGA+0x680>)
 80020e4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80020e6:	e004      	b.n	80020f2 <decodeGGA+0x606>
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <decodeGGA+0x680>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	4a1f      	ldr	r2, [pc, #124]	; (800216c <decodeGGA+0x680>)
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <decodeGGA+0x680>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b2c      	cmp	r3, #44	; 0x2c
 8002100:	d1f2      	bne.n	80020e8 <decodeGGA+0x5fc>

	/******************************************************************************/
	/*                     			Altitude calculation                          */
	/******************************************************************************/

	inx++;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <decodeGGA+0x680>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <decodeGGA+0x680>)
 800210a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	220c      	movs	r2, #12
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f001 fecd 	bl	8003eb4 <memset>
	i=0;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 800211e:	e013      	b.n	8002148 <decodeGGA+0x65c>
	{
		buffer[i] = GGAbuffer[inx];
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <decodeGGA+0x680>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	7819      	ldrb	r1, [r3, #0]
 800212c:	f107 020c 	add.w	r2, r7, #12
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002132:	4413      	add	r3, r2
 8002134:	460a      	mov	r2, r1
 8002136:	701a      	strb	r2, [r3, #0]
		i++;
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	3301      	adds	r3, #1
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <decodeGGA+0x680>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <decodeGGA+0x680>)
 8002146:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <decodeGGA+0x680>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b2c      	cmp	r3, #44	; 0x2c
 8002156:	d1e3      	bne.n	8002120 <decodeGGA+0x634>
	}

	num = (atoi(buffer));
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fe7a 	bl	8003e56 <atoi>
 8002162:	4603      	mov	r3, r0
 8002164:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.') j++;
 800216a:	e00a      	b.n	8002182 <decodeGGA+0x696>
 800216c:	20000240 	.word	0x20000240
 8002170:	40590000 	.word	0x40590000
 8002174:	40240000 	.word	0x40240000
 8002178:	404e0000 	.word	0x404e0000
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	3301      	adds	r3, #1
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 8002182:	f107 020c 	add.w	r2, r7, #12
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b2e      	cmp	r3, #46	; 0x2e
 800218e:	d1f5      	bne.n	800217c <decodeGGA+0x690>
	j++;
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	3301      	adds	r3, #1
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer))-j;
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	4618      	mov	r0, r3
 800219c:	f7fd ffe8 	bl	8000170 <strlen>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi ((char *) buffer+j);
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	f107 020c 	add.w	r2, r7, #12
 80021ae:	4413      	add	r3, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 fe50 	bl	8003e56 <atoi>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec/pow(10, (declen)));
 80021b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f931 	bl	8000424 <__aeabi_i2d>
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
 80021c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021c8:	f7fe f92c 	bl	8000424 <__aeabi_i2d>
 80021cc:	4680      	mov	r8, r0
 80021ce:	4689      	mov	r9, r1
 80021d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d2:	f7fe f927 	bl	8000424 <__aeabi_i2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	4917      	ldr	r1, [pc, #92]	; (800223c <decodeGGA+0x750>)
 80021e0:	f004 fe5e 	bl	8006ea0 <pow>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4640      	mov	r0, r8
 80021ea:	4649      	mov	r1, r9
 80021ec:	f7fe faae 	bl	800074c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fd ffc8 	bl	800018c <__adddf3>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->alt.altitude = lat;
 8002204:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002208:	f7fe fc4e 	bl	8000aa8 <__aeabi_d2f>
 800220c:	4602      	mov	r2, r0
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	621a      	str	r2, [r3, #32]

	inx++;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <decodeGGA+0x754>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	4a09      	ldr	r2, [pc, #36]	; (8002240 <decodeGGA+0x754>)
 800221a:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <decodeGGA+0x754>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800222e:	2300      	movs	r3, #0

}
 8002230:	4618      	mov	r0, r3
 8002232:	3738      	adds	r7, #56	; 0x38
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800223a:	bf00      	nop
 800223c:	40240000 	.word	0x40240000
 8002240:	20000240 	.word	0x20000240

08002244 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002248:	b094      	sub	sp, #80	; 0x50
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8002250:	4b92      	ldr	r3, [pc, #584]	; (800249c <decodeRMC+0x258>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (RMCbuffer[inx] != ',') inx++;  		// 1st ,
 800225a:	e004      	b.n	8002266 <decodeRMC+0x22>
 800225c:	4b8f      	ldr	r3, [pc, #572]	; (800249c <decodeRMC+0x258>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	4a8e      	ldr	r2, [pc, #568]	; (800249c <decodeRMC+0x258>)
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b8d      	ldr	r3, [pc, #564]	; (800249c <decodeRMC+0x258>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b2c      	cmp	r3, #44	; 0x2c
 8002274:	d1f2      	bne.n	800225c <decodeRMC+0x18>
	inx++;
 8002276:	4b89      	ldr	r3, [pc, #548]	; (800249c <decodeRMC+0x258>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a87      	ldr	r2, [pc, #540]	; (800249c <decodeRMC+0x258>)
 800227e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  		// After time ,
 8002280:	e004      	b.n	800228c <decodeRMC+0x48>
 8002282:	4b86      	ldr	r3, [pc, #536]	; (800249c <decodeRMC+0x258>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	4a84      	ldr	r2, [pc, #528]	; (800249c <decodeRMC+0x258>)
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b83      	ldr	r3, [pc, #524]	; (800249c <decodeRMC+0x258>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b2c      	cmp	r3, #44	; 0x2c
 800229a:	d1f2      	bne.n	8002282 <decodeRMC+0x3e>
	inx++;
 800229c:	4b7f      	ldr	r3, [pc, #508]	; (800249c <decodeRMC+0x258>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a7e      	ldr	r2, [pc, #504]	; (800249c <decodeRMC+0x258>)
 80022a4:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  				// Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80022a6:	4b7d      	ldr	r3, [pc, #500]	; (800249c <decodeRMC+0x258>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b41      	cmp	r3, #65	; 0x41
 80022b4:	d10d      	bne.n	80022d2 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80022bc:	4b77      	ldr	r3, [pc, #476]	; (800249c <decodeRMC+0x258>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a76      	ldr	r2, [pc, #472]	; (800249c <decodeRMC+0x258>)
 80022c4:	6013      	str	r3, [r2, #0]
	inx++;
 80022c6:	4b75      	ldr	r3, [pc, #468]	; (800249c <decodeRMC+0x258>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a73      	ldr	r2, [pc, #460]	; (800249c <decodeRMC+0x258>)
 80022ce:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  		// after latitude,
 80022d0:	e009      	b.n	80022e6 <decodeRMC+0xa2>
		rmc->isValid =0;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
		return 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	e1d5      	b.n	8002688 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  		// after latitude,
 80022dc:	4b6f      	ldr	r3, [pc, #444]	; (800249c <decodeRMC+0x258>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a6e      	ldr	r2, [pc, #440]	; (800249c <decodeRMC+0x258>)
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b6d      	ldr	r3, [pc, #436]	; (800249c <decodeRMC+0x258>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b2c      	cmp	r3, #44	; 0x2c
 80022f4:	d1f2      	bne.n	80022dc <decodeRMC+0x98>
	inx++;
 80022f6:	4b69      	ldr	r3, [pc, #420]	; (800249c <decodeRMC+0x258>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a67      	ldr	r2, [pc, #412]	; (800249c <decodeRMC+0x258>)
 80022fe:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  		// after NS ,
 8002300:	e004      	b.n	800230c <decodeRMC+0xc8>
 8002302:	4b66      	ldr	r3, [pc, #408]	; (800249c <decodeRMC+0x258>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	4a64      	ldr	r2, [pc, #400]	; (800249c <decodeRMC+0x258>)
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b63      	ldr	r3, [pc, #396]	; (800249c <decodeRMC+0x258>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b2c      	cmp	r3, #44	; 0x2c
 800231a:	d1f2      	bne.n	8002302 <decodeRMC+0xbe>
	inx++;
 800231c:	4b5f      	ldr	r3, [pc, #380]	; (800249c <decodeRMC+0x258>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	4a5e      	ldr	r2, [pc, #376]	; (800249c <decodeRMC+0x258>)
 8002324:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  		// after longitude ,
 8002326:	e004      	b.n	8002332 <decodeRMC+0xee>
 8002328:	4b5c      	ldr	r3, [pc, #368]	; (800249c <decodeRMC+0x258>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a5b      	ldr	r2, [pc, #364]	; (800249c <decodeRMC+0x258>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b5a      	ldr	r3, [pc, #360]	; (800249c <decodeRMC+0x258>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b2c      	cmp	r3, #44	; 0x2c
 8002340:	d1f2      	bne.n	8002328 <decodeRMC+0xe4>
	inx++;
 8002342:	4b56      	ldr	r3, [pc, #344]	; (800249c <decodeRMC+0x258>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	4a54      	ldr	r2, [pc, #336]	; (800249c <decodeRMC+0x258>)
 800234a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  		// after EW ,
 800234c:	e004      	b.n	8002358 <decodeRMC+0x114>
 800234e:	4b53      	ldr	r3, [pc, #332]	; (800249c <decodeRMC+0x258>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	4a51      	ldr	r2, [pc, #324]	; (800249c <decodeRMC+0x258>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <decodeRMC+0x258>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b2c      	cmp	r3, #44	; 0x2c
 8002366:	d1f2      	bne.n	800234e <decodeRMC+0x10a>

	/******************************************************************************/
	/*                     			    Get Speed			                      */
	/******************************************************************************/

	inx++;
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <decodeRMC+0x258>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a4b      	ldr	r2, [pc, #300]	; (800249c <decodeRMC+0x258>)
 8002370:	6013      	str	r3, [r2, #0]
	i=0;
 8002372:	2300      	movs	r3, #0
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
	memset(buffer, '\0', 12);
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	220c      	movs	r2, #12
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fd98 	bl	8003eb4 <memset>
	while (RMCbuffer[inx] != ',')
 8002384:	e013      	b.n	80023ae <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8002386:	4b45      	ldr	r3, [pc, #276]	; (800249c <decodeRMC+0x258>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	7819      	ldrb	r1, [r3, #0]
 8002392:	f107 020c 	add.w	r2, r7, #12
 8002396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002398:	4413      	add	r3, r2
 800239a:	460a      	mov	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
		i++;
 800239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a0:	3301      	adds	r3, #1
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		inx++;
 80023a4:	4b3d      	ldr	r3, [pc, #244]	; (800249c <decodeRMC+0x258>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a3c      	ldr	r2, [pc, #240]	; (800249c <decodeRMC+0x258>)
 80023ac:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <decodeRMC+0x258>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b2c      	cmp	r3, #44	; 0x2c
 80023bc:	d1e3      	bne.n	8002386 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          			// if the speed have some data
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d056      	beq.n	8002476 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  			// convert the data into the number
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 fd42 	bl	8003e56 <atoi>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		int j = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48
		while (buffer[j] != '.') j++;   		// same as above
 80023dc:	e002      	b.n	80023e4 <decodeRMC+0x1a0>
 80023de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e0:	3301      	adds	r3, #1
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e4:	f107 020c 	add.w	r2, r7, #12
 80023e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b2e      	cmp	r3, #46	; 0x2e
 80023f0:	d1f5      	bne.n	80023de <decodeRMC+0x19a>
		j++;
 80023f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f4:	3301      	adds	r3, #1
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
		int declen = (strlen(buffer))-j;
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fd feb7 	bl	8000170 <strlen>
 8002402:	4602      	mov	r2, r0
 8002404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
		int dec = atoi ((char *) buffer+j);
 800240a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240c:	f107 020c 	add.w	r2, r7, #12
 8002410:	4413      	add	r3, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f001 fd1f 	bl	8003e56 <atoi>
 8002418:	63b8      	str	r0, [r7, #56]	; 0x38
		double lat = num + (dec/pow(10, (declen)));
 800241a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f800 	bl	8000424 <__aeabi_i2d>
 8002424:	4604      	mov	r4, r0
 8002426:	460d      	mov	r5, r1
 8002428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800242a:	f7fd fffb 	bl	8000424 <__aeabi_i2d>
 800242e:	4680      	mov	r8, r0
 8002430:	4689      	mov	r9, r1
 8002432:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002434:	f7fd fff6 	bl	8000424 <__aeabi_i2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	f04f 0000 	mov.w	r0, #0
 8002440:	4917      	ldr	r1, [pc, #92]	; (80024a0 <decodeRMC+0x25c>)
 8002442:	f004 fd2d 	bl	8006ea0 <pow>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4640      	mov	r0, r8
 800244c:	4649      	mov	r1, r9
 800244e:	f7fe f97d 	bl	800074c <__aeabi_ddiv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4620      	mov	r0, r4
 8002458:	4629      	mov	r1, r5
 800245a:	f7fd fe97 	bl	800018c <__adddf3>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		rmc->speed = lat;
 8002466:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800246a:	f7fe fb1d 	bl	8000aa8 <__aeabi_d2f>
 800246e:	4602      	mov	r2, r0
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	e003      	b.n	800247e <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	60da      	str	r2, [r3, #12]

	/******************************************************************************/
	/*                     			    Get Course			                      */
	/******************************************************************************/

	inx++;
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <decodeRMC+0x258>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	4a05      	ldr	r2, [pc, #20]	; (800249c <decodeRMC+0x258>)
 8002486:	6013      	str	r3, [r2, #0]
	i=0;
 8002488:	2300      	movs	r3, #0
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
	memset(buffer, '\0', 12);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	220c      	movs	r2, #12
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f001 fd0d 	bl	8003eb4 <memset>
	while (RMCbuffer[inx] != ',')
 800249a:	e017      	b.n	80024cc <decodeRMC+0x288>
 800249c:	20000240 	.word	0x20000240
 80024a0:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 80024a4:	4b7b      	ldr	r3, [pc, #492]	; (8002694 <decodeRMC+0x450>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	7819      	ldrb	r1, [r3, #0]
 80024b0:	f107 020c 	add.w	r2, r7, #12
 80024b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b6:	4413      	add	r3, r2
 80024b8:	460a      	mov	r2, r1
 80024ba:	701a      	strb	r2, [r3, #0]
		i++;
 80024bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024be:	3301      	adds	r3, #1
 80024c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		inx++;
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <decodeRMC+0x450>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	4a72      	ldr	r2, [pc, #456]	; (8002694 <decodeRMC+0x450>)
 80024ca:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024cc:	4b71      	ldr	r3, [pc, #452]	; (8002694 <decodeRMC+0x450>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b2c      	cmp	r3, #44	; 0x2c
 80024da:	d1e3      	bne.n	80024a4 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  				// if the course have some data
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d055      	beq.n	8002592 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   	// convert the course data into the number
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4618      	mov	r0, r3
 80024ec:	f001 fcb3 	bl	8003e56 <atoi>
 80024f0:	4603      	mov	r3, r0
 80024f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		int j = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	647b      	str	r3, [r7, #68]	; 0x44
		while (buffer[j] != '.') j++;   	// same as above
 80024f8:	e002      	b.n	8002500 <decodeRMC+0x2bc>
 80024fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fc:	3301      	adds	r3, #1
 80024fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002500:	f107 020c 	add.w	r2, r7, #12
 8002504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b2e      	cmp	r3, #46	; 0x2e
 800250c:	d1f5      	bne.n	80024fa <decodeRMC+0x2b6>
		j++;
 800250e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002510:	3301      	adds	r3, #1
 8002512:	647b      	str	r3, [r7, #68]	; 0x44
		int declen = (strlen(buffer))-j;
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd fe29 	bl	8000170 <strlen>
 800251e:	4602      	mov	r2, r0
 8002520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
		int dec = atoi ((char *) buffer+j);
 8002526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	4413      	add	r3, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fc91 	bl	8003e56 <atoi>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24
		double lat = num + (dec/pow(10, (declen)));
 8002536:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ff72 	bl	8000424 <__aeabi_i2d>
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
 8002544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002546:	f7fd ff6d 	bl	8000424 <__aeabi_i2d>
 800254a:	4680      	mov	r8, r0
 800254c:	4689      	mov	r9, r1
 800254e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002550:	f7fd ff68 	bl	8000424 <__aeabi_i2d>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	f04f 0000 	mov.w	r0, #0
 800255c:	494e      	ldr	r1, [pc, #312]	; (8002698 <decodeRMC+0x454>)
 800255e:	f004 fc9f 	bl	8006ea0 <pow>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4640      	mov	r0, r8
 8002568:	4649      	mov	r1, r9
 800256a:	f7fe f8ef 	bl	800074c <__aeabi_ddiv>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4620      	mov	r0, r4
 8002574:	4629      	mov	r1, r5
 8002576:	f7fd fe09 	bl	800018c <__adddf3>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		rmc->course = lat;
 8002582:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002586:	f7fe fa8f 	bl	8000aa8 <__aeabi_d2f>
 800258a:	4602      	mov	r2, r0
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	611a      	str	r2, [r3, #16]
 8002590:	e003      	b.n	800259a <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	611a      	str	r2, [r3, #16]

	/******************************************************************************/
	/*                     			    Get Date			                      */
	/******************************************************************************/

	inx++;
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <decodeRMC+0x450>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	4a3c      	ldr	r2, [pc, #240]	; (8002694 <decodeRMC+0x450>)
 80025a2:	6013      	str	r3, [r2, #0]
	i=0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	memset(buffer, '\0', 12);
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	220c      	movs	r2, #12
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 fc7f 	bl	8003eb4 <memset>
	while (RMCbuffer[inx] != ',')
 80025b6:	e013      	b.n	80025e0 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <decodeRMC+0x450>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	7819      	ldrb	r1, [r3, #0]
 80025c4:	f107 020c 	add.w	r2, r7, #12
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	4413      	add	r3, r2
 80025cc:	460a      	mov	r2, r1
 80025ce:	701a      	strb	r2, [r3, #0]
		i++;
 80025d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d2:	3301      	adds	r3, #1
 80025d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		inx++;
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <decodeRMC+0x450>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <decodeRMC+0x450>)
 80025de:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <decodeRMC+0x450>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b2c      	cmp	r3, #44	; 0x2c
 80025ee:	d1e3      	bne.n	80025b8 <decodeRMC+0x374>
	}

	/* Date in the format 110823 */
	day = atoi(buffer)/10000;  			// extract 11
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fc2e 	bl	8003e56 <atoi>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a27      	ldr	r2, [pc, #156]	; (800269c <decodeRMC+0x458>)
 80025fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002602:	1312      	asrs	r2, r2, #12
 8002604:	17db      	asrs	r3, r3, #31
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <decodeRMC+0x45c>)
 800260a:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  		// extract 08
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4618      	mov	r0, r3
 8002612:	f001 fc20 	bl	8003e56 <atoi>
 8002616:	4603      	mov	r3, r0
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <decodeRMC+0x460>)
 800261a:	fb82 1203 	smull	r1, r2, r2, r3
 800261e:	1152      	asrs	r2, r2, #5
 8002620:	17db      	asrs	r3, r3, #31
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <decodeRMC+0x460>)
 8002626:	fb83 1302 	smull	r1, r3, r3, r2
 800262a:	1159      	asrs	r1, r3, #5
 800262c:	17d3      	asrs	r3, r2, #31
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	2164      	movs	r1, #100	; 0x64
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <decodeRMC+0x464>)
 800263a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  			// extract 23
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	4618      	mov	r0, r3
 8002642:	f001 fc08 	bl	8003e56 <atoi>
 8002646:	4602      	mov	r2, r0
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <decodeRMC+0x460>)
 800264a:	fb83 1302 	smull	r1, r3, r3, r2
 800264e:	1159      	asrs	r1, r3, #5
 8002650:	17d3      	asrs	r3, r2, #31
 8002652:	1acb      	subs	r3, r1, r3
 8002654:	2164      	movs	r1, #100	; 0x64
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <decodeRMC+0x468>)
 800265e:	6013      	str	r3, [r2, #0]

	day = day+daychange;   				// correction due to GMT shift
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <decodeRMC+0x45c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <decodeRMC+0x46c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4413      	add	r3, r2
 800266a:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <decodeRMC+0x45c>)
 800266c:	6013      	str	r3, [r2, #0]

	/* Save the data into the structure */
	rmc->date.Day = day;
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <decodeRMC+0x45c>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <decodeRMC+0x464>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <decodeRMC+0x468>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	609a      	str	r2, [r3, #8]

	return 0;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3750      	adds	r7, #80	; 0x50
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002692:	bf00      	nop
 8002694:	20000240 	.word	0x20000240
 8002698:	40240000 	.word	0x40240000
 800269c:	68db8bad 	.word	0x68db8bad
 80026a0:	2000024c 	.word	0x2000024c
 80026a4:	51eb851f 	.word	0x51eb851f
 80026a8:	20000250 	.word	0x20000250
 80026ac:	20000254 	.word	0x20000254
 80026b0:	20000258 	.word	0x20000258

080026b4 <delay_ms>:
/*
 ******************************************************************************
 */

void delay_ms(uint32_t ms)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ms; i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e00d      	b.n	80026de <delay_ms+0x2a>
	{
		for (uint32_t j=0; j<5000; j++);
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	e002      	b.n	80026ce <delay_ms+0x1a>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3301      	adds	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f241 3287 	movw	r2, #4999	; 0x1387
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d9f7      	bls.n	80026c8 <delay_ms+0x14>
	for (uint32_t i=0; i<ms; i++)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d3ed      	bcc.n	80026c2 <delay_ms+0xe>
	}
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
	...

080026f4 <lcd_Write_byte>:
/*
 ******************************************************************************
 */
void lcd_Write_byte(char data)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
    /* Send START condition */
    I2C_GenerateSTART(I2C_Chanel, ENABLE);
 80026fe:	2101      	movs	r1, #1
 8002700:	4816      	ldr	r0, [pc, #88]	; (800275c <lcd_Write_byte+0x68>)
 8002702:	f7fe fd92 	bl	800122a <I2C_GenerateSTART>
    /* Test on EV5 and clear it */
    while (!I2C_CheckEvent(I2C_Chanel, I2C_EVENT_MASTER_MODE_SELECT));
 8002706:	bf00      	nop
 8002708:	4915      	ldr	r1, [pc, #84]	; (8002760 <lcd_Write_byte+0x6c>)
 800270a:	4814      	ldr	r0, [pc, #80]	; (800275c <lcd_Write_byte+0x68>)
 800270c:	f7fe fdf7 	bl	80012fe <I2C_CheckEvent>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f8      	beq.n	8002708 <lcd_Write_byte+0x14>
    /* Send PCF8574A address for write */
    I2C_Send7bitAddress(I2C_Chanel, PCF8574A_Address, I2C_Direction_Transmitter);
 8002716:	2200      	movs	r2, #0
 8002718:	214e      	movs	r1, #78	; 0x4e
 800271a:	4810      	ldr	r0, [pc, #64]	; (800275c <lcd_Write_byte+0x68>)
 800271c:	f7fe fdd2 	bl	80012c4 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
    while (!I2C_CheckEvent(I2C_Chanel, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002720:	bf00      	nop
 8002722:	4910      	ldr	r1, [pc, #64]	; (8002764 <lcd_Write_byte+0x70>)
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <lcd_Write_byte+0x68>)
 8002726:	f7fe fdea 	bl	80012fe <I2C_CheckEvent>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f8      	beq.n	8002722 <lcd_Write_byte+0x2e>
    /* Send the byte to be written */
    I2C_SendData(I2C_Chanel, data);
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	4619      	mov	r1, r3
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <lcd_Write_byte+0x68>)
 8002736:	f7fe fdb6 	bl	80012a6 <I2C_SendData>
    /* Test on EV8 and clear it */
    while (!I2C_CheckEvent(I2C_Chanel, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800273a:	bf00      	nop
 800273c:	490a      	ldr	r1, [pc, #40]	; (8002768 <lcd_Write_byte+0x74>)
 800273e:	4807      	ldr	r0, [pc, #28]	; (800275c <lcd_Write_byte+0x68>)
 8002740:	f7fe fddd 	bl	80012fe <I2C_CheckEvent>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f8      	beq.n	800273c <lcd_Write_byte+0x48>
    /* Send STOP condition */
    I2C_GenerateSTOP(I2C_Chanel, ENABLE);
 800274a:	2101      	movs	r1, #1
 800274c:	4803      	ldr	r0, [pc, #12]	; (800275c <lcd_Write_byte+0x68>)
 800274e:	f7fe fd8b 	bl	8001268 <I2C_GenerateSTOP>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40005400 	.word	0x40005400
 8002760:	00030001 	.word	0x00030001
 8002764:	00070082 	.word	0x00070082
 8002768:	00070084 	.word	0x00070084

0800276c <I2C_LCD_Configuration>:
/*
 ******************************************************************************
 */

void I2C_LCD_Configuration(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 					GPIO_InitStructure;
	I2C_InitTypeDef						I2C_InitStructure;
    // cap clock cho ngoai vi va I2C
//    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);							// su dung kenh I2C2 cua STM32
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);							// su dung kenh I2C2 cua STM32
 8002772:	2101      	movs	r1, #1
 8002774:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002778:	f7fe fec4 	bl	8001504 <RCC_APB1PeriphClockCmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800277c:	2101      	movs	r1, #1
 800277e:	2008      	movs	r0, #8
 8002780:	f7fe fea2 	bl	80014c8 <RCC_APB2PeriphClockCmd>

    // cau hinh chan SDA va SCL
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;						//PB10 - SCL, PB11 - SDA
 8002784:	23c0      	movs	r3, #192	; 0xc0
 8002786:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002788:	2303      	movs	r3, #3
 800278a:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800278c:	231c      	movs	r3, #28
 800278e:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4811      	ldr	r0, [pc, #68]	; (80027dc <I2C_LCD_Configuration+0x70>)
 8002798:	f7fe fb04 	bl	8000da4 <GPIO_Init>

    // cau hinh I2C
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800279c:	2300      	movs	r3, #0
 800279e:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80027a0:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80027a4:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_OwnAddress1 = 0; //
 80027a6:	2300      	movs	r3, #0
 80027a8:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Disable;
 80027aa:	2300      	movs	r3, #0
 80027ac:	81fb      	strh	r3, [r7, #14]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80027ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b2:	823b      	strh	r3, [r7, #16]
    I2C_InitStructure.I2C_ClockSpeed = 10000;
 80027b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80027b8:	607b      	str	r3, [r7, #4]
//    I2C_Init(I2C2, &I2C_InitStructure);
    I2C_Init(I2C1, &I2C_InitStructure);
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <I2C_LCD_Configuration+0x74>)
 80027c0:	f7fe fc52 	bl	8001068 <I2C_Init>
    // cho phep bo I2C hoat dong
//    I2C_Cmd(I2C2, ENABLE);
    I2C_Cmd(I2C1, ENABLE);
 80027c4:	2101      	movs	r1, #1
 80027c6:	4806      	ldr	r0, [pc, #24]	; (80027e0 <I2C_LCD_Configuration+0x74>)
 80027c8:	f7fe fd10 	bl	80011ec <I2C_Cmd>
    printf("cau\n");
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <I2C_LCD_Configuration+0x78>)
 80027ce:	f002 f85f 	bl	8004890 <puts>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40010c00 	.word	0x40010c00
 80027e0:	40005400 	.word	0x40005400
 80027e4:	08007d64 	.word	0x08007d64

080027e8 <lcd_init>:

void lcd_init (void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	//Config IO
	I2C_LCD_Configuration();
 80027ec:	f7ff ffbe 	bl	800276c <I2C_LCD_Configuration>

	printf("1\n");
 80027f0:	4818      	ldr	r0, [pc, #96]	; (8002854 <lcd_init+0x6c>)
 80027f2:	f002 f84d 	bl	8004890 <puts>
	/* Set 4-bits interface */
	lcd_Control_Write(0x33);
 80027f6:	2033      	movs	r0, #51	; 0x33
 80027f8:	f000 f868 	bl	80028cc <lcd_Control_Write>
	printf("2\n");
 80027fc:	4816      	ldr	r0, [pc, #88]	; (8002858 <lcd_init+0x70>)
 80027fe:	f002 f847 	bl	8004890 <puts>
	delay_ms(10);
 8002802:	200a      	movs	r0, #10
 8002804:	f7ff ff56 	bl	80026b4 <delay_ms>
	lcd_Control_Write(0x32);
 8002808:	2032      	movs	r0, #50	; 0x32
 800280a:	f000 f85f 	bl	80028cc <lcd_Control_Write>
	delay_ms(50);
 800280e:	2032      	movs	r0, #50	; 0x32
 8002810:	f7ff ff50 	bl	80026b4 <delay_ms>
	/* Start to set LCD function */
	lcd_Control_Write(0x28);
 8002814:	2028      	movs	r0, #40	; 0x28
 8002816:	f000 f859 	bl	80028cc <lcd_Control_Write>
	delay_ms(50);
 800281a:	2032      	movs	r0, #50	; 0x32
 800281c:	f7ff ff4a 	bl	80026b4 <delay_ms>
	/* clear LCD */
	lcd_Control_Write(0x01);
 8002820:	2001      	movs	r0, #1
 8002822:	f000 f853 	bl	80028cc <lcd_Control_Write>
	delay_ms(50);
 8002826:	2032      	movs	r0, #50	; 0x32
 8002828:	f7ff ff44 	bl	80026b4 <delay_ms>
	/* wait 60ms */

	/* set entry mode */
	lcd_Control_Write(0x06);	delay_ms(50);;
 800282c:	2006      	movs	r0, #6
 800282e:	f000 f84d 	bl	80028cc <lcd_Control_Write>
 8002832:	2032      	movs	r0, #50	; 0x32
 8002834:	f7ff ff3e 	bl	80026b4 <delay_ms>
	/* set display to on */
	lcd_Control_Write(0x0C);	delay_ms(50);;
 8002838:	200c      	movs	r0, #12
 800283a:	f000 f847 	bl	80028cc <lcd_Control_Write>
 800283e:	2032      	movs	r0, #50	; 0x32
 8002840:	f7ff ff38 	bl	80026b4 <delay_ms>
	/* move cursor to home and set data address to 0 */
	lcd_Control_Write(0x02);	delay_ms(50);
 8002844:	2002      	movs	r0, #2
 8002846:	f000 f841 	bl	80028cc <lcd_Control_Write>
 800284a:	2032      	movs	r0, #50	; 0x32
 800284c:	f7ff ff32 	bl	80026b4 <delay_ms>
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	08007d68 	.word	0x08007d68
 8002858:	08007d6c 	.word	0x08007d6c

0800285c <lcd_Data_Write>:
/*
 ******************************************************************************
 */
// du lieu in ra vd chuoi
void lcd_Data_Write(char data)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4],i=0;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
	data_u = data&0xf0;
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f023 030f 	bic.w	r3, r3, #15
 8002870:	73bb      	strb	r3, [r7, #14]
	data_l = (data<<4)&0xf0;
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	737b      	strb	r3, [r7, #13]
	data_t[0] = data_u|0x0d;  //en=1, rs=0
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	f043 030d 	orr.w	r3, r3, #13
 800287e:	b2db      	uxtb	r3, r3
 8002880:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002882:	7bbb      	ldrb	r3, [r7, #14]
 8002884:	f043 0309 	orr.w	r3, r3, #9
 8002888:	b2db      	uxtb	r3, r3
 800288a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0d;  //en=1, rs=0
 800288c:	7b7b      	ldrb	r3, [r7, #13]
 800288e:	f043 030d 	orr.w	r3, r3, #13
 8002892:	b2db      	uxtb	r3, r3
 8002894:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002896:	7b7b      	ldrb	r3, [r7, #13]
 8002898:	f043 0309 	orr.w	r3, r3, #9
 800289c:	b2db      	uxtb	r3, r3
 800289e:	72fb      	strb	r3, [r7, #11]
	for(i = 0;i<4;i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e00a      	b.n	80028bc <lcd_Data_Write+0x60>
	{
	     lcd_Write_byte(data_t[i]);
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3310      	adds	r3, #16
 80028aa:	443b      	add	r3, r7
 80028ac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff1f 	bl	80026f4 <lcd_Write_byte>
	for(i = 0;i<4;i++)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	3301      	adds	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d9f1      	bls.n	80028a6 <lcd_Data_Write+0x4a>
	}
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <lcd_Control_Write>:
/*
 ******************************************************************************
 */
// lenh thuc hien
void lcd_Control_Write(char data)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4],i=0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
	data_u = data&0xf0;
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f023 030f 	bic.w	r3, r3, #15
 80028e0:	73bb      	strb	r3, [r7, #14]
	data_l = (data<<4)&0xf0;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	737b      	strb	r3, [r7, #13]
	data_t[0] = data_u|0x04;  //en=1, rs=0
 80028e8:	7bbb      	ldrb	r3, [r7, #14]
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u;  //en=0, rs=0
 80028f2:	7bbb      	ldrb	r3, [r7, #14]
 80028f4:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x04;  //en=1, rs=0
 80028f6:	7b7b      	ldrb	r3, [r7, #13]
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002900:	7b7b      	ldrb	r3, [r7, #13]
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	b2db      	uxtb	r3, r3
 8002908:	72fb      	strb	r3, [r7, #11]
	for(i = 0;i<4;i++)
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e00a      	b.n	8002926 <lcd_Control_Write+0x5a>
	{
	     lcd_Write_byte(data_t[i]);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	3310      	adds	r3, #16
 8002914:	443b      	add	r3, r7
 8002916:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff feea 	bl	80026f4 <lcd_Write_byte>
	for(i = 0;i<4;i++)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	3301      	adds	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d9f1      	bls.n	8002910 <lcd_Control_Write+0x44>
	}

}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <lcd_send_string>:

/*
 ******************************************************************************
 */
void lcd_send_string (char *str)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_Data_Write (*str++);
 800293e:	e006      	b.n	800294e <lcd_send_string+0x18>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff87 	bl	800285c <lcd_Data_Write>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f4      	bne.n	8002940 <lcd_send_string+0xa>
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <Delete_LCD>:

/*
 ******************************************************************************
 */
void Delete_LCD(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	lcd_Control_Write(0x01);
 8002964:	2001      	movs	r0, #1
 8002966:	f7ff ffb1 	bl	80028cc <lcd_Control_Write>
	delay_ms(10);
 800296a:	200a      	movs	r0, #10
 800296c:	f7ff fea2 	bl	80026b4 <delay_ms>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <Newline_LCD>:

/*
 ******************************************************************************
 */
void Newline_LCD(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	lcd_Control_Write(0xc0);
 8002978:	20c0      	movs	r0, #192	; 0xc0
 800297a:	f7ff ffa7 	bl	80028cc <lcd_Control_Write>
	delay_ms(10);
 800297e:	200a      	movs	r0, #10
 8002980:	f7ff fe98 	bl	80026b4 <delay_ms>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <KEY4x4_Push>:
  {'#','9','6','3'},
  {'0','8','5','2'},
  {'*','7','4','1'}
};

uint8_t KEY4x4_Push(void){
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	if((GPIO_ReadInputDataBit(GPIO_COLUMN,col1)==0)||(GPIO_ReadInputDataBit(GPIO_COLUMN,col2)==0)||(GPIO_ReadInputDataBit(GPIO_COLUMN,col3)==0)||(GPIO_ReadInputDataBit(GPIO_COLUMN,col4)==0))
 800298c:	2110      	movs	r1, #16
 800298e:	4810      	ldr	r0, [pc, #64]	; (80029d0 <KEY4x4_Push+0x48>)
 8002990:	f7fe fac4 	bl	8000f1c <GPIO_ReadInputDataBit>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d014      	beq.n	80029c4 <KEY4x4_Push+0x3c>
 800299a:	2120      	movs	r1, #32
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <KEY4x4_Push+0x48>)
 800299e:	f7fe fabd 	bl	8000f1c <GPIO_ReadInputDataBit>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <KEY4x4_Push+0x3c>
 80029a8:	2140      	movs	r1, #64	; 0x40
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <KEY4x4_Push+0x48>)
 80029ac:	f7fe fab6 	bl	8000f1c <GPIO_ReadInputDataBit>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <KEY4x4_Push+0x3c>
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <KEY4x4_Push+0x48>)
 80029ba:	f7fe faaf 	bl	8000f1c <GPIO_ReadInputDataBit>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <KEY4x4_Push+0x40>
	{
		return 1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <KEY4x4_Push+0x42>
	}
	else return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40010800 	.word	0x40010800

080029d4 <ConfigKeypad>:

void ConfigKeypad(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gp;
	RCC_APB2PeriphClockCmd(ROW_Clock,ENABLE);
 80029da:	2101      	movs	r1, #1
 80029dc:	2008      	movs	r0, #8
 80029de:	f7fe fd73 	bl	80014c8 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(COLUMN_Clock,ENABLE);
 80029e2:	2101      	movs	r1, #1
 80029e4:	2004      	movs	r0, #4
 80029e6:	f7fe fd6f 	bl	80014c8 <RCC_APB2PeriphClockCmd>

	// output
	gp.GPIO_Mode = GPIO_Mode_Out_PP;
 80029ea:	2310      	movs	r3, #16
 80029ec:	71fb      	strb	r3, [r7, #7]
	gp.GPIO_Pin = row1|row2|row3|row4;
 80029ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80029f2:	80bb      	strh	r3, [r7, #4]
	gp.GPIO_Speed = GPIO_Speed_50MHz;
 80029f4:	2303      	movs	r3, #3
 80029f6:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIO_ROW,&gp);
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4808      	ldr	r0, [pc, #32]	; (8002a20 <ConfigKeypad+0x4c>)
 80029fe:	f7fe f9d1 	bl	8000da4 <GPIO_Init>

	// input
	gp.GPIO_Pin = col1|col2|col3|col4;
 8002a02:	23f0      	movs	r3, #240	; 0xf0
 8002a04:	80bb      	strh	r3, [r7, #4]
	gp.GPIO_Mode = GPIO_Mode_IPU;
 8002a06:	2348      	movs	r3, #72	; 0x48
 8002a08:	71fb      	strb	r3, [r7, #7]
	gp.GPIO_Speed = GPIO_Speed_50MHz;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIO_COLUMN,&gp);
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4804      	ldr	r0, [pc, #16]	; (8002a24 <ConfigKeypad+0x50>)
 8002a14:	f7fe f9c6 	bl	8000da4 <GPIO_Init>

//	GPIO_Init(GPIOB,&gp);
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	40010800 	.word	0x40010800

08002a28 <KEY4x4_CheckCol>:

void KEY4x4_CheckCol(uint8_t col)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
	GPIO_SetBits(GPIO_ROW,row1);
 8002a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a36:	481c      	ldr	r0, [pc, #112]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a38:	f7fe fa89 	bl	8000f4e <GPIO_SetBits>
	GPIO_SetBits(GPIO_ROW,row2);
 8002a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a40:	4819      	ldr	r0, [pc, #100]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a42:	f7fe fa84 	bl	8000f4e <GPIO_SetBits>
	GPIO_SetBits(GPIO_ROW,row3);
 8002a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a4a:	4817      	ldr	r0, [pc, #92]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a4c:	f7fe fa7f 	bl	8000f4e <GPIO_SetBits>
	GPIO_SetBits(GPIO_ROW,row4);
 8002a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a54:	4814      	ldr	r0, [pc, #80]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a56:	f7fe fa7a 	bl	8000f4e <GPIO_SetBits>
	if(col==0){
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <KEY4x4_CheckCol+0x44>
		GPIO_ResetBits(GPIO_ROW,row1);
 8002a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a64:	4810      	ldr	r0, [pc, #64]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a66:	f7fe fa80 	bl	8000f6a <GPIO_ResetBits>
		GPIO_ResetBits(GPIO_ROW,row3);
	}
	else if(col == 3){
		GPIO_ResetBits(GPIO_ROW,row4);
	}
}
 8002a6a:	e019      	b.n	8002aa0 <KEY4x4_CheckCol+0x78>
	else if(col==1){
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d105      	bne.n	8002a7e <KEY4x4_CheckCol+0x56>
		GPIO_ResetBits(GPIO_ROW,row2);
 8002a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a76:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a78:	f7fe fa77 	bl	8000f6a <GPIO_ResetBits>
}
 8002a7c:	e010      	b.n	8002aa0 <KEY4x4_CheckCol+0x78>
	else if(col==2){
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d105      	bne.n	8002a90 <KEY4x4_CheckCol+0x68>
		GPIO_ResetBits(GPIO_ROW,row3);
 8002a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a88:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a8a:	f7fe fa6e 	bl	8000f6a <GPIO_ResetBits>
}
 8002a8e:	e007      	b.n	8002aa0 <KEY4x4_CheckCol+0x78>
	else if(col == 3){
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d104      	bne.n	8002aa0 <KEY4x4_CheckCol+0x78>
		GPIO_ResetBits(GPIO_ROW,row4);
 8002a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9a:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <KEY4x4_CheckCol+0x80>)
 8002a9c:	f7fe fa65 	bl	8000f6a <GPIO_ResetBits>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010c00 	.word	0x40010c00

08002aac <KEY4x4_GetKey>:

uint8_t KEY4x4_GetKey(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
	uint8_t i;
	GPIO_ResetBits(GPIO_ROW,row1);
 8002ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab6:	4830      	ldr	r0, [pc, #192]	; (8002b78 <KEY4x4_GetKey+0xcc>)
 8002ab8:	f7fe fa57 	bl	8000f6a <GPIO_ResetBits>
	GPIO_ResetBits(GPIO_ROW,row2);
 8002abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ac0:	482d      	ldr	r0, [pc, #180]	; (8002b78 <KEY4x4_GetKey+0xcc>)
 8002ac2:	f7fe fa52 	bl	8000f6a <GPIO_ResetBits>
	GPIO_ResetBits(GPIO_ROW,row3);
 8002ac6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002aca:	482b      	ldr	r0, [pc, #172]	; (8002b78 <KEY4x4_GetKey+0xcc>)
 8002acc:	f7fe fa4d 	bl	8000f6a <GPIO_ResetBits>
	GPIO_ResetBits(GPIO_ROW,row4);
 8002ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ad4:	4828      	ldr	r0, [pc, #160]	; (8002b78 <KEY4x4_GetKey+0xcc>)
 8002ad6:	f7fe fa48 	bl	8000f6a <GPIO_ResetBits>

	if(KEY4x4_Push()==1)
 8002ada:	f7ff ff55 	bl	8002988 <KEY4x4_Push>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d143      	bne.n	8002b6c <KEY4x4_GetKey+0xc0>
	{
		delay_ms(10);
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f7ff fde5 	bl	80026b4 <delay_ms>
		if(KEY4x4_Push()==1)
 8002aea:	f7ff ff4d 	bl	8002988 <KEY4x4_Push>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d13b      	bne.n	8002b6c <KEY4x4_GetKey+0xc0>
		{
			for(i = 0 ;i<4;i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	e035      	b.n	8002b66 <KEY4x4_GetKey+0xba>
			{
				KEY4x4_CheckCol(i);
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff93 	bl	8002a28 <KEY4x4_CheckCol>
				if(GPIO_ReadInputDataBit(GPIO_COLUMN,col1)==0)
 8002b02:	2110      	movs	r1, #16
 8002b04:	481d      	ldr	r0, [pc, #116]	; (8002b7c <KEY4x4_GetKey+0xd0>)
 8002b06:	f7fe fa09 	bl	8000f1c <GPIO_ReadInputDataBit>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d103      	bne.n	8002b18 <KEY4x4_GetKey+0x6c>
				{
					return KEY4x4[0][i];
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <KEY4x4_GetKey+0xd4>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	e02a      	b.n	8002b6e <KEY4x4_GetKey+0xc2>
				}
				else if(GPIO_ReadInputDataBit(GPIO_COLUMN,col2)==0)
 8002b18:	2120      	movs	r1, #32
 8002b1a:	4818      	ldr	r0, [pc, #96]	; (8002b7c <KEY4x4_GetKey+0xd0>)
 8002b1c:	f7fe f9fe 	bl	8000f1c <GPIO_ReadInputDataBit>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <KEY4x4_GetKey+0x84>
				{
					return KEY4x4[1][i];
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <KEY4x4_GetKey+0xd4>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	791b      	ldrb	r3, [r3, #4]
 8002b2e:	e01e      	b.n	8002b6e <KEY4x4_GetKey+0xc2>
				}
				else if(GPIO_ReadInputDataBit(GPIO_COLUMN,col3)==0)
 8002b30:	2140      	movs	r1, #64	; 0x40
 8002b32:	4812      	ldr	r0, [pc, #72]	; (8002b7c <KEY4x4_GetKey+0xd0>)
 8002b34:	f7fe f9f2 	bl	8000f1c <GPIO_ReadInputDataBit>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d104      	bne.n	8002b48 <KEY4x4_GetKey+0x9c>
				{
					return KEY4x4[2][i];
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <KEY4x4_GetKey+0xd4>)
 8002b42:	4413      	add	r3, r2
 8002b44:	7a1b      	ldrb	r3, [r3, #8]
 8002b46:	e012      	b.n	8002b6e <KEY4x4_GetKey+0xc2>
				}
				else if(GPIO_ReadInputDataBit(GPIO_COLUMN,col4)==0)
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	480c      	ldr	r0, [pc, #48]	; (8002b7c <KEY4x4_GetKey+0xd0>)
 8002b4c:	f7fe f9e6 	bl	8000f1c <GPIO_ReadInputDataBit>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d104      	bne.n	8002b60 <KEY4x4_GetKey+0xb4>
				{
					return KEY4x4[3][i];
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <KEY4x4_GetKey+0xd4>)
 8002b5a:	4413      	add	r3, r2
 8002b5c:	7b1b      	ldrb	r3, [r3, #12]
 8002b5e:	e006      	b.n	8002b6e <KEY4x4_GetKey+0xc2>
			for(i = 0 ;i<4;i++)
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	3301      	adds	r3, #1
 8002b64:	71fb      	strb	r3, [r7, #7]
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d9c6      	bls.n	8002afa <KEY4x4_GetKey+0x4e>
				}
			}
		}
	}
	return 0;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40010c00 	.word	0x40010c00
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	2000001c 	.word	0x2000001c

08002b84 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0b      	bge.n	8002bb0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <NVIC_SetPriority+0x4c>)
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	3b04      	subs	r3, #4
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002bae:	e009      	b.n	8002bc4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <NVIC_SetPriority+0x50>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be6:	d301      	bcc.n	8002bec <SysTick_Config+0x14>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e011      	b.n	8002c10 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <SysTick_Config+0x40>)
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8002bf8:	210f      	movs	r1, #15
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfe:	f7ff ffc1 	bl	8002b84 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <SysTick_Config+0x40>)
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <_write>:
static void USART3_Init(void);



int _write(int file, char *ptr, int len)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < len; i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e013      	b.n	8002c56 <_write+0x3a>
		USART_SendData(USART2, *(ptr + i));
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	4413      	add	r3, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480b      	ldr	r0, [pc, #44]	; (8002c68 <_write+0x4c>)
 8002c3c:	f7fe fda0 	bl	8001780 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET) {}
 8002c40:	bf00      	nop
 8002c42:	2140      	movs	r1, #64	; 0x40
 8002c44:	4808      	ldr	r0, [pc, #32]	; (8002c68 <_write+0x4c>)
 8002c46:	f7fe fdbb 	bl	80017c0 <USART_GetFlagStatus>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f8      	beq.n	8002c42 <_write+0x26>
	for(uint32_t i = 0; i < len; i++){
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3301      	adds	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d3e7      	bcc.n	8002c2e <_write+0x12>
	}
	return len;
 8002c5e:	687b      	ldr	r3, [r7, #4]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40004400 	.word	0x40004400

08002c6c <UART2_SendByte>:
}



void UART2_SendByte(char c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART2, c);
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4807      	ldr	r0, [pc, #28]	; (8002c9c <UART2_SendByte+0x30>)
 8002c7e:	f7fe fd7f 	bl	8001780 <USART_SendData>
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET) {}
 8002c82:	bf00      	nop
 8002c84:	2140      	movs	r1, #64	; 0x40
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <UART2_SendByte+0x30>)
 8002c88:	f7fe fd9a 	bl	80017c0 <USART_GetFlagStatus>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f8      	beq.n	8002c84 <UART2_SendByte+0x18>
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40004400 	.word	0x40004400

08002ca0 <main>:




int main(void)
{
 8002ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8002ca8:	af0e      	add	r7, sp, #56	; 0x38
	/******************************************************************************/
	/*                     Initialization  and setup peripheral                  */
	/******************************************************************************/
	CommonInit();// Khai bao
 8002caa:	f000 fa69 	bl	8003180 <CommonInit>
	testledc13();// Test led vdk PC13
 8002cae:	f000 fa83 	bl	80031b8 <testledc13>

	printf("\rInit  LCD 11111111!\n");
 8002cb2:	4883      	ldr	r0, [pc, #524]	; (8002ec0 <main+0x220>)
 8002cb4:	f001 fdec 	bl	8004890 <puts>
	lcd_init ();                                 // ham khoi dong LCD16x
 8002cb8:	f7ff fd96 	bl	80027e8 <lcd_init>
	Delete_LCD();
 8002cbc:	f7ff fe50 	bl	8002960 <Delete_LCD>
	lcd_send_string ("Final project!!\0");
 8002cc0:	4880      	ldr	r0, [pc, #512]	; (8002ec4 <main+0x224>)
 8002cc2:	f7ff fe38 	bl	8002936 <lcd_send_string>
	Newline_LCD();
 8002cc6:	f7ff fe55 	bl	8002974 <Newline_LCD>
	lcd_send_string ("Init done!!!");
 8002cca:	487f      	ldr	r0, [pc, #508]	; (8002ec8 <main+0x228>)
 8002ccc:	f7ff fe33 	bl	8002936 <lcd_send_string>

	/******************************************************************************/
	/*                     Setup the string enter from Keypad                     */
	/******************************************************************************/
	char namePosition[16] = {'\0'};				// Chuoi in ra LCD
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002cd6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
	uint8_t posNamePos = 0;						// Vi tri ki tu trong chuoi
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	char key = 0;								// Ki tu duoc nhap tu keypad
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e

		/******************************************************************************/
		/*                    	 Enter the ID Device fromKeypad                       */
		/******************************************************************************/

		key = KEY4x4_GetKey();
 8002cee:	f7ff fedd 	bl	8002aac <KEY4x4_GetKey>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
		delay_ms(150);
 8002cf8:	2096      	movs	r0, #150	; 0x96
 8002cfa:	f7ff fcdb 	bl	80026b4 <delay_ms>
		if( key != 0)
 8002cfe:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8098 	beq.w	8002e38 <main+0x198>
		{
			/******************************************************************************/
			/*                    	 		Press * to begin                       		  */
			/******************************************************************************/
			if( key == '*' && flagKeypad == 0)//The first '*' keypad is pressed
 8002d08:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d0e:	d115      	bne.n	8002d3c <main+0x9c>
 8002d10:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <main+0x22c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d111      	bne.n	8002d3c <main+0x9c>
			{
				flagKeypad = 1;
 8002d18:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <main+0x22c>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
				posNamePos = 0;	//Clear lcd
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
				flagGPS = 0;
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <main+0x230>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

				Delete_LCD();
 8002d2a:	f7ff fe19 	bl	8002960 <Delete_LCD>
				lcd_send_string("Wait for keypad!");
 8002d2e:	4869      	ldr	r0, [pc, #420]	; (8002ed4 <main+0x234>)
 8002d30:	f7ff fe01 	bl	8002936 <lcd_send_string>
				printf("Wait for keypad...");
 8002d34:	4868      	ldr	r0, [pc, #416]	; (8002ed8 <main+0x238>)
 8002d36:	f001 fd25 	bl	8004784 <iprintf>
 8002d3a:	e07d      	b.n	8002e38 <main+0x198>
			}

			/******************************************************************************/
			/*                    	 		Press * to begin                       		  */
			/******************************************************************************/
			else if( key != '*' && flagKeypad == 0)//The first '*' keypad is pressed
 8002d3c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002d40:	2b2a      	cmp	r3, #42	; 0x2a
 8002d42:	d018      	beq.n	8002d76 <main+0xd6>
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <main+0x22c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d114      	bne.n	8002d76 <main+0xd6>
			{
				flagKeypad = 0;
 8002d4c:	4b5f      	ldr	r3, [pc, #380]	; (8002ecc <main+0x22c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
				posNamePos = 0;	//Clear lcd
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
				flagGPS = 0;
 8002d58:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <main+0x230>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
				posNamePos = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

				Delete_LCD();
 8002d64:	f7ff fdfc 	bl	8002960 <Delete_LCD>
				lcd_send_string("Press * to begin!");
 8002d68:	485c      	ldr	r0, [pc, #368]	; (8002edc <main+0x23c>)
 8002d6a:	f7ff fde4 	bl	8002936 <lcd_send_string>
				printf("Press * to begin...");
 8002d6e:	485c      	ldr	r0, [pc, #368]	; (8002ee0 <main+0x240>)
 8002d70:	f001 fd08 	bl	8004784 <iprintf>
 8002d74:	e060      	b.n	8002e38 <main+0x198>
			}

			else
			{
				if( key == '*')
 8002d76:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d7c:	d121      	bne.n	8002dc2 <main+0x122>
				{
					if( posNamePos >= sizeof(namePosition))
 8002d7e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d919      	bls.n	8002dba <main+0x11a>
					{
						printf("Save and exit!\n");
 8002d86:	4857      	ldr	r0, [pc, #348]	; (8002ee4 <main+0x244>)
 8002d88:	f001 fd82 	bl	8004890 <puts>
						printf("excute %s", namePosition);
 8002d8c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002d90:	4619      	mov	r1, r3
 8002d92:	4855      	ldr	r0, [pc, #340]	; (8002ee8 <main+0x248>)
 8002d94:	f001 fcf6 	bl	8004784 <iprintf>
						namePosition[posNamePos] = '\0';
 8002d98:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002d9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002da0:	f107 0218 	add.w	r2, r7, #24
 8002da4:	4413      	add	r3, r2
 8002da6:	2200      	movs	r2, #0
 8002da8:	f803 2c14 	strb.w	r2, [r3, #-20]
						flagGPS = 1;
 8002dac:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <main+0x230>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
						flagKeypad = 0;
 8002db2:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <main+0x22c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e028      	b.n	8002e0c <main+0x16c>
					}
					else
					{
						printf("Error and clear!\n");
 8002dba:	484c      	ldr	r0, [pc, #304]	; (8002eec <main+0x24c>)
 8002dbc:	f001 fd68 	bl	8004890 <puts>
 8002dc0:	e024      	b.n	8002e0c <main+0x16c>
					}
				}
				else if( key == '#')
 8002dc2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002dc6:	2b23      	cmp	r3, #35	; 0x23
 8002dc8:	d10c      	bne.n	8002de4 <main+0x144>
				{
					printf("Delele key!\n");
 8002dca:	4849      	ldr	r0, [pc, #292]	; (8002ef0 <main+0x250>)
 8002dcc:	f001 fd60 	bl	8004890 <puts>
					if( posNamePos != 0 ) posNamePos --;
 8002dd0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d019      	beq.n	8002e0c <main+0x16c>
 8002dd8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 8002de2:	e013      	b.n	8002e0c <main+0x16c>
				}
				else
				{
					namePosition[posNamePos] = key;
 8002de4:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002de8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dec:	f107 0218 	add.w	r2, r7, #24
 8002df0:	4413      	add	r3, r2
 8002df2:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 8002df6:	f803 2c14 	strb.w	r2, [r3, #-20]
					if( posNamePos < sizeof(namePosition) ) posNamePos ++;
 8002dfa:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	d804      	bhi.n	8002e0c <main+0x16c>
 8002e02:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002e06:	3301      	adds	r3, #1
 8002e08:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
				}
				namePosition[posNamePos] = '\0';	//Set last string
 8002e0c:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8002e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e14:	f107 0218 	add.w	r2, r7, #24
 8002e18:	4413      	add	r3, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f803 2c14 	strb.w	r2, [r3, #-20]
				Delete_LCD();
 8002e20:	f7ff fd9e 	bl	8002960 <Delete_LCD>
				lcd_send_string(namePosition);
 8002e24:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fd84 	bl	8002936 <lcd_send_string>
				printf("%s\n",namePosition);
 8002e2e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 fd2c 	bl	8004890 <puts>

		/******************************************************************************/
		/*                    			Handle the GPS module                         */
		/******************************************************************************/

		if( flagGPS == 1 )
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <main+0x230>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	f47f af56 	bne.w	8002cee <main+0x4e>
		{
			/******************************************************************************/
			/*                    			Wait for GGA and RMC                          */
			/******************************************************************************/
			if (Wait_for("GGA\0", USART1) == 1)
 8002e42:	492c      	ldr	r1, [pc, #176]	; (8002ef4 <main+0x254>)
 8002e44:	482c      	ldr	r0, [pc, #176]	; (8002ef8 <main+0x258>)
 8002e46:	f000 fe65 	bl	8003b14 <Wait_for>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d119      	bne.n	8002e84 <main+0x1e4>
			{
				printf("GGA found\n");
 8002e50:	482a      	ldr	r0, [pc, #168]	; (8002efc <main+0x25c>)
 8002e52:	f001 fd1d 	bl	8004890 <puts>
				VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8002e56:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <main+0x260>)
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	601a      	str	r2, [r3, #0]

				Copy_upto("*", GGA, USART1);
 8002e5e:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <main+0x254>)
 8002e60:	4928      	ldr	r1, [pc, #160]	; (8002f04 <main+0x264>)
 8002e62:	4829      	ldr	r0, [pc, #164]	; (8002f08 <main+0x268>)
 8002e64:	f000 fda0 	bl	80039a8 <Copy_upto>
				if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8002e68:	4928      	ldr	r1, [pc, #160]	; (8002f0c <main+0x26c>)
 8002e6a:	4826      	ldr	r0, [pc, #152]	; (8002f04 <main+0x264>)
 8002e6c:	f7fe fe3e 	bl	8001aec <decodeGGA>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <main+0x1de>
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <main+0x270>)
 8002e78:	2202      	movs	r2, #2
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e002      	b.n	8002e84 <main+0x1e4>
				else flagGGA = 1;  // 1 indicates the data is invalid
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <main+0x270>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
			}

			if (Wait_for("RMC\0", USART1) == 1)
 8002e84:	491b      	ldr	r1, [pc, #108]	; (8002ef4 <main+0x254>)
 8002e86:	4823      	ldr	r0, [pc, #140]	; (8002f14 <main+0x274>)
 8002e88:	f000 fe44 	bl	8003b14 <Wait_for>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d14d      	bne.n	8002f2e <main+0x28e>
			{
				printf("RMC found\n");
 8002e92:	4821      	ldr	r0, [pc, #132]	; (8002f18 <main+0x278>)
 8002e94:	f001 fcfc 	bl	8004890 <puts>
				VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <main+0x260>)
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	601a      	str	r2, [r3, #0]

				Copy_upto("*", RMC, USART1);
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <main+0x254>)
 8002ea2:	491e      	ldr	r1, [pc, #120]	; (8002f1c <main+0x27c>)
 8002ea4:	4818      	ldr	r0, [pc, #96]	; (8002f08 <main+0x268>)
 8002ea6:	f000 fd7f 	bl	80039a8 <Copy_upto>
				if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8002eaa:	491d      	ldr	r1, [pc, #116]	; (8002f20 <main+0x280>)
 8002eac:	481b      	ldr	r0, [pc, #108]	; (8002f1c <main+0x27c>)
 8002eae:	f7ff f9c9 	bl	8002244 <decodeRMC>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d137      	bne.n	8002f28 <main+0x288>
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <main+0x284>)
 8002eba:	2202      	movs	r2, #2
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e036      	b.n	8002f2e <main+0x28e>
 8002ec0:	08007d8c 	.word	0x08007d8c
 8002ec4:	08007da4 	.word	0x08007da4
 8002ec8:	08007db8 	.word	0x08007db8
 8002ecc:	200003a4 	.word	0x200003a4
 8002ed0:	200003a8 	.word	0x200003a8
 8002ed4:	08007dc8 	.word	0x08007dc8
 8002ed8:	08007ddc 	.word	0x08007ddc
 8002edc:	08007df0 	.word	0x08007df0
 8002ee0:	08007e04 	.word	0x08007e04
 8002ee4:	08007e18 	.word	0x08007e18
 8002ee8:	08007e28 	.word	0x08007e28
 8002eec:	08007e34 	.word	0x08007e34
 8002ef0:	08007e48 	.word	0x08007e48
 8002ef4:	40013800 	.word	0x40013800
 8002ef8:	08007e54 	.word	0x08007e54
 8002efc:	08007e5c 	.word	0x08007e5c
 8002f00:	20000050 	.word	0x20000050
 8002f04:	2000025c 	.word	0x2000025c
 8002f08:	08007e68 	.word	0x08007e68
 8002f0c:	20000324 	.word	0x20000324
 8002f10:	20000368 	.word	0x20000368
 8002f14:	08007e6c 	.word	0x08007e6c
 8002f18:	08007e74 	.word	0x08007e74
 8002f1c:	200002c0 	.word	0x200002c0
 8002f20:	20000350 	.word	0x20000350
 8002f24:	2000036c 	.word	0x2000036c
				else flagRMC = 1;  // 1 indicates the data is invalid
 8002f28:	4b81      	ldr	r3, [pc, #516]	; (8003130 <main+0x490>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

			/******************************************************************************/
			/*                    	    GGA and RMC ready to decode                       */
			/******************************************************************************/

			if ((flagGGA == 2) | (flagRMC == 2))
 8002f2e:	4b81      	ldr	r3, [pc, #516]	; (8003134 <main+0x494>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	4b7c      	ldr	r3, [pc, #496]	; (8003130 <main+0x490>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80a9 	beq.w	80030a6 <main+0x406>
			{
				Delete_LCD();
 8002f54:	f7ff fd04 	bl	8002960 <Delete_LCD>
				sprintf (lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
 8002f58:	4b77      	ldr	r3, [pc, #476]	; (8003138 <main+0x498>)
 8002f5a:	691c      	ldr	r4, [r3, #16]
 8002f5c:	4b76      	ldr	r3, [pc, #472]	; (8003138 <main+0x498>)
 8002f5e:	695d      	ldr	r5, [r3, #20]
 8002f60:	4b75      	ldr	r3, [pc, #468]	; (8003138 <main+0x498>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a74      	ldr	r2, [pc, #464]	; (8003138 <main+0x498>)
 8002f66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f68:	4973      	ldr	r1, [pc, #460]	; (8003138 <main+0x498>)
 8002f6a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002f6c:	4872      	ldr	r0, [pc, #456]	; (8003138 <main+0x498>)
 8002f6e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002f70:	9003      	str	r0, [sp, #12]
 8002f72:	9102      	str	r1, [sp, #8]
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	462b      	mov	r3, r5
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	496f      	ldr	r1, [pc, #444]	; (800313c <main+0x49c>)
 8002f7e:	4870      	ldr	r0, [pc, #448]	; (8003140 <main+0x4a0>)
 8002f80:	f001 fc8e 	bl	80048a0 <siprintf>
					  gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day, \
					  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
				lcd_send_string(lcdBuffer);
 8002f84:	486e      	ldr	r0, [pc, #440]	; (8003140 <main+0x4a0>)
 8002f86:	f7ff fcd6 	bl	8002936 <lcd_send_string>
				memset(lcdBuffer, '\0', 50);
 8002f8a:	2232      	movs	r2, #50	; 0x32
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	486c      	ldr	r0, [pc, #432]	; (8003140 <main+0x4a0>)
 8002f90:	f000 ff90 	bl	8003eb4 <memset>
				Newline_LCD();
 8002f94:	f7ff fcee 	bl	8002974 <Newline_LCD>
				sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002f98:	4b67      	ldr	r3, [pc, #412]	; (8003138 <main+0x498>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fa53 	bl	8000448 <__aeabi_f2d>
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	460d      	mov	r5, r1
 8002fa6:	4b64      	ldr	r3, [pc, #400]	; (8003138 <main+0x498>)
 8002fa8:	791b      	ldrb	r3, [r3, #4]
 8002faa:	461e      	mov	r6, r3
					  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8002fac:	4b62      	ldr	r3, [pc, #392]	; (8003138 <main+0x498>)
 8002fae:	689b      	ldr	r3, [r3, #8]
				sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fa49 	bl	8000448 <__aeabi_f2d>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
					  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8002fba:	495f      	ldr	r1, [pc, #380]	; (8003138 <main+0x498>)
 8002fbc:	7b09      	ldrb	r1, [r1, #12]
				sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002fbe:	9104      	str	r1, [sp, #16]
 8002fc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fc4:	9600      	str	r6, [sp, #0]
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	462b      	mov	r3, r5
 8002fca:	495e      	ldr	r1, [pc, #376]	; (8003144 <main+0x4a4>)
 8002fcc:	485c      	ldr	r0, [pc, #368]	; (8003140 <main+0x4a0>)
 8002fce:	f001 fc67 	bl	80048a0 <siprintf>
				lcd_send_string(lcdBuffer);
 8002fd2:	485b      	ldr	r0, [pc, #364]	; (8003140 <main+0x4a0>)
 8002fd4:	f7ff fcaf 	bl	8002936 <lcd_send_string>
//				,"iddevice2",gpsData.rmcstruct.date.Yr,gpsData.rmcstruct.date.Mon,gpsData.rmcstruct.date.Day
//				,gpsData.ggastruct.tim.hour ,gpsData.ggastruct.tim.min ,gpsData.ggastruct.tim.sec
//				,gpsData.ggastruct.lcation.latitude,gpsData.ggastruct.lcation.longitude
//				,gpsData.ggastruct.lcation.latitude,gpsData.ggastruct.lcation.longitude);

				sprintf(json,"{\"iddevice\": \"%s\",\"date\" :{\"ngaythangnam\" : \"%d/%d/%d\",\"giophutgiay\" : \"%d:%d:%d\"},\"coordinatesDevice\" : {\"latitude\" : \"%.18f\",\"longtitude\" : \"%.18f\"},\"coordinatesGateway\" : {\"latitude\" : \"%.18f\",\"longtitude\" : \"%.18f\"},\"distance\" :123,\"diachi\":\"\",\"bando\" : \"\",\"state\" : 1}"
 8002fd8:	4b57      	ldr	r3, [pc, #348]	; (8003138 <main+0x498>)
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	4b56      	ldr	r3, [pc, #344]	; (8003138 <main+0x498>)
 8002fe0:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002fe2:	4b55      	ldr	r3, [pc, #340]	; (8003138 <main+0x498>)
 8002fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe6:	613a      	str	r2, [r7, #16]
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <main+0x498>)
 8002fea:	6919      	ldr	r1, [r3, #16]
 8002fec:	60f9      	str	r1, [r7, #12]
 8002fee:	4b52      	ldr	r3, [pc, #328]	; (8003138 <main+0x498>)
 8002ff0:	6958      	ldr	r0, [r3, #20]
 8002ff2:	60b8      	str	r0, [r7, #8]
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <main+0x498>)
 8002ff6:	699c      	ldr	r4, [r3, #24]
 8002ff8:	607c      	str	r4, [r7, #4]
								,namePosition,gpsData.rmcstruct.date.Yr,gpsData.rmcstruct.date.Mon,gpsData.rmcstruct.date.Day
								,gpsData.ggastruct.tim.hour ,gpsData.ggastruct.tim.min ,gpsData.ggastruct.tim.sec
								,gpsData.ggastruct.lcation.latitude,gpsData.ggastruct.lcation.longitude
 8002ffa:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <main+0x498>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
				sprintf(json,"{\"iddevice\": \"%s\",\"date\" :{\"ngaythangnam\" : \"%d/%d/%d\",\"giophutgiay\" : \"%d:%d:%d\"},\"coordinatesDevice\" : {\"latitude\" : \"%.18f\",\"longtitude\" : \"%.18f\"},\"coordinatesGateway\" : {\"latitude\" : \"%.18f\",\"longtitude\" : \"%.18f\"},\"distance\" :123,\"diachi\":\"\",\"bando\" : \"\",\"state\" : 1}"
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fa22 	bl	8000448 <__aeabi_f2d>
 8003004:	4680      	mov	r8, r0
 8003006:	4689      	mov	r9, r1
								,gpsData.ggastruct.lcation.latitude,gpsData.ggastruct.lcation.longitude
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <main+0x498>)
 800300a:	689b      	ldr	r3, [r3, #8]
				sprintf(json,"{\"iddevice\": \"%s\",\"date\" :{\"ngaythangnam\" : \"%d/%d/%d\",\"giophutgiay\" : \"%d:%d:%d\"},\"coordinatesDevice\" : {\"latitude\" : \"%.18f\",\"longtitude\" : \"%.18f\"},\"coordinatesGateway\" : {\"latitude\" : \"%.18f\",\"longtitude\" : \"%.18f\"},\"distance\" :123,\"diachi\":\"\",\"bando\" : \"\",\"state\" : 1}"
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fa1b 	bl	8000448 <__aeabi_f2d>
 8003012:	4682      	mov	sl, r0
 8003014:	468b      	mov	fp, r1
 8003016:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <main+0x4a8>)
 8003018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800301c:	4b4b      	ldr	r3, [pc, #300]	; (800314c <main+0x4ac>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f507 7503 	add.w	r5, r7, #524	; 0x20c
 8003026:	f107 0418 	add.w	r4, r7, #24
 800302a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800302e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003032:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003036:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800303a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800303e:	f8cd c010 	str.w	ip, [sp, #16]
 8003042:	68b8      	ldr	r0, [r7, #8]
 8003044:	9003      	str	r0, [sp, #12]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	9102      	str	r1, [sp, #8]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	9201      	str	r2, [sp, #4]
 800304e:	9600      	str	r6, [sp, #0]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	462a      	mov	r2, r5
 8003054:	493e      	ldr	r1, [pc, #248]	; (8003150 <main+0x4b0>)
 8003056:	4620      	mov	r0, r4
 8003058:	f001 fc22 	bl	80048a0 <siprintf>
								,latitudeGateway ,longitudeGateway);

//				uint32_t countESP = 0;
				while (countESP <= 5)
 800305c:	e01c      	b.n	8003098 <main+0x3f8>
				{
					ESP_Init(SSID, SSPASS, ipServer, port,json, flagESP);
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <main+0x4b4>)
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <main+0x4b8>)
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <main+0x4bc>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <main+0x4c0>)
 800306c:	681c      	ldr	r4, [r3, #0]
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <main+0x4c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	f107 0318 	add.w	r3, r7, #24
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	4623      	mov	r3, r4
 800307c:	f7fe fc98 	bl	80019b0 <ESP_Init>
					delay_ms(1000);
 8003080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003084:	f7ff fb16 	bl	80026b4 <delay_ms>
					countESP++;
 8003088:	4b37      	ldr	r3, [pc, #220]	; (8003168 <main+0x4c8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	4a36      	ldr	r2, [pc, #216]	; (8003168 <main+0x4c8>)
 8003090:	6013      	str	r3, [r2, #0]
					flagESP = 1;
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <main+0x4c4>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]
				while (countESP <= 5)
 8003098:	4b33      	ldr	r3, [pc, #204]	; (8003168 <main+0x4c8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d9de      	bls.n	800305e <main+0x3be>
				}
				break;
 80030a0:	bf00      	nop
 80030a2:	2300      	movs	r3, #0
 80030a4:	e03d      	b.n	8003122 <main+0x482>

			/******************************************************************************/
			/*                    	    GGA and RMC not fix yet                           */
			/******************************************************************************/

			else if ((flagGGA == 1) | (flagRMC == 1))
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <main+0x494>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <main+0x490>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <main+0x446>
			{
				// Instead of clearing the display, it's better if we print spaces.
				// This will avoid the "refreshing" part

//				printf("in ra %s", iddevice);
				Delete_LCD();
 80030ca:	f7ff fc49 	bl	8002960 <Delete_LCD>
				lcd_send_string("   NO FIX YET   ");
 80030ce:	4827      	ldr	r0, [pc, #156]	; (800316c <main+0x4cc>)
 80030d0:	f7ff fc31 	bl	8002936 <lcd_send_string>
				Newline_LCD();
 80030d4:	f7ff fc4e 	bl	8002974 <Newline_LCD>
				lcd_send_string("   Please wait  ");
 80030d8:	4825      	ldr	r0, [pc, #148]	; (8003170 <main+0x4d0>)
 80030da:	f7ff fc2c 	bl	8002936 <lcd_send_string>
				delay_ms(2000);
 80030de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030e2:	f7ff fae7 	bl	80026b4 <delay_ms>

			/******************************************************************************/
			/*                    	    VCC for GPS module isn't supply                   */
			/******************************************************************************/

			if (VCCTimeout <= 0)
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <main+0x4d4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f73f adff 	bgt.w	8002cee <main+0x4e>
			{
				VCCTimeout = 5000;  // Reset the timeout
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <main+0x4d4>)
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	601a      	str	r2, [r3, #0]

				//reset flags
				flagGGA =flagRMC =0;
 80030f8:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <main+0x490>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <main+0x490>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <main+0x494>)
 8003104:	6013      	str	r3, [r2, #0]

				// You are here means the VCC is less, or maybe there is some connection issue
				// Check the VCC, also you can try connecting to the external 5V
				Delete_LCD();
 8003106:	f7ff fc2b 	bl	8002960 <Delete_LCD>
				lcd_send_string("    VCC Issue   ");
 800310a:	481b      	ldr	r0, [pc, #108]	; (8003178 <main+0x4d8>)
 800310c:	f7ff fc13 	bl	8002936 <lcd_send_string>
				Newline_LCD();
 8003110:	f7ff fc30 	bl	8002974 <Newline_LCD>
				lcd_send_string("Check Connection");
 8003114:	4819      	ldr	r0, [pc, #100]	; (800317c <main+0x4dc>)
 8003116:	f7ff fc0e 	bl	8002936 <lcd_send_string>
				printf("    VCC Issue   \n");
 800311a:	4817      	ldr	r0, [pc, #92]	; (8003178 <main+0x4d8>)
 800311c:	f001 fbb8 	bl	8004890 <puts>
		key = KEY4x4_GetKey();
 8003120:	e5e5      	b.n	8002cee <main+0x4e>
			}
		}
	}
}
 8003122:	4618      	mov	r0, r3
 8003124:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	2000036c 	.word	0x2000036c
 8003134:	20000368 	.word	0x20000368
 8003138:	20000324 	.word	0x20000324
 800313c:	08007e80 	.word	0x08007e80
 8003140:	20000370 	.word	0x20000370
 8003144:	08007ea0 	.word	0x08007ea0
 8003148:	20000030 	.word	0x20000030
 800314c:	20000038 	.word	0x20000038
 8003150:	08007eb4 	.word	0x08007eb4
 8003154:	20000044 	.word	0x20000044
 8003158:	20000048 	.word	0x20000048
 800315c:	20000040 	.word	0x20000040
 8003160:	2000004c 	.word	0x2000004c
 8003164:	200003ac 	.word	0x200003ac
 8003168:	200003b0 	.word	0x200003b0
 800316c:	08007fc8 	.word	0x08007fc8
 8003170:	08007fdc 	.word	0x08007fdc
 8003174:	20000050 	.word	0x20000050
 8003178:	08007ff0 	.word	0x08007ff0
 800317c:	08008004 	.word	0x08008004

08003180 <CommonInit>:


void CommonInit()
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	/* Initialization USART1 */
	USART1_Init();
 8003184:	f000 f832 	bl	80031ec <USART1_Init>

	/* Initialization USART2 */
	USART2_Init();
 8003188:	f000 f8a2 	bl	80032d0 <USART2_Init>

	/* Initialization USART3 */
	USART3_Init();
 800318c:	f000 f920 	bl	80033d0 <USART3_Init>

	/* Initialization RingBuffer for USART2 and USART3 */
	Ringbuf_init();
 8003190:	f000 fa80 	bl	8003694 <Ringbuf_init>

	/* Initialization Keypad */
	ConfigKeypad();
 8003194:	f7ff fc1e 	bl	80029d4 <ConfigKeypad>

	/* Initialization  SystemCoreClock */
	SysTick_Config(SystemCoreClock/1000);
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <CommonInit+0x30>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <CommonInit+0x34>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fd17 	bl	8002bd8 <SysTick_Config>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <testledc13>:


void testledc13()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInit;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80031be:	2101      	movs	r1, #1
 80031c0:	2010      	movs	r0, #16
 80031c2:	f7fe f981 	bl	80014c8 <RCC_APB2PeriphClockCmd>
	gpioInit.GPIO_Mode = GPIO_Mode_Out_PP;
 80031c6:	2310      	movs	r3, #16
 80031c8:	71fb      	strb	r3, [r7, #7]
	gpioInit.GPIO_Pin = GPIO_Pin_13;
 80031ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031ce:	80bb      	strh	r3, [r7, #4]
	gpioInit.GPIO_Speed = GPIO_Speed_50MHz;
 80031d0:	2303      	movs	r3, #3
 80031d2:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(GPIOC, &gpioInit);
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	4619      	mov	r1, r3
 80031d8:	4803      	ldr	r0, [pc, #12]	; (80031e8 <testledc13+0x30>)
 80031da:	f7fd fde3 	bl	8000da4 <GPIO_Init>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40011000 	.word	0x40011000

080031ec <USART1_Init>:
	TIM_Cmd(TIM2, ENABLE);
}


static void USART1_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0

	/******************************************************************************/
	/* 							 Cap clock cho USART1                             */
	/******************************************************************************/

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80031f2:	2101      	movs	r1, #1
 80031f4:	2004      	movs	r0, #4
 80031f6:	f7fe f967 	bl	80014c8 <RCC_APB2PeriphClockCmd>

	/******************************************************************************/
	/* 					           Cau hinh chan Tx              	              */
	/******************************************************************************/

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80031fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fe:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003200:	2318      	movs	r3, #24
 8003202:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003204:	2303      	movs	r3, #3
 8003206:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4823      	ldr	r0, [pc, #140]	; (800329c <USART1_Init+0xb0>)
 8003210:	f7fd fdc8 	bl	8000da4 <GPIO_Init>

	/******************************************************************************/
	/* 					           Cau hinh chan Rx              	              */
	/******************************************************************************/

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003218:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800321a:	2304      	movs	r3, #4
 800321c:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	4619      	mov	r1, r3
 8003224:	481d      	ldr	r0, [pc, #116]	; (800329c <USART1_Init+0xb0>)
 8003226:	f7fd fdbd 	bl	8000da4 <GPIO_Init>

	/******************************************************************************/
	/* 			     Initializes GPIO As Alternate function mode             	  */
	/******************************************************************************/

	GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
 800322a:	2101      	movs	r1, #1
 800322c:	2004      	movs	r0, #4
 800322e:	f7fd feab 	bl	8000f88 <GPIO_PinRemapConfig>

	/******************************************************************************/
	/* 			    		 Initializes USART1 Clock	                          */
	/******************************************************************************/

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8003232:	2101      	movs	r1, #1
 8003234:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003238:	f7fe f946 	bl	80014c8 <RCC_APB2PeriphClockCmd>

	/******************************************************************************/
	/* 			    		 Initializes USART1 parameter	                      */
	/******************************************************************************/

	USART_InitStructure.USART_BaudRate = 9600;
 800323c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003240:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003242:	2300      	movs	r3, #0
 8003244:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003246:	2300      	movs	r3, #0
 8003248:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800324a:	2300      	movs	r3, #0
 800324c:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800324e:	230c      	movs	r3, #12
 8003250:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003252:	2300      	movs	r3, #0
 8003254:	823b      	strh	r3, [r7, #16]
	USART_Init(USART1, &USART_InitStructure);
 8003256:	1d3b      	adds	r3, r7, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4811      	ldr	r0, [pc, #68]	; (80032a0 <USART1_Init+0xb4>)
 800325c:	f7fe f970 	bl	8001540 <USART_Init>

	/******************************************************************************/
	/* 			    		 		NVIC configuration	                          */
	/******************************************************************************/

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8003260:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003264:	f7fd fd2a 	bl	8000cbc <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8003268:	2325      	movs	r3, #37	; 0x25
 800326a:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003274:	2301      	movs	r3, #1
 8003276:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8003278:	463b      	mov	r3, r7
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fd30 	bl	8000ce0 <NVIC_Init>

	/* xoa co ngat nhan cho lan dau su dung*/
	USART_ClearFlag(USART1, USART_IT_RXNE);
 8003280:	f240 5125 	movw	r1, #1317	; 0x525
 8003284:	4806      	ldr	r0, [pc, #24]	; (80032a0 <USART1_Init+0xb4>)
 8003286:	f7fe fab6 	bl	80017f6 <USART_ClearFlag>

	/******************************************************************************/
	/* 					              Kich hoat USART1                            */
	/******************************************************************************/

	USART_Cmd(USART1, ENABLE);
 800328a:	2101      	movs	r1, #1
 800328c:	4804      	ldr	r0, [pc, #16]	; (80032a0 <USART1_Init+0xb4>)
 800328e:	f7fe fa11 	bl	80016b4 <USART_Cmd>
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40010800 	.word	0x40010800
 80032a0:	40013800 	.word	0x40013800

080032a4 <USART1_IRQHandler>:



void USART1_IRQHandler (void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET)
 80032a8:	f240 5125 	movw	r1, #1317	; 0x525
 80032ac:	4807      	ldr	r0, [pc, #28]	; (80032cc <USART1_IRQHandler+0x28>)
 80032ae:	f7fe fab2 	bl	8001816 <USART_GetITStatus>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d102      	bne.n	80032be <USART1_IRQHandler+0x1a>
	{
		Uart_isr(USART1);
 80032b8:	4804      	ldr	r0, [pc, #16]	; (80032cc <USART1_IRQHandler+0x28>)
 80032ba:	f000 fd0b 	bl	8003cd4 <Uart_isr>
	}
	USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 80032be:	f240 5125 	movw	r1, #1317	; 0x525
 80032c2:	4802      	ldr	r0, [pc, #8]	; (80032cc <USART1_IRQHandler+0x28>)
 80032c4:	f7fe fb01 	bl	80018ca <USART_ClearITPendingBit>
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40013800 	.word	0x40013800

080032d0 <USART2_Init>:


static void USART2_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0

	/******************************************************************************/
	/* 							 Cap clock cho USART1                             */
	/******************************************************************************/

	RCC_APB2PeriphClockCmd(USART2_GPIO_Clock, ENABLE);
 80032d6:	2101      	movs	r1, #1
 80032d8:	2004      	movs	r0, #4
 80032da:	f7fe f8f5 	bl	80014c8 <RCC_APB2PeriphClockCmd>

	/******************************************************************************/
	/* 					           Cau hinh chan Tx              	              */
	/******************************************************************************/

	GPIO_InitStructure.GPIO_Pin = USART2_Tx;
 80032de:	2304      	movs	r3, #4
 80032e0:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80032e2:	2318      	movs	r3, #24
 80032e4:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80032e6:	2303      	movs	r3, #3
 80032e8:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(USART2_GPIO_Port, &GPIO_InitStructure);
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	4825      	ldr	r0, [pc, #148]	; (8003388 <USART2_Init+0xb8>)
 80032f2:	f7fd fd57 	bl	8000da4 <GPIO_Init>

	/******************************************************************************/
	/* 					           Cau hinh chan Rx              	              */
	/******************************************************************************/

	GPIO_InitStructure.GPIO_Pin = USART2_Rx;
 80032f6:	2308      	movs	r3, #8
 80032f8:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80032fa:	2304      	movs	r3, #4
 80032fc:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(USART2_GPIO_Port, &GPIO_InitStructure);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4820      	ldr	r0, [pc, #128]	; (8003388 <USART2_Init+0xb8>)
 8003306:	f7fd fd4d 	bl	8000da4 <GPIO_Init>
	//Initializes GPIO As Alternate function mode
	GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
 800330a:	2101      	movs	r1, #1
 800330c:	2008      	movs	r0, #8
 800330e:	f7fd fe3b 	bl	8000f88 <GPIO_PinRemapConfig>

	/******************************************************************************/
	/* 			    		 Initializes USART2 Clock	                          */
	/******************************************************************************/

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8003312:	2101      	movs	r1, #1
 8003314:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003318:	f7fe f8f4 	bl	8001504 <RCC_APB1PeriphClockCmd>

	/******************************************************************************/
	/* 			    		 Initializes USART2 parameter	                      */
	/******************************************************************************/

	USART_InitStructure.USART_BaudRate = 56000;
 800331c:	f64d 23c0 	movw	r3, #56000	; 0xdac0
 8003320:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003322:	2300      	movs	r3, #0
 8003324:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003326:	2300      	movs	r3, #0
 8003328:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800332a:	2300      	movs	r3, #0
 800332c:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800332e:	230c      	movs	r3, #12
 8003330:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003332:	2300      	movs	r3, #0
 8003334:	823b      	strh	r3, [r7, #16]
	USART_Init(USART2, &USART_InitStructure);
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4814      	ldr	r0, [pc, #80]	; (800338c <USART2_Init+0xbc>)
 800333c:	f7fe f900 	bl	8001540 <USART_Init>

	/******************************************************************************/
	/* 			    		 		NVIC configuration	                          */
	/******************************************************************************/

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8003340:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003344:	f7fd fcba 	bl	8000cbc <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8003348:	2326      	movs	r3, #38	; 0x26
 800334a:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003354:	2301      	movs	r3, #1
 8003356:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8003358:	463b      	mov	r3, r7
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fcc0 	bl	8000ce0 <NVIC_Init>

	/* xoa co ngat nhan cho lan dau su dung*/
	USART_ClearFlag(USART2, USART_IT_RXNE);
 8003360:	f240 5125 	movw	r1, #1317	; 0x525
 8003364:	4809      	ldr	r0, [pc, #36]	; (800338c <USART2_Init+0xbc>)
 8003366:	f7fe fa46 	bl	80017f6 <USART_ClearFlag>

	/* Cau hinh cho phep ngat nhan*/
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800336a:	2201      	movs	r2, #1
 800336c:	f240 5125 	movw	r1, #1317	; 0x525
 8003370:	4806      	ldr	r0, [pc, #24]	; (800338c <USART2_Init+0xbc>)
 8003372:	f7fe f9be 	bl	80016f2 <USART_ITConfig>

	/******************************************************************************/
	/* 					              Kich hoat USART2                            */
	/******************************************************************************/

	USART_Cmd(USART2, ENABLE);
 8003376:	2101      	movs	r1, #1
 8003378:	4804      	ldr	r0, [pc, #16]	; (800338c <USART2_Init+0xbc>)
 800337a:	f7fe f99b 	bl	80016b4 <USART_Cmd>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40010800 	.word	0x40010800
 800338c:	40004400 	.word	0x40004400

08003390 <USART2_IRQHandler>:



void USART2_IRQHandler (void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
	if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET)
 8003396:	f240 5125 	movw	r1, #1317	; 0x525
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <USART2_IRQHandler+0x3c>)
 800339c:	f7fe fa3b 	bl	8001816 <USART_GetITStatus>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d108      	bne.n	80033b8 <USART2_IRQHandler+0x28>
	{
		uint8_t byReceiverData = USART_ReceiveData(USART2);
 80033a6:	4809      	ldr	r0, [pc, #36]	; (80033cc <USART2_IRQHandler+0x3c>)
 80033a8:	f7fe f9fb 	bl	80017a2 <USART_ReceiveData>
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
		UART2_SendByte(byReceiverData);
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fc5a 	bl	8002c6c <UART2_SendByte>
	}
	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80033b8:	f240 5125 	movw	r1, #1317	; 0x525
 80033bc:	4803      	ldr	r0, [pc, #12]	; (80033cc <USART2_IRQHandler+0x3c>)
 80033be:	f7fe fa84 	bl	80018ca <USART_ClearITPendingBit>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40004400 	.word	0x40004400

080033d0 <USART3_Init>:



static void USART3_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0

	/******************************************************************************/
	/* 							 Cap clock cho USART1                             */
	/******************************************************************************/

	RCC_APB2PeriphClockCmd(USART3_GPIO_Clock, ENABLE);
 80033d6:	2101      	movs	r1, #1
 80033d8:	2008      	movs	r0, #8
 80033da:	f7fe f875 	bl	80014c8 <RCC_APB2PeriphClockCmd>

	/******************************************************************************/
	/* 					           Cau hinh chan Tx              	              */
	/******************************************************************************/

	GPIO_InitStructure.GPIO_Pin = USART3_Tx;
 80033de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e2:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80033e4:	2318      	movs	r3, #24
 80033e6:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80033e8:	2303      	movs	r3, #3
 80033ea:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(USART3_GPIO_Port, &GPIO_InitStructure);
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	4619      	mov	r1, r3
 80033f2:	4826      	ldr	r0, [pc, #152]	; (800348c <USART3_Init+0xbc>)
 80033f4:	f7fd fcd6 	bl	8000da4 <GPIO_Init>

	/******************************************************************************/
	/* 					           Cau hinh chan Rx              	              */
	/******************************************************************************/

	GPIO_InitStructure.GPIO_Pin = USART3_Rx;
 80033f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033fc:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80033fe:	2304      	movs	r3, #4
 8003400:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(USART3_GPIO_Port, &GPIO_InitStructure);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4820      	ldr	r0, [pc, #128]	; (800348c <USART3_Init+0xbc>)
 800340a:	f7fd fccb 	bl	8000da4 <GPIO_Init>

	 //Initializes GPIO As Alternate function mode
	GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);
 800340e:	2101      	movs	r1, #1
 8003410:	481f      	ldr	r0, [pc, #124]	; (8003490 <USART3_Init+0xc0>)
 8003412:	f7fd fdb9 	bl	8000f88 <GPIO_PinRemapConfig>

	/******************************************************************************/
	/* 			    		 Initializes USART3 Clock	                          */
	/******************************************************************************/

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003416:	2101      	movs	r1, #1
 8003418:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800341c:	f7fe f872 	bl	8001504 <RCC_APB1PeriphClockCmd>

	USART_InitStructure.USART_BaudRate = 115200;
 8003420:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003424:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003426:	2300      	movs	r3, #0
 8003428:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800342a:	2300      	movs	r3, #0
 800342c:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800342e:	2300      	movs	r3, #0
 8003430:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8003432:	230c      	movs	r3, #12
 8003434:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003436:	2300      	movs	r3, #0
 8003438:	823b      	strh	r3, [r7, #16]
	USART_Init(USART3, &USART_InitStructure);
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4815      	ldr	r0, [pc, #84]	; (8003494 <USART3_Init+0xc4>)
 8003440:	f7fe f87e 	bl	8001540 <USART_Init>

	/******************************************************************************/
	/* 			    		 		NVIC configuration	                          */
	/******************************************************************************/

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8003444:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003448:	f7fd fc38 	bl	8000cbc <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800344c:	2327      	movs	r3, #39	; 0x27
 800344e:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003458:	2301      	movs	r3, #1
 800345a:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 800345c:	463b      	mov	r3, r7
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fc3e 	bl	8000ce0 <NVIC_Init>

	/* xoa co ngat nhan cho lan dau su dung*/
	USART_ClearFlag(USART3, USART_IT_RXNE);
 8003464:	f240 5125 	movw	r1, #1317	; 0x525
 8003468:	480a      	ldr	r0, [pc, #40]	; (8003494 <USART3_Init+0xc4>)
 800346a:	f7fe f9c4 	bl	80017f6 <USART_ClearFlag>

	/* Cau hinh cho phep ngat nhan*/
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 800346e:	2201      	movs	r2, #1
 8003470:	f240 5125 	movw	r1, #1317	; 0x525
 8003474:	4807      	ldr	r0, [pc, #28]	; (8003494 <USART3_Init+0xc4>)
 8003476:	f7fe f93c 	bl	80016f2 <USART_ITConfig>

	/******************************************************************************/
	/* 					              Kich hoat USART3                            */
	/******************************************************************************/

	USART_Cmd(USART3, ENABLE);
 800347a:	2101      	movs	r1, #1
 800347c:	4805      	ldr	r0, [pc, #20]	; (8003494 <USART3_Init+0xc4>)
 800347e:	f7fe f919 	bl	80016b4 <USART_Cmd>
}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40010c00 	.word	0x40010c00
 8003490:	00140030 	.word	0x00140030
 8003494:	40004800 	.word	0x40004800

08003498 <USART3_IRQHandler>:



void USART3_IRQHandler (void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	if (USART_GetITStatus(USART3, USART_IT_RXNE) == SET)
 800349c:	f240 5125 	movw	r1, #1317	; 0x525
 80034a0:	4807      	ldr	r0, [pc, #28]	; (80034c0 <USART3_IRQHandler+0x28>)
 80034a2:	f7fe f9b8 	bl	8001816 <USART_GetITStatus>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d102      	bne.n	80034b2 <USART3_IRQHandler+0x1a>
	{
		Uart_isr(USART3);
 80034ac:	4804      	ldr	r0, [pc, #16]	; (80034c0 <USART3_IRQHandler+0x28>)
 80034ae:	f000 fc11 	bl	8003cd4 <Uart_isr>
	}
	USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 80034b2:	f240 5125 	movw	r1, #1317	; 0x525
 80034b6:	4802      	ldr	r0, [pc, #8]	; (80034c0 <USART3_IRQHandler+0x28>)
 80034b8:	f7fe fa07 	bl	80018ca <USART_ClearITPendingBit>
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40004800 	.word	0x40004800

080034c4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <HardFault_Handler+0x4>

080034d6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80034da:	e7fe      	b.n	80034da <MemManage_Handler+0x4>

080034dc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <BusFault_Handler+0x4>

080034e2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <UsageFault_Handler+0x4>

080034e8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
	if(timeout >0)  timeout--;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <SysTick_Handler+0x38>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <SysTick_Handler+0x1c>
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <SysTick_Handler+0x38>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <SysTick_Handler+0x38>)
 8003526:	801a      	strh	r2, [r3, #0]
//	if(timeout3 >0)  timeout3--;

	if (VCCTimeout>0) VCCTimeout--;
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <SysTick_Handler+0x3c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	dd04      	ble.n	800353a <SysTick_Handler+0x2e>
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SysTick_Handler+0x3c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3b01      	subs	r3, #1
 8003536:	4a04      	ldr	r2, [pc, #16]	; (8003548 <SysTick_Handler+0x3c>)
 8003538:	6013      	str	r3, [r2, #0]
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	200003b8 	.word	0x200003b8
 8003548:	20000050 	.word	0x20000050

0800354c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
	return 1;
 8003550:	2301      	movs	r3, #1
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <_kill>:

int _kill(int pid, int sig)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003564:	f000 fc7c 	bl	8003e60 <__errno>
 8003568:	4603      	mov	r3, r0
 800356a:	2216      	movs	r2, #22
 800356c:	601a      	str	r2, [r3, #0]
	return -1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <_exit>:

void _exit (int status)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003582:	f04f 31ff 	mov.w	r1, #4294967295
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffe7 	bl	800355a <_kill>
	while (1) {}		/* Make sure we hang here */
 800358c:	e7fe      	b.n	800358c <_exit+0x12>

0800358e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e00a      	b.n	80035b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035a0:	f3af 8000 	nop.w
 80035a4:	4601      	mov	r1, r0
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	60ba      	str	r2, [r7, #8]
 80035ac:	b2ca      	uxtb	r2, r1
 80035ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dbf0      	blt.n	80035a0 <_read+0x12>
	}

return len;
 80035be:	687b      	ldr	r3, [r7, #4]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	return -1;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035ee:	605a      	str	r2, [r3, #4]
	return 0;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <_isatty>:

int _isatty(int file)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	return 1;
 8003604:	2301      	movs	r3, #1
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
	return 0;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <_sbrk+0x5c>)
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <_sbrk+0x60>)
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800363c:	4b13      	ldr	r3, [pc, #76]	; (800368c <_sbrk+0x64>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <_sbrk+0x64>)
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <_sbrk+0x68>)
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d207      	bcs.n	8003668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003658:	f000 fc02 	bl	8003e60 <__errno>
 800365c:	4603      	mov	r3, r0
 800365e:	220c      	movs	r2, #12
 8003660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	e009      	b.n	800367c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <_sbrk+0x64>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <_sbrk+0x64>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <_sbrk+0x64>)
 8003678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20005000 	.word	0x20005000
 8003688:	00000400 	.word	0x00000400
 800368c:	200003b4 	.word	0x200003b4
 8003690:	20000500 	.word	0x20000500

08003694 <Ringbuf_init>:
 * @brief  Ringbuf_init
 * @param  None
 * @retval None
 */
void Ringbuf_init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
	_rx_buffer = &rx_buffer;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <Ringbuf_init+0x4c>)
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <Ringbuf_init+0x50>)
 800369c:	601a      	str	r2, [r3, #0]
	_tx_buffer = &tx_buffer;
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <Ringbuf_init+0x54>)
 80036a0:	4a12      	ldr	r2, [pc, #72]	; (80036ec <Ringbuf_init+0x58>)
 80036a2:	601a      	str	r2, [r3, #0]

	_rx_buffer3 = &rx_buffer3;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <Ringbuf_init+0x5c>)
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <Ringbuf_init+0x60>)
 80036a8:	601a      	str	r2, [r3, #0]
	_tx_buffer3 = &tx_buffer3;
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <Ringbuf_init+0x64>)
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <Ringbuf_init+0x68>)
 80036ae:	601a      	str	r2, [r3, #0]

	/******************************************************************************/
	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	/******************************************************************************/

	USART_ITConfig(USART1, USART_IT_ERR, ENABLE);
 80036b0:	2201      	movs	r2, #1
 80036b2:	2160      	movs	r1, #96	; 0x60
 80036b4:	4812      	ldr	r0, [pc, #72]	; (8003700 <Ringbuf_init+0x6c>)
 80036b6:	f7fe f81c 	bl	80016f2 <USART_ITConfig>
	USART_ITConfig(USART3, USART_IT_ERR, ENABLE);
 80036ba:	2201      	movs	r2, #1
 80036bc:	2160      	movs	r1, #96	; 0x60
 80036be:	4811      	ldr	r0, [pc, #68]	; (8003704 <Ringbuf_init+0x70>)
 80036c0:	f7fe f817 	bl	80016f2 <USART_ITConfig>

	/******************************************************************************/
	/* 				Enable the UART Data Register not empty Interrupt		      */
	/******************************************************************************/

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80036c4:	2201      	movs	r2, #1
 80036c6:	f240 5125 	movw	r1, #1317	; 0x525
 80036ca:	480d      	ldr	r0, [pc, #52]	; (8003700 <Ringbuf_init+0x6c>)
 80036cc:	f7fe f811 	bl	80016f2 <USART_ITConfig>
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 80036d0:	2201      	movs	r2, #1
 80036d2:	f240 5125 	movw	r1, #1317	; 0x525
 80036d6:	480b      	ldr	r0, [pc, #44]	; (8003704 <Ringbuf_init+0x70>)
 80036d8:	f7fe f80b 	bl	80016f2 <USART_ITConfig>
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200004dc 	.word	0x200004dc
 80036e4:	200003bc 	.word	0x200003bc
 80036e8:	200004e0 	.word	0x200004e0
 80036ec:	20000404 	.word	0x20000404
 80036f0:	200004e4 	.word	0x200004e4
 80036f4:	2000044c 	.word	0x2000044c
 80036f8:	200004e8 	.word	0x200004e8
 80036fc:	20000494 	.word	0x20000494
 8003700:	40013800 	.word	0x40013800
 8003704:	40004800 	.word	0x40004800

08003708 <store_char>:
 * @brief  store_char
 * @param  c, *buffer
 * @retval None
 */
void store_char(unsigned char c, ring_buffer *buffer)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	3301      	adds	r3, #1
 800371a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371e:	60fb      	str	r3, [r7, #12]
	/*   just before the tail (meaning that the head would advance to the         */
	/*   current location of the tail), we're about to overflow the buffer        */
	/*   and so we don't write the character or advance the head.		          */
	/******************************************************************************/

	if(i != buffer->tail) {
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	429a      	cmp	r2, r3
 8003728:	d007      	beq.n	800373a <store_char+0x32>
	buffer->buffer[buffer->head] = c;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	79f9      	ldrb	r1, [r7, #7]
 8003732:	54d1      	strb	r1, [r2, r3]
	buffer->head = i;
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <Uart_read>:
 * @func   Reads the data in the rx_buffer and increment the tail count in rx_buffer
 * @brief  Uart_read
 * @param  *usart
 */
int Uart_read(USART_TypeDef *usart)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	if (usart == USART1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <Uart_read+0x9c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d11c      	bne.n	800378e <Uart_read+0x4a>
	{
		/******************************************************************************/
		/*     if the head isn't ahead of the tail, we don't have any characters      */
		/******************************************************************************/

		if(_rx_buffer->head == _rx_buffer->tail)
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <Uart_read+0xa0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800375a:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <Uart_read+0xa0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	429a      	cmp	r2, r3
 8003762:	d102      	bne.n	800376a <Uart_read+0x26>
		{
			return -1;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	e034      	b.n	80037d4 <Uart_read+0x90>
		}
		else
		{
			unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800376a:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <Uart_read+0xa0>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <Uart_read+0xa0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	73bb      	strb	r3, [r7, #14]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <Uart_read+0xa0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <Uart_read+0xa0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
			return c;
 800378a:	7bbb      	ldrb	r3, [r7, #14]
 800378c:	e022      	b.n	80037d4 <Uart_read+0x90>
		}
	}

	else if(usart == USART3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <Uart_read+0xa4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d11c      	bne.n	80037d0 <Uart_read+0x8c>
	{
		/******************************************************************************/
		/*     if the head isn't ahead of the tail, we don't have any characters      */
		/******************************************************************************/

		if(_rx_buffer3->head == _rx_buffer3->tail)
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <Uart_read+0xa8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <Uart_read+0xa8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d102      	bne.n	80037ac <Uart_read+0x68>
		{
			return -1;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	e013      	b.n	80037d4 <Uart_read+0x90>
		}
		else
		{
			unsigned char c = _rx_buffer3->buffer[_rx_buffer3->tail];
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <Uart_read+0xa8>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <Uart_read+0xa8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	5cd3      	ldrb	r3, [r2, r3]
 80037b8:	73fb      	strb	r3, [r7, #15]
			_rx_buffer3->tail = (unsigned int)(_rx_buffer3->tail + 1) % UART_BUFFER_SIZE;
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <Uart_read+0xa8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <Uart_read+0xa8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
			return c;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	e001      	b.n	80037d4 <Uart_read+0x90>
		}
	}

	else return -1;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40013800 	.word	0x40013800
 80037e4:	200004dc 	.word	0x200004dc
 80037e8:	40004800 	.word	0x40004800
 80037ec:	200004e4 	.word	0x200004e4

080037f0 <IsDataAvailable>:
 * @func   Checks if the data is available to read in the rx_buffe
 * @brief  IsDataAvailable
 * @param  usart
 */
int IsDataAvailable(USART_TypeDef  *usart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	if (usart == USART1)  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a16      	ldr	r2, [pc, #88]	; (8003854 <IsDataAvailable+0x64>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10e      	bne.n	800381e <IsDataAvailable+0x2e>
 8003800:	4b15      	ldr	r3, [pc, #84]	; (8003858 <IsDataAvailable+0x68>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	b29a      	uxth	r2, r3
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <IsDataAvailable+0x68>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	b29b      	uxth	r3, r3
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	b29b      	uxth	r3, r3
 8003814:	3340      	adds	r3, #64	; 0x40
 8003816:	b29b      	uxth	r3, r3
 8003818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381c:	e014      	b.n	8003848 <IsDataAvailable+0x58>
	else if (usart == USART3)  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer3->head - _rx_buffer3->tail) % UART_BUFFER_SIZE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a0e      	ldr	r2, [pc, #56]	; (800385c <IsDataAvailable+0x6c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10e      	bne.n	8003844 <IsDataAvailable+0x54>
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <IsDataAvailable+0x70>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	b29a      	uxth	r2, r3
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <IsDataAvailable+0x70>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	b29b      	uxth	r3, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	b29b      	uxth	r3, r3
 800383a:	3340      	adds	r3, #64	; 0x40
 800383c:	b29b      	uxth	r3, r3
 800383e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003842:	e001      	b.n	8003848 <IsDataAvailable+0x58>
	return -1;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40013800 	.word	0x40013800
 8003858:	200004dc 	.word	0x200004dc
 800385c:	40004800 	.word	0x40004800
 8003860:	200004e4 	.word	0x200004e4

08003864 <Uart_sendstring>:
 * @brief  Uart_sendstring
 * @param  *s, *usart
 * @retval None
 */
void Uart_sendstring (const char *s, USART_TypeDef  *usart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen(s);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fc fc7e 	bl	8000170 <strlen>
 8003874:	60b8      	str	r0, [r7, #8]
	for(uint32_t i = 0; i < len; i++)
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e013      	b.n	80038a4 <Uart_sendstring+0x40>
	{
		USART_SendData(USART3, *(s + i));
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	480b      	ldr	r0, [pc, #44]	; (80038b8 <Uart_sendstring+0x54>)
 800388a:	f7fd ff79 	bl	8001780 <USART_SendData>
		while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET) {}
 800388e:	bf00      	nop
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	4809      	ldr	r0, [pc, #36]	; (80038b8 <Uart_sendstring+0x54>)
 8003894:	f7fd ff94 	bl	80017c0 <USART_GetFlagStatus>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f8      	beq.n	8003890 <Uart_sendstring+0x2c>
	for(uint32_t i = 0; i < len; i++)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d3e7      	bcc.n	800387c <Uart_sendstring+0x18>
	}
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40004800 	.word	0x40004800

080038bc <Uart_flush>:
 * @brief  Uart_flush
 * @param  *usart
 * @retval None
 */
void Uart_flush (USART_TypeDef *usart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	if (usart == USART1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a14      	ldr	r2, [pc, #80]	; (8003918 <Uart_flush+0x5c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10e      	bne.n	80038ea <Uart_flush+0x2e>
	{
		memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <Uart_flush+0x60>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 faed 	bl	8003eb4 <memset>
		_rx_buffer->head = 0;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <Uart_flush+0x60>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
		_rx_buffer->tail = 0;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <Uart_flush+0x60>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2200      	movs	r2, #0
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
	}
	if (usart == USART3)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <Uart_flush+0x64>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10e      	bne.n	8003910 <Uart_flush+0x54>
	{
		memset(_rx_buffer3->buffer,'\0', UART_BUFFER_SIZE);
 80038f2:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <Uart_flush+0x68>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2240      	movs	r2, #64	; 0x40
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fada 	bl	8003eb4 <memset>
		_rx_buffer3->head = 0;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <Uart_flush+0x68>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
		_rx_buffer3->tail = 0;
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <Uart_flush+0x68>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
	}

}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40013800 	.word	0x40013800
 800391c:	200004dc 	.word	0x200004dc
 8003920:	40004800 	.word	0x40004800
 8003924:	200004e4 	.word	0x200004e4

08003928 <Uart_peek>:
 * @brief  Uart_peek
 * @param  *usart
 * @retval The position of rx buffer
 */
int Uart_peek(USART_TypeDef *usart)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	if (usart == USART1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a19      	ldr	r2, [pc, #100]	; (8003998 <Uart_peek+0x70>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <Uart_peek+0x34>
	{
		if(_rx_buffer->head == _rx_buffer->tail)
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <Uart_peek+0x74>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <Uart_peek+0x74>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	429a      	cmp	r2, r3
 8003946:	d102      	bne.n	800394e <Uart_peek+0x26>
		{
			return -1;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	e01e      	b.n	800398c <Uart_peek+0x64>
		}
		else
		{
			return _rx_buffer->buffer[_rx_buffer->tail];
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <Uart_peek+0x74>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <Uart_peek+0x74>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	e017      	b.n	800398c <Uart_peek+0x64>
		}
	}
	else if (usart == USART3)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <Uart_peek+0x78>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d111      	bne.n	8003988 <Uart_peek+0x60>
	{
		if(_rx_buffer3->head == _rx_buffer3->tail)
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <Uart_peek+0x7c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <Uart_peek+0x7c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	429a      	cmp	r2, r3
 8003972:	d102      	bne.n	800397a <Uart_peek+0x52>
		{
			return -1;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	e008      	b.n	800398c <Uart_peek+0x64>
		}
		else
		{
			return _rx_buffer3->buffer[_rx_buffer3->tail];
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <Uart_peek+0x7c>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <Uart_peek+0x7c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	5cd3      	ldrb	r3, [r2, r3]
 8003986:	e001      	b.n	800398c <Uart_peek+0x64>
		}
	}

	return -1;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40013800 	.word	0x40013800
 800399c:	200004dc 	.word	0x200004dc
 80039a0:	40004800 	.word	0x40004800
 80039a4:	200004e4 	.word	0x200004e4

080039a8 <Copy_upto>:
 * @brief  Copy_upto
 * @param  *usart
 * @retval  1 on success and -1 otherwise
 */
int Copy_upto (char *string, char *buffertocopyinto, USART_TypeDef *usart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
	int so_far =0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7fc fbd9 	bl	8000170 <strlen>
 80039be:	4603      	mov	r3, r0
 80039c0:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]

again:
	while ( !IsDataAvailable(usart) );
 80039c6:	bf00      	nop
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ff11 	bl	80037f0 <IsDataAvailable>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f9      	beq.n	80039c8 <Copy_upto+0x20>
	while (Uart_peek(usart) != string[so_far])
 80039d4:	e042      	b.n	8003a5c <Copy_upto+0xb4>
	{
		if (usart == USART1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a49      	ldr	r2, [pc, #292]	; (8003b00 <Copy_upto+0x158>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d11d      	bne.n	8003a1a <Copy_upto+0x72>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80039de:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <Copy_upto+0x15c>)
 80039e0:	6819      	ldr	r1, [r3, #0]
 80039e2:	4b48      	ldr	r3, [pc, #288]	; (8003b04 <Copy_upto+0x15c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	68b8      	ldr	r0, [r7, #8]
 80039ec:	4403      	add	r3, r0
 80039ee:	5c8a      	ldrb	r2, [r1, r2]
 80039f0:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80039f2:	4b44      	ldr	r3, [pc, #272]	; (8003b04 <Copy_upto+0x15c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <Copy_upto+0x15c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(USART1));
 8003a0a:	bf00      	nop
 8003a0c:	483c      	ldr	r0, [pc, #240]	; (8003b00 <Copy_upto+0x158>)
 8003a0e:	f7ff feef 	bl	80037f0 <IsDataAvailable>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f9      	beq.n	8003a0c <Copy_upto+0x64>
 8003a18:	e020      	b.n	8003a5c <Copy_upto+0xb4>
		}

		else if (usart == USART3)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <Copy_upto+0x160>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d11c      	bne.n	8003a5c <Copy_upto+0xb4>
		{
			buffertocopyinto[indx] = _rx_buffer3->buffer[_rx_buffer3->tail];
 8003a22:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <Copy_upto+0x164>)
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <Copy_upto+0x164>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	68b8      	ldr	r0, [r7, #8]
 8003a30:	4403      	add	r3, r0
 8003a32:	5c8a      	ldrb	r2, [r1, r2]
 8003a34:	701a      	strb	r2, [r3, #0]
			_rx_buffer3->tail = (unsigned int)(_rx_buffer3->tail + 1) % UART_BUFFER_SIZE;
 8003a36:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <Copy_upto+0x164>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <Copy_upto+0x164>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(USART3));
 8003a4e:	bf00      	nop
 8003a50:	482d      	ldr	r0, [pc, #180]	; (8003b08 <Copy_upto+0x160>)
 8003a52:	f7ff fecd 	bl	80037f0 <IsDataAvailable>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f9      	beq.n	8003a50 <Copy_upto+0xa8>
	while (Uart_peek(usart) != string[so_far])
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff63 	bl	8003928 <Uart_peek>
 8003a62:	4601      	mov	r1, r0
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	d1b2      	bne.n	80039d6 <Copy_upto+0x2e>
		}
	}
	while (Uart_peek(usart) == string [so_far])
 8003a70:	e029      	b.n	8003ac6 <Copy_upto+0x11e>
	{
		so_far++;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3301      	adds	r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(usart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe63 	bl	8003744 <Uart_read>
 8003a7e:	4601      	mov	r1, r0
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	61ba      	str	r2, [r7, #24]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	b2ca      	uxtb	r2, r1
 8003a8e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d101      	bne.n	8003a9c <Copy_upto+0xf4>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e02d      	b.n	8003af8 <Copy_upto+0x150>
		timeout = TIMEOUT_DEF;
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <Copy_upto+0x168>)
 8003a9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003aa2:	801a      	strh	r2, [r3, #0]
		while ( (!IsDataAvailable(usart) ) &&timeout );
 8003aa4:	bf00      	nop
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fea2 	bl	80037f0 <IsDataAvailable>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <Copy_upto+0x112>
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <Copy_upto+0x168>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f5      	bne.n	8003aa6 <Copy_upto+0xfe>
		if (timeout == 0) return 0;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <Copy_upto+0x168>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <Copy_upto+0x11e>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e018      	b.n	8003af8 <Copy_upto+0x150>
	while (Uart_peek(usart) == string [so_far])
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff ff2e 	bl	8003928 <Uart_peek>
 8003acc:	4601      	mov	r1, r0
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	d0cb      	beq.n	8003a72 <Copy_upto+0xca>
	}

	if (so_far != len)
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d002      	beq.n	8003ae8 <Copy_upto+0x140>
	{
		so_far = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
		goto again;
 8003ae6:	e76e      	b.n	80039c6 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d101      	bne.n	8003af4 <Copy_upto+0x14c>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e001      	b.n	8003af8 <Copy_upto+0x150>
	else return -1;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40013800 	.word	0x40013800
 8003b04:	200004dc 	.word	0x200004dc
 8003b08:	40004800 	.word	0x40004800
 8003b0c:	200004e4 	.word	0x200004e4
 8003b10:	200003b8 	.word	0x200003b8

08003b14 <Wait_for>:
 * @brief  Copy_upto
 * @param  *string, *usart
 * @retval 1 on success and -1 otherwise
 */
int Wait_for (char *string, USART_TypeDef *usart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fc fb24 	bl	8000170 <strlen>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8003b2c:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <Wait_for+0x1a8>)
 8003b2e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b32:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable(usart))&&timeout);  // let's wait for the data to show up
 8003b34:	bf00      	nop
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f7ff fe5a 	bl	80037f0 <IsDataAvailable>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <Wait_for+0x36>
 8003b42:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <Wait_for+0x1a8>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f5      	bne.n	8003b36 <Wait_for+0x22>
	if (timeout == 0) return 0;
 8003b4a:	4b5c      	ldr	r3, [pc, #368]	; (8003cbc <Wait_for+0x1a8>)
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d131      	bne.n	8003bb6 <Wait_for+0xa2>
 8003b52:	2300      	movs	r3, #0
 8003b54:	e0ae      	b.n	8003cb4 <Wait_for+0x1a0>
	while (Uart_peek(usart) != string[so_far])   // peek in the rx_buffer to see if we get the string
	{
		if (usart == USART1)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	4a59      	ldr	r2, [pc, #356]	; (8003cc0 <Wait_for+0x1ac>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d113      	bne.n	8003b86 <Wait_for+0x72>
		{
			if (_rx_buffer->tail != _rx_buffer->head)
 8003b5e:	4b59      	ldr	r3, [pc, #356]	; (8003cc4 <Wait_for+0x1b0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b64:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <Wait_for+0x1b0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d009      	beq.n	8003b82 <Wait_for+0x6e>
			{
				_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003b6e:	4b55      	ldr	r3, [pc, #340]	; (8003cc4 <Wait_for+0x1b0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <Wait_for+0x1b0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003b7e:	645a      	str	r2, [r3, #68]	; 0x44
 8003b80:	e019      	b.n	8003bb6 <Wait_for+0xa2>
			}

			else
			{
				return 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e096      	b.n	8003cb4 <Wait_for+0x1a0>
			}
		}
		else if (usart == USART3)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	4a4f      	ldr	r2, [pc, #316]	; (8003cc8 <Wait_for+0x1b4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d113      	bne.n	8003bb6 <Wait_for+0xa2>
		{
			if (_rx_buffer3->tail != _rx_buffer3->head)
 8003b8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <Wait_for+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b94:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <Wait_for+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d009      	beq.n	8003bb2 <Wait_for+0x9e>
			{
				_rx_buffer3->tail = (unsigned int)(_rx_buffer3->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003b9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <Wait_for+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <Wait_for+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44
 8003bb0:	e001      	b.n	8003bb6 <Wait_for+0xa2>
			}

			else
			{
				return 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e07e      	b.n	8003cb4 <Wait_for+0x1a0>
	while (Uart_peek(usart) != string[so_far])   // peek in the rx_buffer to see if we get the string
 8003bb6:	6838      	ldr	r0, [r7, #0]
 8003bb8:	f7ff feb6 	bl	8003928 <Uart_peek>
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	d1c5      	bne.n	8003b56 <Wait_for+0x42>
			}
		}
	}
	while (Uart_peek(usart) == string [so_far]) 	// if we got the first letter of the string
 8003bca:	e055      	b.n	8003c78 <Wait_for+0x164>
	{
		// now we will peek for the other letters too
		if (usart == USART1)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <Wait_for+0x1ac>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d126      	bne.n	8003c22 <Wait_for+0x10e>
		{
			so_far++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <Wait_for+0x1b0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <Wait_for+0x1b0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44
			if (so_far == len)
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d101      	bne.n	8003bf8 <Wait_for+0xe4>
			{
				return 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e05d      	b.n	8003cb4 <Wait_for+0x1a0>
			}
			timeout = TIMEOUT_DEF;
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <Wait_for+0x1a8>)
 8003bfa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bfe:	801a      	strh	r2, [r3, #0]
			while ((!IsDataAvailable(usart))&&timeout);
 8003c00:	bf00      	nop
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	f7ff fdf4 	bl	80037f0 <IsDataAvailable>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <Wait_for+0x102>
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <Wait_for+0x1a8>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f5      	bne.n	8003c02 <Wait_for+0xee>
			if (timeout == 0) return 0;
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <Wait_for+0x1a8>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d12c      	bne.n	8003c78 <Wait_for+0x164>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e048      	b.n	8003cb4 <Wait_for+0x1a0>
		}
		else if (usart == USART3)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <Wait_for+0x1b4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d126      	bne.n	8003c78 <Wait_for+0x164>
		{
			so_far++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
			_rx_buffer3->tail = (unsigned int)(_rx_buffer3->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003c30:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <Wait_for+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <Wait_for+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
			if (so_far == len)
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d101      	bne.n	8003c4e <Wait_for+0x13a>
			{
				return 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e032      	b.n	8003cb4 <Wait_for+0x1a0>
			}
			timeout = TIMEOUT_DEF;
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <Wait_for+0x1a8>)
 8003c50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c54:	801a      	strh	r2, [r3, #0]
			while ((!IsDataAvailable(usart))&&timeout);
 8003c56:	bf00      	nop
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	f7ff fdc9 	bl	80037f0 <IsDataAvailable>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <Wait_for+0x158>
 8003c64:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <Wait_for+0x1a8>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f5      	bne.n	8003c58 <Wait_for+0x144>
			if (timeout == 0) return 0;
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <Wait_for+0x1a8>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <Wait_for+0x164>
 8003c74:	2300      	movs	r3, #0
 8003c76:	e01d      	b.n	8003cb4 <Wait_for+0x1a0>
	while (Uart_peek(usart) == string [so_far]) 	// if we got the first letter of the string
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	f7ff fe55 	bl	8003928 <Uart_peek>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4299      	cmp	r1, r3
 8003c8a:	d09f      	beq.n	8003bcc <Wait_for+0xb8>
		}
	}

	if (so_far != len)
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d002      	beq.n	8003c9a <Wait_for+0x186>
	{
		so_far = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
		goto again;
 8003c98:	e748      	b.n	8003b2c <Wait_for+0x18>
	}

	if (so_far == len)
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d104      	bne.n	8003cac <Wait_for+0x198>
	{
		printf("Wait for complete!\n");
 8003ca2:	480b      	ldr	r0, [pc, #44]	; (8003cd0 <Wait_for+0x1bc>)
 8003ca4:	f000 fdf4 	bl	8004890 <puts>
		return 1;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e003      	b.n	8003cb4 <Wait_for+0x1a0>
	}
	else
	{
		printf("Wait for complete!\n");
 8003cac:	4808      	ldr	r0, [pc, #32]	; (8003cd0 <Wait_for+0x1bc>)
 8003cae:	f000 fdef 	bl	8004890 <puts>
		return 0;
 8003cb2:	2300      	movs	r3, #0
	}

}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200003b8 	.word	0x200003b8
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	200004dc 	.word	0x200004dc
 8003cc8:	40004800 	.word	0x40004800
 8003ccc:	200004e4 	.word	0x200004e4
 8003cd0:	08008018 	.word	0x08008018

08003cd4 <Uart_isr>:
 * @func   Interrupt function: The function will be processed in the isr handler function to control the peripheral device
 * @brief  Uart_isr
 * @param  *usart
 */
void Uart_isr (USART_TypeDef *husart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(husart->SR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(husart->CR1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	899b      	ldrh	r3, [r3, #12]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	613b      	str	r3, [r7, #16]

	/******************************************************************************/
	/*            if DR is not empty and the Rx Int is enabled                    */
	/******************************************************************************/

    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d022      	beq.n	8003d3c <Uart_isr+0x68>
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01d      	beq.n	8003d3c <Uart_isr+0x68>
    	/*  @note   TC flag can be also cleared by software sequence: a read operation to    */
    	/* 			USART_SR register followed by a write operation to USART_DR register.    */
    	/*  @note   TXE flag is cleared only by a write to the USART_DR register.		     */
		/*************************************************************************************/

    	husart->SR;									 /* Read status register */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	881b      	ldrh	r3, [r3, #0]
    	unsigned char c = husart->DR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	889b      	ldrh	r3, [r3, #4]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	73fb      	strb	r3, [r7, #15]

    	if (husart == USART1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a37      	ldr	r2, [pc, #220]	; (8003dec <Uart_isr+0x118>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d107      	bne.n	8003d24 <Uart_isr+0x50>
    	{
            store_char (c, _rx_buffer);  // store data in buffer
 8003d14:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <Uart_isr+0x11c>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fcf3 	bl	8003708 <store_char>
    	else if (husart == USART3)
    	{
            store_char (c, _rx_buffer3);  // store data in buffer
    	}

        return;
 8003d22:	e05c      	b.n	8003dde <Uart_isr+0x10a>
    	else if (husart == USART3)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <Uart_isr+0x120>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d158      	bne.n	8003dde <Uart_isr+0x10a>
            store_char (c, _rx_buffer3);  // store data in buffer
 8003d2c:	4b32      	ldr	r3, [pc, #200]	; (8003df8 <Uart_isr+0x124>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fce7 	bl	8003708 <store_char>
        return;
 8003d3a:	e050      	b.n	8003dde <Uart_isr+0x10a>

	/******************************************************************************/
	/*        If interrupt is caused due to Transmit Data Register Empty          */
	/******************************************************************************/

    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04e      	beq.n	8003de4 <Uart_isr+0x110>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d049      	beq.n	8003de4 <Uart_isr+0x110>
    {
    	if (husart == USART1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a26      	ldr	r2, [pc, #152]	; (8003dec <Uart_isr+0x118>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d11e      	bne.n	8003d96 <Uart_isr+0xc2>
    	{
    		if(tx_buffer.head == tx_buffer.tail)
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <Uart_isr+0x128>)
 8003d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <Uart_isr+0x128>)
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d106      	bne.n	8003d72 <Uart_isr+0x9e>
			{
			  // Buffer empty, so disable interrupts
				USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8003d64:	2200      	movs	r2, #0
 8003d66:	f240 7127 	movw	r1, #1831	; 0x727
 8003d6a:	4820      	ldr	r0, [pc, #128]	; (8003dec <Uart_isr+0x118>)
 8003d6c:	f7fd fcc1 	bl	80016f2 <USART_ITConfig>
 8003d70:	e011      	b.n	8003d96 <Uart_isr+0xc2>
			}

    		else
			{
				// There is more data in the output buffer. Send the next byte
				unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <Uart_isr+0x128>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <Uart_isr+0x128>)
 8003d78:	5cd3      	ldrb	r3, [r2, r3]
 8003d7a:	73bb      	strb	r3, [r7, #14]
				tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <Uart_isr+0x128>)
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	3301      	adds	r3, #1
 8003d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <Uart_isr+0x128>)
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
		    	/*  @note   TC flag can be also cleared by software sequence: a read operation to    */
		    	/* 			USART_SR register followed by a write operation to USART_DR register.    */
		    	/*  @note   TXE flag is cleared only by a write to the USART_DR register.		     */
				/*************************************************************************************/

				husart->SR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	881b      	ldrh	r3, [r3, #0]
				husart->DR = c;
 8003d8e:	7bbb      	ldrb	r3, [r7, #14]
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	809a      	strh	r2, [r3, #4]
			}
		}

    	if (husart == USART3)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <Uart_isr+0x120>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d121      	bne.n	8003de2 <Uart_isr+0x10e>
		{
			if(tx_buffer3.head == tx_buffer3.tail)
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <Uart_isr+0x12c>)
 8003da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da2:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <Uart_isr+0x12c>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d106      	bne.n	8003db8 <Uart_isr+0xe4>
			{
			  // Buffer empty, so disable interrupts
				USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
 8003daa:	2200      	movs	r2, #0
 8003dac:	f240 7127 	movw	r1, #1831	; 0x727
 8003db0:	4810      	ldr	r0, [pc, #64]	; (8003df4 <Uart_isr+0x120>)
 8003db2:	f7fd fc9e 	bl	80016f2 <USART_ITConfig>
				husart->SR;
				husart->DR = c;
			}
		}

    	return;
 8003db6:	e014      	b.n	8003de2 <Uart_isr+0x10e>
				unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <Uart_isr+0x12c>)
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <Uart_isr+0x12c>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	737b      	strb	r3, [r7, #13]
				tx_buffer3.tail = (tx_buffer3.tail + 1) % UART_BUFFER_SIZE;
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <Uart_isr+0x12c>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <Uart_isr+0x12c>)
 8003dce:	6453      	str	r3, [r2, #68]	; 0x44
				husart->SR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
				husart->DR = c;
 8003dd4:	7b7b      	ldrb	r3, [r7, #13]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	809a      	strh	r2, [r3, #4]
    	return;
 8003ddc:	e001      	b.n	8003de2 <Uart_isr+0x10e>
        return;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <Uart_isr+0x110>
    	return;
 8003de2:	bf00      	nop
    }
}
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40013800 	.word	0x40013800
 8003df0:	200004dc 	.word	0x200004dc
 8003df4:	40004800 	.word	0x40004800
 8003df8:	200004e4 	.word	0x200004e4
 8003dfc:	20000404 	.word	0x20000404
 8003e00:	20000494 	.word	0x20000494

08003e04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e04:	480d      	ldr	r0, [pc, #52]	; (8003e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e08:	f7fc fe9e 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e0c:	480c      	ldr	r0, [pc, #48]	; (8003e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e0e:	490d      	ldr	r1, [pc, #52]	; (8003e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e10:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <LoopForever+0xe>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e24:	4c0a      	ldr	r4, [pc, #40]	; (8003e50 <LoopForever+0x16>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e32:	f000 f81b 	bl	8003e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e36:	f7fe ff33 	bl	8002ca0 <main>

08003e3a <LoopForever>:

LoopForever:
    b LoopForever
 8003e3a:	e7fe      	b.n	8003e3a <LoopForever>
  ldr   r0, =_estack
 8003e3c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e44:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003e48:	08008448 	.word	0x08008448
  ldr r2, =_sbss
 8003e4c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8003e50:	200004fc 	.word	0x200004fc

08003e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e54:	e7fe      	b.n	8003e54 <ADC1_2_IRQHandler>

08003e56 <atoi>:
 8003e56:	220a      	movs	r2, #10
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f000 bdbd 	b.w	80049d8 <strtol>
	...

08003e60 <__errno>:
 8003e60:	4b01      	ldr	r3, [pc, #4]	; (8003e68 <__errno+0x8>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000054 	.word	0x20000054

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	2600      	movs	r6, #0
 8003e70:	4d0c      	ldr	r5, [pc, #48]	; (8003ea4 <__libc_init_array+0x38>)
 8003e72:	4c0d      	ldr	r4, [pc, #52]	; (8003ea8 <__libc_init_array+0x3c>)
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	42a6      	cmp	r6, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	f003 fef2 	bl	8007c64 <_init>
 8003e80:	2600      	movs	r6, #0
 8003e82:	4d0a      	ldr	r5, [pc, #40]	; (8003eac <__libc_init_array+0x40>)
 8003e84:	4c0a      	ldr	r4, [pc, #40]	; (8003eb0 <__libc_init_array+0x44>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	42a6      	cmp	r6, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e94:	4798      	blx	r3
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9e:	4798      	blx	r3
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	08008440 	.word	0x08008440
 8003ea8:	08008440 	.word	0x08008440
 8003eac:	08008440 	.word	0x08008440
 8003eb0:	08008444 	.word	0x08008444

08003eb4 <memset>:
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4402      	add	r2, r0
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d100      	bne.n	8003ebe <memset+0xa>
 8003ebc:	4770      	bx	lr
 8003ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec2:	e7f9      	b.n	8003eb8 <memset+0x4>

08003ec4 <__cvt>:
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eca:	461f      	mov	r7, r3
 8003ecc:	bfbb      	ittet	lt
 8003ece:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003ed2:	461f      	movlt	r7, r3
 8003ed4:	2300      	movge	r3, #0
 8003ed6:	232d      	movlt	r3, #45	; 0x2d
 8003ed8:	b088      	sub	sp, #32
 8003eda:	4614      	mov	r4, r2
 8003edc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ede:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ee0:	7013      	strb	r3, [r2, #0]
 8003ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ee4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003ee8:	f023 0820 	bic.w	r8, r3, #32
 8003eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ef0:	d005      	beq.n	8003efe <__cvt+0x3a>
 8003ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ef6:	d100      	bne.n	8003efa <__cvt+0x36>
 8003ef8:	3501      	adds	r5, #1
 8003efa:	2302      	movs	r3, #2
 8003efc:	e000      	b.n	8003f00 <__cvt+0x3c>
 8003efe:	2303      	movs	r3, #3
 8003f00:	aa07      	add	r2, sp, #28
 8003f02:	9204      	str	r2, [sp, #16]
 8003f04:	aa06      	add	r2, sp, #24
 8003f06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f0a:	e9cd 3500 	strd	r3, r5, [sp]
 8003f0e:	4622      	mov	r2, r4
 8003f10:	463b      	mov	r3, r7
 8003f12:	f000 feb9 	bl	8004c88 <_dtoa_r>
 8003f16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	d102      	bne.n	8003f24 <__cvt+0x60>
 8003f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f20:	07db      	lsls	r3, r3, #31
 8003f22:	d522      	bpl.n	8003f6a <__cvt+0xa6>
 8003f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f28:	eb06 0905 	add.w	r9, r6, r5
 8003f2c:	d110      	bne.n	8003f50 <__cvt+0x8c>
 8003f2e:	7833      	ldrb	r3, [r6, #0]
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d10a      	bne.n	8003f4a <__cvt+0x86>
 8003f34:	2200      	movs	r2, #0
 8003f36:	2300      	movs	r3, #0
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	f7fc fd44 	bl	80009c8 <__aeabi_dcmpeq>
 8003f40:	b918      	cbnz	r0, 8003f4a <__cvt+0x86>
 8003f42:	f1c5 0501 	rsb	r5, r5, #1
 8003f46:	f8ca 5000 	str.w	r5, [sl]
 8003f4a:	f8da 3000 	ldr.w	r3, [sl]
 8003f4e:	4499      	add	r9, r3
 8003f50:	2200      	movs	r2, #0
 8003f52:	2300      	movs	r3, #0
 8003f54:	4620      	mov	r0, r4
 8003f56:	4639      	mov	r1, r7
 8003f58:	f7fc fd36 	bl	80009c8 <__aeabi_dcmpeq>
 8003f5c:	b108      	cbz	r0, 8003f62 <__cvt+0x9e>
 8003f5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f62:	2230      	movs	r2, #48	; 0x30
 8003f64:	9b07      	ldr	r3, [sp, #28]
 8003f66:	454b      	cmp	r3, r9
 8003f68:	d307      	bcc.n	8003f7a <__cvt+0xb6>
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	9b07      	ldr	r3, [sp, #28]
 8003f6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f70:	1b9b      	subs	r3, r3, r6
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	b008      	add	sp, #32
 8003f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7a:	1c59      	adds	r1, r3, #1
 8003f7c:	9107      	str	r1, [sp, #28]
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e7f0      	b.n	8003f64 <__cvt+0xa0>

08003f82 <__exponent>:
 8003f82:	4603      	mov	r3, r0
 8003f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f86:	2900      	cmp	r1, #0
 8003f88:	f803 2b02 	strb.w	r2, [r3], #2
 8003f8c:	bfb6      	itet	lt
 8003f8e:	222d      	movlt	r2, #45	; 0x2d
 8003f90:	222b      	movge	r2, #43	; 0x2b
 8003f92:	4249      	neglt	r1, r1
 8003f94:	2909      	cmp	r1, #9
 8003f96:	7042      	strb	r2, [r0, #1]
 8003f98:	dd2b      	ble.n	8003ff2 <__exponent+0x70>
 8003f9a:	f10d 0407 	add.w	r4, sp, #7
 8003f9e:	46a4      	mov	ip, r4
 8003fa0:	270a      	movs	r7, #10
 8003fa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	46a6      	mov	lr, r4
 8003faa:	fb07 1516 	mls	r5, r7, r6, r1
 8003fae:	2a63      	cmp	r2, #99	; 0x63
 8003fb0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003fba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003fbe:	dcf0      	bgt.n	8003fa2 <__exponent+0x20>
 8003fc0:	3130      	adds	r1, #48	; 0x30
 8003fc2:	f1ae 0502 	sub.w	r5, lr, #2
 8003fc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	1c44      	adds	r4, r0, #1
 8003fce:	4561      	cmp	r1, ip
 8003fd0:	d30a      	bcc.n	8003fe8 <__exponent+0x66>
 8003fd2:	f10d 0209 	add.w	r2, sp, #9
 8003fd6:	eba2 020e 	sub.w	r2, r2, lr
 8003fda:	4565      	cmp	r5, ip
 8003fdc:	bf88      	it	hi
 8003fde:	2200      	movhi	r2, #0
 8003fe0:	4413      	add	r3, r2
 8003fe2:	1a18      	subs	r0, r3, r0
 8003fe4:	b003      	add	sp, #12
 8003fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fec:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003ff0:	e7ed      	b.n	8003fce <__exponent+0x4c>
 8003ff2:	2330      	movs	r3, #48	; 0x30
 8003ff4:	3130      	adds	r1, #48	; 0x30
 8003ff6:	7083      	strb	r3, [r0, #2]
 8003ff8:	70c1      	strb	r1, [r0, #3]
 8003ffa:	1d03      	adds	r3, r0, #4
 8003ffc:	e7f1      	b.n	8003fe2 <__exponent+0x60>
	...

08004000 <_printf_float>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	b091      	sub	sp, #68	; 0x44
 8004006:	460c      	mov	r4, r1
 8004008:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800400c:	4616      	mov	r6, r2
 800400e:	461f      	mov	r7, r3
 8004010:	4605      	mov	r5, r0
 8004012:	f001 fddb 	bl	8005bcc <_localeconv_r>
 8004016:	6803      	ldr	r3, [r0, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	9309      	str	r3, [sp, #36]	; 0x24
 800401c:	f7fc f8a8 	bl	8000170 <strlen>
 8004020:	2300      	movs	r3, #0
 8004022:	930e      	str	r3, [sp, #56]	; 0x38
 8004024:	f8d8 3000 	ldr.w	r3, [r8]
 8004028:	900a      	str	r0, [sp, #40]	; 0x28
 800402a:	3307      	adds	r3, #7
 800402c:	f023 0307 	bic.w	r3, r3, #7
 8004030:	f103 0208 	add.w	r2, r3, #8
 8004034:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004038:	f8d4 b000 	ldr.w	fp, [r4]
 800403c:	f8c8 2000 	str.w	r2, [r8]
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004048:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800404c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004050:	930b      	str	r3, [sp, #44]	; 0x2c
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	4640      	mov	r0, r8
 8004058:	4b9c      	ldr	r3, [pc, #624]	; (80042cc <_printf_float+0x2cc>)
 800405a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800405c:	f7fc fce6 	bl	8000a2c <__aeabi_dcmpun>
 8004060:	bb70      	cbnz	r0, 80040c0 <_printf_float+0xc0>
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	4640      	mov	r0, r8
 8004068:	4b98      	ldr	r3, [pc, #608]	; (80042cc <_printf_float+0x2cc>)
 800406a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800406c:	f7fc fcc0 	bl	80009f0 <__aeabi_dcmple>
 8004070:	bb30      	cbnz	r0, 80040c0 <_printf_float+0xc0>
 8004072:	2200      	movs	r2, #0
 8004074:	2300      	movs	r3, #0
 8004076:	4640      	mov	r0, r8
 8004078:	4651      	mov	r1, sl
 800407a:	f7fc fcaf 	bl	80009dc <__aeabi_dcmplt>
 800407e:	b110      	cbz	r0, 8004086 <_printf_float+0x86>
 8004080:	232d      	movs	r3, #45	; 0x2d
 8004082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004086:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <_printf_float+0x2d0>)
 8004088:	4892      	ldr	r0, [pc, #584]	; (80042d4 <_printf_float+0x2d4>)
 800408a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800408e:	bf94      	ite	ls
 8004090:	4698      	movls	r8, r3
 8004092:	4680      	movhi	r8, r0
 8004094:	2303      	movs	r3, #3
 8004096:	f04f 0a00 	mov.w	sl, #0
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	f02b 0304 	bic.w	r3, fp, #4
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	4633      	mov	r3, r6
 80040a4:	4621      	mov	r1, r4
 80040a6:	4628      	mov	r0, r5
 80040a8:	9700      	str	r7, [sp, #0]
 80040aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80040ac:	f000 f9d4 	bl	8004458 <_printf_common>
 80040b0:	3001      	adds	r0, #1
 80040b2:	f040 8090 	bne.w	80041d6 <_printf_float+0x1d6>
 80040b6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ba:	b011      	add	sp, #68	; 0x44
 80040bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c0:	4642      	mov	r2, r8
 80040c2:	4653      	mov	r3, sl
 80040c4:	4640      	mov	r0, r8
 80040c6:	4651      	mov	r1, sl
 80040c8:	f7fc fcb0 	bl	8000a2c <__aeabi_dcmpun>
 80040cc:	b148      	cbz	r0, 80040e2 <_printf_float+0xe2>
 80040ce:	f1ba 0f00 	cmp.w	sl, #0
 80040d2:	bfb8      	it	lt
 80040d4:	232d      	movlt	r3, #45	; 0x2d
 80040d6:	4880      	ldr	r0, [pc, #512]	; (80042d8 <_printf_float+0x2d8>)
 80040d8:	bfb8      	it	lt
 80040da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040de:	4b7f      	ldr	r3, [pc, #508]	; (80042dc <_printf_float+0x2dc>)
 80040e0:	e7d3      	b.n	800408a <_printf_float+0x8a>
 80040e2:	6863      	ldr	r3, [r4, #4]
 80040e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	d142      	bne.n	8004172 <_printf_float+0x172>
 80040ec:	2306      	movs	r3, #6
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	9206      	str	r2, [sp, #24]
 80040f4:	aa0e      	add	r2, sp, #56	; 0x38
 80040f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80040fa:	aa0d      	add	r2, sp, #52	; 0x34
 80040fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004100:	9203      	str	r2, [sp, #12]
 8004102:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004106:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	6863      	ldr	r3, [r4, #4]
 800410e:	4642      	mov	r2, r8
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4628      	mov	r0, r5
 8004114:	4653      	mov	r3, sl
 8004116:	910b      	str	r1, [sp, #44]	; 0x2c
 8004118:	f7ff fed4 	bl	8003ec4 <__cvt>
 800411c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800411e:	4680      	mov	r8, r0
 8004120:	2947      	cmp	r1, #71	; 0x47
 8004122:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004124:	d108      	bne.n	8004138 <_printf_float+0x138>
 8004126:	1cc8      	adds	r0, r1, #3
 8004128:	db02      	blt.n	8004130 <_printf_float+0x130>
 800412a:	6863      	ldr	r3, [r4, #4]
 800412c:	4299      	cmp	r1, r3
 800412e:	dd40      	ble.n	80041b2 <_printf_float+0x1b2>
 8004130:	f1a9 0902 	sub.w	r9, r9, #2
 8004134:	fa5f f989 	uxtb.w	r9, r9
 8004138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800413c:	d81f      	bhi.n	800417e <_printf_float+0x17e>
 800413e:	464a      	mov	r2, r9
 8004140:	3901      	subs	r1, #1
 8004142:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004146:	910d      	str	r1, [sp, #52]	; 0x34
 8004148:	f7ff ff1b 	bl	8003f82 <__exponent>
 800414c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800414e:	4682      	mov	sl, r0
 8004150:	1813      	adds	r3, r2, r0
 8004152:	2a01      	cmp	r2, #1
 8004154:	6123      	str	r3, [r4, #16]
 8004156:	dc02      	bgt.n	800415e <_printf_float+0x15e>
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	07d2      	lsls	r2, r2, #31
 800415c:	d501      	bpl.n	8004162 <_printf_float+0x162>
 800415e:	3301      	adds	r3, #1
 8004160:	6123      	str	r3, [r4, #16]
 8004162:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004166:	2b00      	cmp	r3, #0
 8004168:	d09b      	beq.n	80040a2 <_printf_float+0xa2>
 800416a:	232d      	movs	r3, #45	; 0x2d
 800416c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004170:	e797      	b.n	80040a2 <_printf_float+0xa2>
 8004172:	2947      	cmp	r1, #71	; 0x47
 8004174:	d1bc      	bne.n	80040f0 <_printf_float+0xf0>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ba      	bne.n	80040f0 <_printf_float+0xf0>
 800417a:	2301      	movs	r3, #1
 800417c:	e7b7      	b.n	80040ee <_printf_float+0xee>
 800417e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004182:	d118      	bne.n	80041b6 <_printf_float+0x1b6>
 8004184:	2900      	cmp	r1, #0
 8004186:	6863      	ldr	r3, [r4, #4]
 8004188:	dd0b      	ble.n	80041a2 <_printf_float+0x1a2>
 800418a:	6121      	str	r1, [r4, #16]
 800418c:	b913      	cbnz	r3, 8004194 <_printf_float+0x194>
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	07d0      	lsls	r0, r2, #31
 8004192:	d502      	bpl.n	800419a <_printf_float+0x19a>
 8004194:	3301      	adds	r3, #1
 8004196:	440b      	add	r3, r1
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	f04f 0a00 	mov.w	sl, #0
 800419e:	65a1      	str	r1, [r4, #88]	; 0x58
 80041a0:	e7df      	b.n	8004162 <_printf_float+0x162>
 80041a2:	b913      	cbnz	r3, 80041aa <_printf_float+0x1aa>
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	07d2      	lsls	r2, r2, #31
 80041a8:	d501      	bpl.n	80041ae <_printf_float+0x1ae>
 80041aa:	3302      	adds	r3, #2
 80041ac:	e7f4      	b.n	8004198 <_printf_float+0x198>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e7f2      	b.n	8004198 <_printf_float+0x198>
 80041b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80041b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b8:	4299      	cmp	r1, r3
 80041ba:	db05      	blt.n	80041c8 <_printf_float+0x1c8>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	6121      	str	r1, [r4, #16]
 80041c0:	07d8      	lsls	r0, r3, #31
 80041c2:	d5ea      	bpl.n	800419a <_printf_float+0x19a>
 80041c4:	1c4b      	adds	r3, r1, #1
 80041c6:	e7e7      	b.n	8004198 <_printf_float+0x198>
 80041c8:	2900      	cmp	r1, #0
 80041ca:	bfcc      	ite	gt
 80041cc:	2201      	movgt	r2, #1
 80041ce:	f1c1 0202 	rsble	r2, r1, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	e7e0      	b.n	8004198 <_printf_float+0x198>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	055a      	lsls	r2, r3, #21
 80041da:	d407      	bmi.n	80041ec <_printf_float+0x1ec>
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	4642      	mov	r2, r8
 80041e0:	4631      	mov	r1, r6
 80041e2:	4628      	mov	r0, r5
 80041e4:	47b8      	blx	r7
 80041e6:	3001      	adds	r0, #1
 80041e8:	d12b      	bne.n	8004242 <_printf_float+0x242>
 80041ea:	e764      	b.n	80040b6 <_printf_float+0xb6>
 80041ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041f0:	f240 80dd 	bls.w	80043ae <_printf_float+0x3ae>
 80041f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041f8:	2200      	movs	r2, #0
 80041fa:	2300      	movs	r3, #0
 80041fc:	f7fc fbe4 	bl	80009c8 <__aeabi_dcmpeq>
 8004200:	2800      	cmp	r0, #0
 8004202:	d033      	beq.n	800426c <_printf_float+0x26c>
 8004204:	2301      	movs	r3, #1
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	4a35      	ldr	r2, [pc, #212]	; (80042e0 <_printf_float+0x2e0>)
 800420c:	47b8      	blx	r7
 800420e:	3001      	adds	r0, #1
 8004210:	f43f af51 	beq.w	80040b6 <_printf_float+0xb6>
 8004214:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004218:	429a      	cmp	r2, r3
 800421a:	db02      	blt.n	8004222 <_printf_float+0x222>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	07d8      	lsls	r0, r3, #31
 8004220:	d50f      	bpl.n	8004242 <_printf_float+0x242>
 8004222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	f43f af42 	beq.w	80040b6 <_printf_float+0xb6>
 8004232:	f04f 0800 	mov.w	r8, #0
 8004236:	f104 091a 	add.w	r9, r4, #26
 800423a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800423c:	3b01      	subs	r3, #1
 800423e:	4543      	cmp	r3, r8
 8004240:	dc09      	bgt.n	8004256 <_printf_float+0x256>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	079b      	lsls	r3, r3, #30
 8004246:	f100 8102 	bmi.w	800444e <_printf_float+0x44e>
 800424a:	68e0      	ldr	r0, [r4, #12]
 800424c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800424e:	4298      	cmp	r0, r3
 8004250:	bfb8      	it	lt
 8004252:	4618      	movlt	r0, r3
 8004254:	e731      	b.n	80040ba <_printf_float+0xba>
 8004256:	2301      	movs	r3, #1
 8004258:	464a      	mov	r2, r9
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	f43f af28 	beq.w	80040b6 <_printf_float+0xb6>
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	e7e6      	b.n	800423a <_printf_float+0x23a>
 800426c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	dc38      	bgt.n	80042e4 <_printf_float+0x2e4>
 8004272:	2301      	movs	r3, #1
 8004274:	4631      	mov	r1, r6
 8004276:	4628      	mov	r0, r5
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <_printf_float+0x2e0>)
 800427a:	47b8      	blx	r7
 800427c:	3001      	adds	r0, #1
 800427e:	f43f af1a 	beq.w	80040b6 <_printf_float+0xb6>
 8004282:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004286:	4313      	orrs	r3, r2
 8004288:	d102      	bne.n	8004290 <_printf_float+0x290>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	07d9      	lsls	r1, r3, #31
 800428e:	d5d8      	bpl.n	8004242 <_printf_float+0x242>
 8004290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	f43f af0b 	beq.w	80040b6 <_printf_float+0xb6>
 80042a0:	f04f 0900 	mov.w	r9, #0
 80042a4:	f104 0a1a 	add.w	sl, r4, #26
 80042a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042aa:	425b      	negs	r3, r3
 80042ac:	454b      	cmp	r3, r9
 80042ae:	dc01      	bgt.n	80042b4 <_printf_float+0x2b4>
 80042b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b2:	e794      	b.n	80041de <_printf_float+0x1de>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4652      	mov	r2, sl
 80042b8:	4631      	mov	r1, r6
 80042ba:	4628      	mov	r0, r5
 80042bc:	47b8      	blx	r7
 80042be:	3001      	adds	r0, #1
 80042c0:	f43f aef9 	beq.w	80040b6 <_printf_float+0xb6>
 80042c4:	f109 0901 	add.w	r9, r9, #1
 80042c8:	e7ee      	b.n	80042a8 <_printf_float+0x2a8>
 80042ca:	bf00      	nop
 80042cc:	7fefffff 	.word	0x7fefffff
 80042d0:	08008030 	.word	0x08008030
 80042d4:	08008034 	.word	0x08008034
 80042d8:	0800803c 	.word	0x0800803c
 80042dc:	08008038 	.word	0x08008038
 80042e0:	08008040 	.word	0x08008040
 80042e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042e8:	429a      	cmp	r2, r3
 80042ea:	bfa8      	it	ge
 80042ec:	461a      	movge	r2, r3
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	4691      	mov	r9, r2
 80042f2:	dc37      	bgt.n	8004364 <_printf_float+0x364>
 80042f4:	f04f 0b00 	mov.w	fp, #0
 80042f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042fc:	f104 021a 	add.w	r2, r4, #26
 8004300:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004304:	ebaa 0309 	sub.w	r3, sl, r9
 8004308:	455b      	cmp	r3, fp
 800430a:	dc33      	bgt.n	8004374 <_printf_float+0x374>
 800430c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004310:	429a      	cmp	r2, r3
 8004312:	db3b      	blt.n	800438c <_printf_float+0x38c>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	07da      	lsls	r2, r3, #31
 8004318:	d438      	bmi.n	800438c <_printf_float+0x38c>
 800431a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800431c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800431e:	eba3 020a 	sub.w	r2, r3, sl
 8004322:	eba3 0901 	sub.w	r9, r3, r1
 8004326:	4591      	cmp	r9, r2
 8004328:	bfa8      	it	ge
 800432a:	4691      	movge	r9, r2
 800432c:	f1b9 0f00 	cmp.w	r9, #0
 8004330:	dc34      	bgt.n	800439c <_printf_float+0x39c>
 8004332:	f04f 0800 	mov.w	r8, #0
 8004336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800433a:	f104 0a1a 	add.w	sl, r4, #26
 800433e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	eba3 0309 	sub.w	r3, r3, r9
 8004348:	4543      	cmp	r3, r8
 800434a:	f77f af7a 	ble.w	8004242 <_printf_float+0x242>
 800434e:	2301      	movs	r3, #1
 8004350:	4652      	mov	r2, sl
 8004352:	4631      	mov	r1, r6
 8004354:	4628      	mov	r0, r5
 8004356:	47b8      	blx	r7
 8004358:	3001      	adds	r0, #1
 800435a:	f43f aeac 	beq.w	80040b6 <_printf_float+0xb6>
 800435e:	f108 0801 	add.w	r8, r8, #1
 8004362:	e7ec      	b.n	800433e <_printf_float+0x33e>
 8004364:	4613      	mov	r3, r2
 8004366:	4631      	mov	r1, r6
 8004368:	4642      	mov	r2, r8
 800436a:	4628      	mov	r0, r5
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	d1c0      	bne.n	80042f4 <_printf_float+0x2f4>
 8004372:	e6a0      	b.n	80040b6 <_printf_float+0xb6>
 8004374:	2301      	movs	r3, #1
 8004376:	4631      	mov	r1, r6
 8004378:	4628      	mov	r0, r5
 800437a:	920b      	str	r2, [sp, #44]	; 0x2c
 800437c:	47b8      	blx	r7
 800437e:	3001      	adds	r0, #1
 8004380:	f43f ae99 	beq.w	80040b6 <_printf_float+0xb6>
 8004384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004386:	f10b 0b01 	add.w	fp, fp, #1
 800438a:	e7b9      	b.n	8004300 <_printf_float+0x300>
 800438c:	4631      	mov	r1, r6
 800438e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	d1bf      	bne.n	800431a <_printf_float+0x31a>
 800439a:	e68c      	b.n	80040b6 <_printf_float+0xb6>
 800439c:	464b      	mov	r3, r9
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	eb08 020a 	add.w	r2, r8, sl
 80043a6:	47b8      	blx	r7
 80043a8:	3001      	adds	r0, #1
 80043aa:	d1c2      	bne.n	8004332 <_printf_float+0x332>
 80043ac:	e683      	b.n	80040b6 <_printf_float+0xb6>
 80043ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b0:	2a01      	cmp	r2, #1
 80043b2:	dc01      	bgt.n	80043b8 <_printf_float+0x3b8>
 80043b4:	07db      	lsls	r3, r3, #31
 80043b6:	d537      	bpl.n	8004428 <_printf_float+0x428>
 80043b8:	2301      	movs	r3, #1
 80043ba:	4642      	mov	r2, r8
 80043bc:	4631      	mov	r1, r6
 80043be:	4628      	mov	r0, r5
 80043c0:	47b8      	blx	r7
 80043c2:	3001      	adds	r0, #1
 80043c4:	f43f ae77 	beq.w	80040b6 <_printf_float+0xb6>
 80043c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f ae6f 	beq.w	80040b6 <_printf_float+0xb6>
 80043d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043dc:	2200      	movs	r2, #0
 80043de:	2300      	movs	r3, #0
 80043e0:	f7fc faf2 	bl	80009c8 <__aeabi_dcmpeq>
 80043e4:	b9d8      	cbnz	r0, 800441e <_printf_float+0x41e>
 80043e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e8:	f108 0201 	add.w	r2, r8, #1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	d10e      	bne.n	8004416 <_printf_float+0x416>
 80043f8:	e65d      	b.n	80040b6 <_printf_float+0xb6>
 80043fa:	2301      	movs	r3, #1
 80043fc:	464a      	mov	r2, r9
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f ae56 	beq.w	80040b6 <_printf_float+0xb6>
 800440a:	f108 0801 	add.w	r8, r8, #1
 800440e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004410:	3b01      	subs	r3, #1
 8004412:	4543      	cmp	r3, r8
 8004414:	dcf1      	bgt.n	80043fa <_printf_float+0x3fa>
 8004416:	4653      	mov	r3, sl
 8004418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800441c:	e6e0      	b.n	80041e0 <_printf_float+0x1e0>
 800441e:	f04f 0800 	mov.w	r8, #0
 8004422:	f104 091a 	add.w	r9, r4, #26
 8004426:	e7f2      	b.n	800440e <_printf_float+0x40e>
 8004428:	2301      	movs	r3, #1
 800442a:	4642      	mov	r2, r8
 800442c:	e7df      	b.n	80043ee <_printf_float+0x3ee>
 800442e:	2301      	movs	r3, #1
 8004430:	464a      	mov	r2, r9
 8004432:	4631      	mov	r1, r6
 8004434:	4628      	mov	r0, r5
 8004436:	47b8      	blx	r7
 8004438:	3001      	adds	r0, #1
 800443a:	f43f ae3c 	beq.w	80040b6 <_printf_float+0xb6>
 800443e:	f108 0801 	add.w	r8, r8, #1
 8004442:	68e3      	ldr	r3, [r4, #12]
 8004444:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004446:	1a5b      	subs	r3, r3, r1
 8004448:	4543      	cmp	r3, r8
 800444a:	dcf0      	bgt.n	800442e <_printf_float+0x42e>
 800444c:	e6fd      	b.n	800424a <_printf_float+0x24a>
 800444e:	f04f 0800 	mov.w	r8, #0
 8004452:	f104 0919 	add.w	r9, r4, #25
 8004456:	e7f4      	b.n	8004442 <_printf_float+0x442>

08004458 <_printf_common>:
 8004458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	4616      	mov	r6, r2
 800445e:	4699      	mov	r9, r3
 8004460:	688a      	ldr	r2, [r1, #8]
 8004462:	690b      	ldr	r3, [r1, #16]
 8004464:	4607      	mov	r7, r0
 8004466:	4293      	cmp	r3, r2
 8004468:	bfb8      	it	lt
 800446a:	4613      	movlt	r3, r2
 800446c:	6033      	str	r3, [r6, #0]
 800446e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004472:	460c      	mov	r4, r1
 8004474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004478:	b10a      	cbz	r2, 800447e <_printf_common+0x26>
 800447a:	3301      	adds	r3, #1
 800447c:	6033      	str	r3, [r6, #0]
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	0699      	lsls	r1, r3, #26
 8004482:	bf42      	ittt	mi
 8004484:	6833      	ldrmi	r3, [r6, #0]
 8004486:	3302      	addmi	r3, #2
 8004488:	6033      	strmi	r3, [r6, #0]
 800448a:	6825      	ldr	r5, [r4, #0]
 800448c:	f015 0506 	ands.w	r5, r5, #6
 8004490:	d106      	bne.n	80044a0 <_printf_common+0x48>
 8004492:	f104 0a19 	add.w	sl, r4, #25
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	6832      	ldr	r2, [r6, #0]
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	42ab      	cmp	r3, r5
 800449e:	dc28      	bgt.n	80044f2 <_printf_common+0x9a>
 80044a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044a4:	1e13      	subs	r3, r2, #0
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	bf18      	it	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	0692      	lsls	r2, r2, #26
 80044ae:	d42d      	bmi.n	800450c <_printf_common+0xb4>
 80044b0:	4649      	mov	r1, r9
 80044b2:	4638      	mov	r0, r7
 80044b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b8:	47c0      	blx	r8
 80044ba:	3001      	adds	r0, #1
 80044bc:	d020      	beq.n	8004500 <_printf_common+0xa8>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	68e5      	ldr	r5, [r4, #12]
 80044c2:	f003 0306 	and.w	r3, r3, #6
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	bf18      	it	ne
 80044ca:	2500      	movne	r5, #0
 80044cc:	6832      	ldr	r2, [r6, #0]
 80044ce:	f04f 0600 	mov.w	r6, #0
 80044d2:	68a3      	ldr	r3, [r4, #8]
 80044d4:	bf08      	it	eq
 80044d6:	1aad      	subeq	r5, r5, r2
 80044d8:	6922      	ldr	r2, [r4, #16]
 80044da:	bf08      	it	eq
 80044dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfc4      	itt	gt
 80044e4:	1a9b      	subgt	r3, r3, r2
 80044e6:	18ed      	addgt	r5, r5, r3
 80044e8:	341a      	adds	r4, #26
 80044ea:	42b5      	cmp	r5, r6
 80044ec:	d11a      	bne.n	8004524 <_printf_common+0xcc>
 80044ee:	2000      	movs	r0, #0
 80044f0:	e008      	b.n	8004504 <_printf_common+0xac>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4652      	mov	r2, sl
 80044f6:	4649      	mov	r1, r9
 80044f8:	4638      	mov	r0, r7
 80044fa:	47c0      	blx	r8
 80044fc:	3001      	adds	r0, #1
 80044fe:	d103      	bne.n	8004508 <_printf_common+0xb0>
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004508:	3501      	adds	r5, #1
 800450a:	e7c4      	b.n	8004496 <_printf_common+0x3e>
 800450c:	2030      	movs	r0, #48	; 0x30
 800450e:	18e1      	adds	r1, r4, r3
 8004510:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800451a:	4422      	add	r2, r4
 800451c:	3302      	adds	r3, #2
 800451e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004522:	e7c5      	b.n	80044b0 <_printf_common+0x58>
 8004524:	2301      	movs	r3, #1
 8004526:	4622      	mov	r2, r4
 8004528:	4649      	mov	r1, r9
 800452a:	4638      	mov	r0, r7
 800452c:	47c0      	blx	r8
 800452e:	3001      	adds	r0, #1
 8004530:	d0e6      	beq.n	8004500 <_printf_common+0xa8>
 8004532:	3601      	adds	r6, #1
 8004534:	e7d9      	b.n	80044ea <_printf_common+0x92>
	...

08004538 <_printf_i>:
 8004538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800453c:	7e0f      	ldrb	r7, [r1, #24]
 800453e:	4691      	mov	r9, r2
 8004540:	2f78      	cmp	r7, #120	; 0x78
 8004542:	4680      	mov	r8, r0
 8004544:	460c      	mov	r4, r1
 8004546:	469a      	mov	sl, r3
 8004548:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800454a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800454e:	d807      	bhi.n	8004560 <_printf_i+0x28>
 8004550:	2f62      	cmp	r7, #98	; 0x62
 8004552:	d80a      	bhi.n	800456a <_printf_i+0x32>
 8004554:	2f00      	cmp	r7, #0
 8004556:	f000 80d9 	beq.w	800470c <_printf_i+0x1d4>
 800455a:	2f58      	cmp	r7, #88	; 0x58
 800455c:	f000 80a4 	beq.w	80046a8 <_printf_i+0x170>
 8004560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004568:	e03a      	b.n	80045e0 <_printf_i+0xa8>
 800456a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800456e:	2b15      	cmp	r3, #21
 8004570:	d8f6      	bhi.n	8004560 <_printf_i+0x28>
 8004572:	a101      	add	r1, pc, #4	; (adr r1, 8004578 <_printf_i+0x40>)
 8004574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004578:	080045d1 	.word	0x080045d1
 800457c:	080045e5 	.word	0x080045e5
 8004580:	08004561 	.word	0x08004561
 8004584:	08004561 	.word	0x08004561
 8004588:	08004561 	.word	0x08004561
 800458c:	08004561 	.word	0x08004561
 8004590:	080045e5 	.word	0x080045e5
 8004594:	08004561 	.word	0x08004561
 8004598:	08004561 	.word	0x08004561
 800459c:	08004561 	.word	0x08004561
 80045a0:	08004561 	.word	0x08004561
 80045a4:	080046f3 	.word	0x080046f3
 80045a8:	08004615 	.word	0x08004615
 80045ac:	080046d5 	.word	0x080046d5
 80045b0:	08004561 	.word	0x08004561
 80045b4:	08004561 	.word	0x08004561
 80045b8:	08004715 	.word	0x08004715
 80045bc:	08004561 	.word	0x08004561
 80045c0:	08004615 	.word	0x08004615
 80045c4:	08004561 	.word	0x08004561
 80045c8:	08004561 	.word	0x08004561
 80045cc:	080046dd 	.word	0x080046dd
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	1d1a      	adds	r2, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	602a      	str	r2, [r5, #0]
 80045d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0a4      	b.n	800472e <_printf_i+0x1f6>
 80045e4:	6820      	ldr	r0, [r4, #0]
 80045e6:	6829      	ldr	r1, [r5, #0]
 80045e8:	0606      	lsls	r6, r0, #24
 80045ea:	f101 0304 	add.w	r3, r1, #4
 80045ee:	d50a      	bpl.n	8004606 <_printf_i+0xce>
 80045f0:	680e      	ldr	r6, [r1, #0]
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	2e00      	cmp	r6, #0
 80045f6:	da03      	bge.n	8004600 <_printf_i+0xc8>
 80045f8:	232d      	movs	r3, #45	; 0x2d
 80045fa:	4276      	negs	r6, r6
 80045fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004600:	230a      	movs	r3, #10
 8004602:	485e      	ldr	r0, [pc, #376]	; (800477c <_printf_i+0x244>)
 8004604:	e019      	b.n	800463a <_printf_i+0x102>
 8004606:	680e      	ldr	r6, [r1, #0]
 8004608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	bf18      	it	ne
 8004610:	b236      	sxthne	r6, r6
 8004612:	e7ef      	b.n	80045f4 <_printf_i+0xbc>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	6820      	ldr	r0, [r4, #0]
 8004618:	1d19      	adds	r1, r3, #4
 800461a:	6029      	str	r1, [r5, #0]
 800461c:	0601      	lsls	r1, r0, #24
 800461e:	d501      	bpl.n	8004624 <_printf_i+0xec>
 8004620:	681e      	ldr	r6, [r3, #0]
 8004622:	e002      	b.n	800462a <_printf_i+0xf2>
 8004624:	0646      	lsls	r6, r0, #25
 8004626:	d5fb      	bpl.n	8004620 <_printf_i+0xe8>
 8004628:	881e      	ldrh	r6, [r3, #0]
 800462a:	2f6f      	cmp	r7, #111	; 0x6f
 800462c:	bf0c      	ite	eq
 800462e:	2308      	moveq	r3, #8
 8004630:	230a      	movne	r3, #10
 8004632:	4852      	ldr	r0, [pc, #328]	; (800477c <_printf_i+0x244>)
 8004634:	2100      	movs	r1, #0
 8004636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800463a:	6865      	ldr	r5, [r4, #4]
 800463c:	2d00      	cmp	r5, #0
 800463e:	bfa8      	it	ge
 8004640:	6821      	ldrge	r1, [r4, #0]
 8004642:	60a5      	str	r5, [r4, #8]
 8004644:	bfa4      	itt	ge
 8004646:	f021 0104 	bicge.w	r1, r1, #4
 800464a:	6021      	strge	r1, [r4, #0]
 800464c:	b90e      	cbnz	r6, 8004652 <_printf_i+0x11a>
 800464e:	2d00      	cmp	r5, #0
 8004650:	d04d      	beq.n	80046ee <_printf_i+0x1b6>
 8004652:	4615      	mov	r5, r2
 8004654:	fbb6 f1f3 	udiv	r1, r6, r3
 8004658:	fb03 6711 	mls	r7, r3, r1, r6
 800465c:	5dc7      	ldrb	r7, [r0, r7]
 800465e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004662:	4637      	mov	r7, r6
 8004664:	42bb      	cmp	r3, r7
 8004666:	460e      	mov	r6, r1
 8004668:	d9f4      	bls.n	8004654 <_printf_i+0x11c>
 800466a:	2b08      	cmp	r3, #8
 800466c:	d10b      	bne.n	8004686 <_printf_i+0x14e>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	07de      	lsls	r6, r3, #31
 8004672:	d508      	bpl.n	8004686 <_printf_i+0x14e>
 8004674:	6923      	ldr	r3, [r4, #16]
 8004676:	6861      	ldr	r1, [r4, #4]
 8004678:	4299      	cmp	r1, r3
 800467a:	bfde      	ittt	le
 800467c:	2330      	movle	r3, #48	; 0x30
 800467e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004682:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004686:	1b52      	subs	r2, r2, r5
 8004688:	6122      	str	r2, [r4, #16]
 800468a:	464b      	mov	r3, r9
 800468c:	4621      	mov	r1, r4
 800468e:	4640      	mov	r0, r8
 8004690:	f8cd a000 	str.w	sl, [sp]
 8004694:	aa03      	add	r2, sp, #12
 8004696:	f7ff fedf 	bl	8004458 <_printf_common>
 800469a:	3001      	adds	r0, #1
 800469c:	d14c      	bne.n	8004738 <_printf_i+0x200>
 800469e:	f04f 30ff 	mov.w	r0, #4294967295
 80046a2:	b004      	add	sp, #16
 80046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a8:	4834      	ldr	r0, [pc, #208]	; (800477c <_printf_i+0x244>)
 80046aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046ae:	6829      	ldr	r1, [r5, #0]
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80046b6:	6029      	str	r1, [r5, #0]
 80046b8:	061d      	lsls	r5, r3, #24
 80046ba:	d514      	bpl.n	80046e6 <_printf_i+0x1ae>
 80046bc:	07df      	lsls	r7, r3, #31
 80046be:	bf44      	itt	mi
 80046c0:	f043 0320 	orrmi.w	r3, r3, #32
 80046c4:	6023      	strmi	r3, [r4, #0]
 80046c6:	b91e      	cbnz	r6, 80046d0 <_printf_i+0x198>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f023 0320 	bic.w	r3, r3, #32
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	2310      	movs	r3, #16
 80046d2:	e7af      	b.n	8004634 <_printf_i+0xfc>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	f043 0320 	orr.w	r3, r3, #32
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	2378      	movs	r3, #120	; 0x78
 80046de:	4828      	ldr	r0, [pc, #160]	; (8004780 <_printf_i+0x248>)
 80046e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046e4:	e7e3      	b.n	80046ae <_printf_i+0x176>
 80046e6:	0659      	lsls	r1, r3, #25
 80046e8:	bf48      	it	mi
 80046ea:	b2b6      	uxthmi	r6, r6
 80046ec:	e7e6      	b.n	80046bc <_printf_i+0x184>
 80046ee:	4615      	mov	r5, r2
 80046f0:	e7bb      	b.n	800466a <_printf_i+0x132>
 80046f2:	682b      	ldr	r3, [r5, #0]
 80046f4:	6826      	ldr	r6, [r4, #0]
 80046f6:	1d18      	adds	r0, r3, #4
 80046f8:	6961      	ldr	r1, [r4, #20]
 80046fa:	6028      	str	r0, [r5, #0]
 80046fc:	0635      	lsls	r5, r6, #24
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	d501      	bpl.n	8004706 <_printf_i+0x1ce>
 8004702:	6019      	str	r1, [r3, #0]
 8004704:	e002      	b.n	800470c <_printf_i+0x1d4>
 8004706:	0670      	lsls	r0, r6, #25
 8004708:	d5fb      	bpl.n	8004702 <_printf_i+0x1ca>
 800470a:	8019      	strh	r1, [r3, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	4615      	mov	r5, r2
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	e7ba      	b.n	800468a <_printf_i+0x152>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	2100      	movs	r1, #0
 8004718:	1d1a      	adds	r2, r3, #4
 800471a:	602a      	str	r2, [r5, #0]
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	6862      	ldr	r2, [r4, #4]
 8004720:	4628      	mov	r0, r5
 8004722:	f001 fac7 	bl	8005cb4 <memchr>
 8004726:	b108      	cbz	r0, 800472c <_printf_i+0x1f4>
 8004728:	1b40      	subs	r0, r0, r5
 800472a:	6060      	str	r0, [r4, #4]
 800472c:	6863      	ldr	r3, [r4, #4]
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	2300      	movs	r3, #0
 8004732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004736:	e7a8      	b.n	800468a <_printf_i+0x152>
 8004738:	462a      	mov	r2, r5
 800473a:	4649      	mov	r1, r9
 800473c:	4640      	mov	r0, r8
 800473e:	6923      	ldr	r3, [r4, #16]
 8004740:	47d0      	blx	sl
 8004742:	3001      	adds	r0, #1
 8004744:	d0ab      	beq.n	800469e <_printf_i+0x166>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	079b      	lsls	r3, r3, #30
 800474a:	d413      	bmi.n	8004774 <_printf_i+0x23c>
 800474c:	68e0      	ldr	r0, [r4, #12]
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	4298      	cmp	r0, r3
 8004752:	bfb8      	it	lt
 8004754:	4618      	movlt	r0, r3
 8004756:	e7a4      	b.n	80046a2 <_printf_i+0x16a>
 8004758:	2301      	movs	r3, #1
 800475a:	4632      	mov	r2, r6
 800475c:	4649      	mov	r1, r9
 800475e:	4640      	mov	r0, r8
 8004760:	47d0      	blx	sl
 8004762:	3001      	adds	r0, #1
 8004764:	d09b      	beq.n	800469e <_printf_i+0x166>
 8004766:	3501      	adds	r5, #1
 8004768:	68e3      	ldr	r3, [r4, #12]
 800476a:	9903      	ldr	r1, [sp, #12]
 800476c:	1a5b      	subs	r3, r3, r1
 800476e:	42ab      	cmp	r3, r5
 8004770:	dcf2      	bgt.n	8004758 <_printf_i+0x220>
 8004772:	e7eb      	b.n	800474c <_printf_i+0x214>
 8004774:	2500      	movs	r5, #0
 8004776:	f104 0619 	add.w	r6, r4, #25
 800477a:	e7f5      	b.n	8004768 <_printf_i+0x230>
 800477c:	08008042 	.word	0x08008042
 8004780:	08008053 	.word	0x08008053

08004784 <iprintf>:
 8004784:	b40f      	push	{r0, r1, r2, r3}
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <iprintf+0x2c>)
 8004788:	b513      	push	{r0, r1, r4, lr}
 800478a:	681c      	ldr	r4, [r3, #0]
 800478c:	b124      	cbz	r4, 8004798 <iprintf+0x14>
 800478e:	69a3      	ldr	r3, [r4, #24]
 8004790:	b913      	cbnz	r3, 8004798 <iprintf+0x14>
 8004792:	4620      	mov	r0, r4
 8004794:	f001 f97c 	bl	8005a90 <__sinit>
 8004798:	ab05      	add	r3, sp, #20
 800479a:	4620      	mov	r0, r4
 800479c:	9a04      	ldr	r2, [sp, #16]
 800479e:	68a1      	ldr	r1, [r4, #8]
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	f002 f899 	bl	80068d8 <_vfiprintf_r>
 80047a6:	b002      	add	sp, #8
 80047a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ac:	b004      	add	sp, #16
 80047ae:	4770      	bx	lr
 80047b0:	20000054 	.word	0x20000054

080047b4 <_puts_r>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	460e      	mov	r6, r1
 80047b8:	4605      	mov	r5, r0
 80047ba:	b118      	cbz	r0, 80047c4 <_puts_r+0x10>
 80047bc:	6983      	ldr	r3, [r0, #24]
 80047be:	b90b      	cbnz	r3, 80047c4 <_puts_r+0x10>
 80047c0:	f001 f966 	bl	8005a90 <__sinit>
 80047c4:	69ab      	ldr	r3, [r5, #24]
 80047c6:	68ac      	ldr	r4, [r5, #8]
 80047c8:	b913      	cbnz	r3, 80047d0 <_puts_r+0x1c>
 80047ca:	4628      	mov	r0, r5
 80047cc:	f001 f960 	bl	8005a90 <__sinit>
 80047d0:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <_puts_r+0xd0>)
 80047d2:	429c      	cmp	r4, r3
 80047d4:	d120      	bne.n	8004818 <_puts_r+0x64>
 80047d6:	686c      	ldr	r4, [r5, #4]
 80047d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047da:	07db      	lsls	r3, r3, #31
 80047dc:	d405      	bmi.n	80047ea <_puts_r+0x36>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	0598      	lsls	r0, r3, #22
 80047e2:	d402      	bmi.n	80047ea <_puts_r+0x36>
 80047e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e6:	f001 f9f6 	bl	8005bd6 <__retarget_lock_acquire_recursive>
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	0719      	lsls	r1, r3, #28
 80047ee:	d51d      	bpl.n	800482c <_puts_r+0x78>
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	b1db      	cbz	r3, 800482c <_puts_r+0x78>
 80047f4:	3e01      	subs	r6, #1
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60a3      	str	r3, [r4, #8]
 8004800:	bb39      	cbnz	r1, 8004852 <_puts_r+0x9e>
 8004802:	2b00      	cmp	r3, #0
 8004804:	da38      	bge.n	8004878 <_puts_r+0xc4>
 8004806:	4622      	mov	r2, r4
 8004808:	210a      	movs	r1, #10
 800480a:	4628      	mov	r0, r5
 800480c:	f000 f8ee 	bl	80049ec <__swbuf_r>
 8004810:	3001      	adds	r0, #1
 8004812:	d011      	beq.n	8004838 <_puts_r+0x84>
 8004814:	250a      	movs	r5, #10
 8004816:	e011      	b.n	800483c <_puts_r+0x88>
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <_puts_r+0xd4>)
 800481a:	429c      	cmp	r4, r3
 800481c:	d101      	bne.n	8004822 <_puts_r+0x6e>
 800481e:	68ac      	ldr	r4, [r5, #8]
 8004820:	e7da      	b.n	80047d8 <_puts_r+0x24>
 8004822:	4b1a      	ldr	r3, [pc, #104]	; (800488c <_puts_r+0xd8>)
 8004824:	429c      	cmp	r4, r3
 8004826:	bf08      	it	eq
 8004828:	68ec      	ldreq	r4, [r5, #12]
 800482a:	e7d5      	b.n	80047d8 <_puts_r+0x24>
 800482c:	4621      	mov	r1, r4
 800482e:	4628      	mov	r0, r5
 8004830:	f000 f92e 	bl	8004a90 <__swsetup_r>
 8004834:	2800      	cmp	r0, #0
 8004836:	d0dd      	beq.n	80047f4 <_puts_r+0x40>
 8004838:	f04f 35ff 	mov.w	r5, #4294967295
 800483c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800483e:	07da      	lsls	r2, r3, #31
 8004840:	d405      	bmi.n	800484e <_puts_r+0x9a>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	059b      	lsls	r3, r3, #22
 8004846:	d402      	bmi.n	800484e <_puts_r+0x9a>
 8004848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800484a:	f001 f9c5 	bl	8005bd8 <__retarget_lock_release_recursive>
 800484e:	4628      	mov	r0, r5
 8004850:	bd70      	pop	{r4, r5, r6, pc}
 8004852:	2b00      	cmp	r3, #0
 8004854:	da04      	bge.n	8004860 <_puts_r+0xac>
 8004856:	69a2      	ldr	r2, [r4, #24]
 8004858:	429a      	cmp	r2, r3
 800485a:	dc06      	bgt.n	800486a <_puts_r+0xb6>
 800485c:	290a      	cmp	r1, #10
 800485e:	d004      	beq.n	800486a <_puts_r+0xb6>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	7019      	strb	r1, [r3, #0]
 8004868:	e7c5      	b.n	80047f6 <_puts_r+0x42>
 800486a:	4622      	mov	r2, r4
 800486c:	4628      	mov	r0, r5
 800486e:	f000 f8bd 	bl	80049ec <__swbuf_r>
 8004872:	3001      	adds	r0, #1
 8004874:	d1bf      	bne.n	80047f6 <_puts_r+0x42>
 8004876:	e7df      	b.n	8004838 <_puts_r+0x84>
 8004878:	250a      	movs	r5, #10
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	6022      	str	r2, [r4, #0]
 8004880:	701d      	strb	r5, [r3, #0]
 8004882:	e7db      	b.n	800483c <_puts_r+0x88>
 8004884:	08008218 	.word	0x08008218
 8004888:	08008238 	.word	0x08008238
 800488c:	080081f8 	.word	0x080081f8

08004890 <puts>:
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <puts+0xc>)
 8004892:	4601      	mov	r1, r0
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	f7ff bf8d 	b.w	80047b4 <_puts_r>
 800489a:	bf00      	nop
 800489c:	20000054 	.word	0x20000054

080048a0 <siprintf>:
 80048a0:	b40e      	push	{r1, r2, r3}
 80048a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048a6:	b500      	push	{lr}
 80048a8:	b09c      	sub	sp, #112	; 0x70
 80048aa:	ab1d      	add	r3, sp, #116	; 0x74
 80048ac:	9002      	str	r0, [sp, #8]
 80048ae:	9006      	str	r0, [sp, #24]
 80048b0:	9107      	str	r1, [sp, #28]
 80048b2:	9104      	str	r1, [sp, #16]
 80048b4:	4808      	ldr	r0, [pc, #32]	; (80048d8 <siprintf+0x38>)
 80048b6:	4909      	ldr	r1, [pc, #36]	; (80048dc <siprintf+0x3c>)
 80048b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048bc:	9105      	str	r1, [sp, #20]
 80048be:	6800      	ldr	r0, [r0, #0]
 80048c0:	a902      	add	r1, sp, #8
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	f001 fee0 	bl	8006688 <_svfiprintf_r>
 80048c8:	2200      	movs	r2, #0
 80048ca:	9b02      	ldr	r3, [sp, #8]
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	b01c      	add	sp, #112	; 0x70
 80048d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d4:	b003      	add	sp, #12
 80048d6:	4770      	bx	lr
 80048d8:	20000054 	.word	0x20000054
 80048dc:	ffff0208 	.word	0xffff0208

080048e0 <_strtol_l.constprop.0>:
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e6:	4680      	mov	r8, r0
 80048e8:	d001      	beq.n	80048ee <_strtol_l.constprop.0+0xe>
 80048ea:	2b24      	cmp	r3, #36	; 0x24
 80048ec:	d906      	bls.n	80048fc <_strtol_l.constprop.0+0x1c>
 80048ee:	f7ff fab7 	bl	8003e60 <__errno>
 80048f2:	2316      	movs	r3, #22
 80048f4:	6003      	str	r3, [r0, #0]
 80048f6:	2000      	movs	r0, #0
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	460d      	mov	r5, r1
 80048fe:	4f35      	ldr	r7, [pc, #212]	; (80049d4 <_strtol_l.constprop.0+0xf4>)
 8004900:	4628      	mov	r0, r5
 8004902:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004906:	5de6      	ldrb	r6, [r4, r7]
 8004908:	f016 0608 	ands.w	r6, r6, #8
 800490c:	d1f8      	bne.n	8004900 <_strtol_l.constprop.0+0x20>
 800490e:	2c2d      	cmp	r4, #45	; 0x2d
 8004910:	d12f      	bne.n	8004972 <_strtol_l.constprop.0+0x92>
 8004912:	2601      	movs	r6, #1
 8004914:	782c      	ldrb	r4, [r5, #0]
 8004916:	1c85      	adds	r5, r0, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d057      	beq.n	80049cc <_strtol_l.constprop.0+0xec>
 800491c:	2b10      	cmp	r3, #16
 800491e:	d109      	bne.n	8004934 <_strtol_l.constprop.0+0x54>
 8004920:	2c30      	cmp	r4, #48	; 0x30
 8004922:	d107      	bne.n	8004934 <_strtol_l.constprop.0+0x54>
 8004924:	7828      	ldrb	r0, [r5, #0]
 8004926:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800492a:	2858      	cmp	r0, #88	; 0x58
 800492c:	d149      	bne.n	80049c2 <_strtol_l.constprop.0+0xe2>
 800492e:	2310      	movs	r3, #16
 8004930:	786c      	ldrb	r4, [r5, #1]
 8004932:	3502      	adds	r5, #2
 8004934:	2700      	movs	r7, #0
 8004936:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800493a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800493e:	fbbe f9f3 	udiv	r9, lr, r3
 8004942:	4638      	mov	r0, r7
 8004944:	fb03 ea19 	mls	sl, r3, r9, lr
 8004948:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800494c:	f1bc 0f09 	cmp.w	ip, #9
 8004950:	d814      	bhi.n	800497c <_strtol_l.constprop.0+0x9c>
 8004952:	4664      	mov	r4, ip
 8004954:	42a3      	cmp	r3, r4
 8004956:	dd22      	ble.n	800499e <_strtol_l.constprop.0+0xbe>
 8004958:	2f00      	cmp	r7, #0
 800495a:	db1d      	blt.n	8004998 <_strtol_l.constprop.0+0xb8>
 800495c:	4581      	cmp	r9, r0
 800495e:	d31b      	bcc.n	8004998 <_strtol_l.constprop.0+0xb8>
 8004960:	d101      	bne.n	8004966 <_strtol_l.constprop.0+0x86>
 8004962:	45a2      	cmp	sl, r4
 8004964:	db18      	blt.n	8004998 <_strtol_l.constprop.0+0xb8>
 8004966:	2701      	movs	r7, #1
 8004968:	fb00 4003 	mla	r0, r0, r3, r4
 800496c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004970:	e7ea      	b.n	8004948 <_strtol_l.constprop.0+0x68>
 8004972:	2c2b      	cmp	r4, #43	; 0x2b
 8004974:	bf04      	itt	eq
 8004976:	782c      	ldrbeq	r4, [r5, #0]
 8004978:	1c85      	addeq	r5, r0, #2
 800497a:	e7cd      	b.n	8004918 <_strtol_l.constprop.0+0x38>
 800497c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004980:	f1bc 0f19 	cmp.w	ip, #25
 8004984:	d801      	bhi.n	800498a <_strtol_l.constprop.0+0xaa>
 8004986:	3c37      	subs	r4, #55	; 0x37
 8004988:	e7e4      	b.n	8004954 <_strtol_l.constprop.0+0x74>
 800498a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800498e:	f1bc 0f19 	cmp.w	ip, #25
 8004992:	d804      	bhi.n	800499e <_strtol_l.constprop.0+0xbe>
 8004994:	3c57      	subs	r4, #87	; 0x57
 8004996:	e7dd      	b.n	8004954 <_strtol_l.constprop.0+0x74>
 8004998:	f04f 37ff 	mov.w	r7, #4294967295
 800499c:	e7e6      	b.n	800496c <_strtol_l.constprop.0+0x8c>
 800499e:	2f00      	cmp	r7, #0
 80049a0:	da07      	bge.n	80049b2 <_strtol_l.constprop.0+0xd2>
 80049a2:	2322      	movs	r3, #34	; 0x22
 80049a4:	4670      	mov	r0, lr
 80049a6:	f8c8 3000 	str.w	r3, [r8]
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	d0a4      	beq.n	80048f8 <_strtol_l.constprop.0+0x18>
 80049ae:	1e69      	subs	r1, r5, #1
 80049b0:	e005      	b.n	80049be <_strtol_l.constprop.0+0xde>
 80049b2:	b106      	cbz	r6, 80049b6 <_strtol_l.constprop.0+0xd6>
 80049b4:	4240      	negs	r0, r0
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	d09e      	beq.n	80048f8 <_strtol_l.constprop.0+0x18>
 80049ba:	2f00      	cmp	r7, #0
 80049bc:	d1f7      	bne.n	80049ae <_strtol_l.constprop.0+0xce>
 80049be:	6011      	str	r1, [r2, #0]
 80049c0:	e79a      	b.n	80048f8 <_strtol_l.constprop.0+0x18>
 80049c2:	2430      	movs	r4, #48	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1b5      	bne.n	8004934 <_strtol_l.constprop.0+0x54>
 80049c8:	2308      	movs	r3, #8
 80049ca:	e7b3      	b.n	8004934 <_strtol_l.constprop.0+0x54>
 80049cc:	2c30      	cmp	r4, #48	; 0x30
 80049ce:	d0a9      	beq.n	8004924 <_strtol_l.constprop.0+0x44>
 80049d0:	230a      	movs	r3, #10
 80049d2:	e7af      	b.n	8004934 <_strtol_l.constprop.0+0x54>
 80049d4:	08008065 	.word	0x08008065

080049d8 <strtol>:
 80049d8:	4613      	mov	r3, r2
 80049da:	460a      	mov	r2, r1
 80049dc:	4601      	mov	r1, r0
 80049de:	4802      	ldr	r0, [pc, #8]	; (80049e8 <strtol+0x10>)
 80049e0:	6800      	ldr	r0, [r0, #0]
 80049e2:	f7ff bf7d 	b.w	80048e0 <_strtol_l.constprop.0>
 80049e6:	bf00      	nop
 80049e8:	20000054 	.word	0x20000054

080049ec <__swbuf_r>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	460e      	mov	r6, r1
 80049f0:	4614      	mov	r4, r2
 80049f2:	4605      	mov	r5, r0
 80049f4:	b118      	cbz	r0, 80049fe <__swbuf_r+0x12>
 80049f6:	6983      	ldr	r3, [r0, #24]
 80049f8:	b90b      	cbnz	r3, 80049fe <__swbuf_r+0x12>
 80049fa:	f001 f849 	bl	8005a90 <__sinit>
 80049fe:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <__swbuf_r+0x98>)
 8004a00:	429c      	cmp	r4, r3
 8004a02:	d12b      	bne.n	8004a5c <__swbuf_r+0x70>
 8004a04:	686c      	ldr	r4, [r5, #4]
 8004a06:	69a3      	ldr	r3, [r4, #24]
 8004a08:	60a3      	str	r3, [r4, #8]
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	071a      	lsls	r2, r3, #28
 8004a0e:	d52f      	bpl.n	8004a70 <__swbuf_r+0x84>
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	b36b      	cbz	r3, 8004a70 <__swbuf_r+0x84>
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	b2f6      	uxtb	r6, r6
 8004a1a:	1ac0      	subs	r0, r0, r3
 8004a1c:	6963      	ldr	r3, [r4, #20]
 8004a1e:	4637      	mov	r7, r6
 8004a20:	4283      	cmp	r3, r0
 8004a22:	dc04      	bgt.n	8004a2e <__swbuf_r+0x42>
 8004a24:	4621      	mov	r1, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 ff9e 	bl	8005968 <_fflush_r>
 8004a2c:	bb30      	cbnz	r0, 8004a7c <__swbuf_r+0x90>
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	3001      	adds	r0, #1
 8004a32:	3b01      	subs	r3, #1
 8004a34:	60a3      	str	r3, [r4, #8]
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	701e      	strb	r6, [r3, #0]
 8004a3e:	6963      	ldr	r3, [r4, #20]
 8004a40:	4283      	cmp	r3, r0
 8004a42:	d004      	beq.n	8004a4e <__swbuf_r+0x62>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	07db      	lsls	r3, r3, #31
 8004a48:	d506      	bpl.n	8004a58 <__swbuf_r+0x6c>
 8004a4a:	2e0a      	cmp	r6, #10
 8004a4c:	d104      	bne.n	8004a58 <__swbuf_r+0x6c>
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 ff89 	bl	8005968 <_fflush_r>
 8004a56:	b988      	cbnz	r0, 8004a7c <__swbuf_r+0x90>
 8004a58:	4638      	mov	r0, r7
 8004a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <__swbuf_r+0x9c>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	d101      	bne.n	8004a66 <__swbuf_r+0x7a>
 8004a62:	68ac      	ldr	r4, [r5, #8]
 8004a64:	e7cf      	b.n	8004a06 <__swbuf_r+0x1a>
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <__swbuf_r+0xa0>)
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	bf08      	it	eq
 8004a6c:	68ec      	ldreq	r4, [r5, #12]
 8004a6e:	e7ca      	b.n	8004a06 <__swbuf_r+0x1a>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 f80c 	bl	8004a90 <__swsetup_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d0cb      	beq.n	8004a14 <__swbuf_r+0x28>
 8004a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a80:	e7ea      	b.n	8004a58 <__swbuf_r+0x6c>
 8004a82:	bf00      	nop
 8004a84:	08008218 	.word	0x08008218
 8004a88:	08008238 	.word	0x08008238
 8004a8c:	080081f8 	.word	0x080081f8

08004a90 <__swsetup_r>:
 8004a90:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <__swsetup_r+0xcc>)
 8004a92:	b570      	push	{r4, r5, r6, lr}
 8004a94:	681d      	ldr	r5, [r3, #0]
 8004a96:	4606      	mov	r6, r0
 8004a98:	460c      	mov	r4, r1
 8004a9a:	b125      	cbz	r5, 8004aa6 <__swsetup_r+0x16>
 8004a9c:	69ab      	ldr	r3, [r5, #24]
 8004a9e:	b913      	cbnz	r3, 8004aa6 <__swsetup_r+0x16>
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 fff5 	bl	8005a90 <__sinit>
 8004aa6:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <__swsetup_r+0xd0>)
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	d10f      	bne.n	8004acc <__swsetup_r+0x3c>
 8004aac:	686c      	ldr	r4, [r5, #4]
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab4:	0719      	lsls	r1, r3, #28
 8004ab6:	d42c      	bmi.n	8004b12 <__swsetup_r+0x82>
 8004ab8:	06dd      	lsls	r5, r3, #27
 8004aba:	d411      	bmi.n	8004ae0 <__swsetup_r+0x50>
 8004abc:	2309      	movs	r3, #9
 8004abe:	6033      	str	r3, [r6, #0]
 8004ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	81a3      	strh	r3, [r4, #12]
 8004aca:	e03e      	b.n	8004b4a <__swsetup_r+0xba>
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <__swsetup_r+0xd4>)
 8004ace:	429c      	cmp	r4, r3
 8004ad0:	d101      	bne.n	8004ad6 <__swsetup_r+0x46>
 8004ad2:	68ac      	ldr	r4, [r5, #8]
 8004ad4:	e7eb      	b.n	8004aae <__swsetup_r+0x1e>
 8004ad6:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <__swsetup_r+0xd8>)
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	bf08      	it	eq
 8004adc:	68ec      	ldreq	r4, [r5, #12]
 8004ade:	e7e6      	b.n	8004aae <__swsetup_r+0x1e>
 8004ae0:	0758      	lsls	r0, r3, #29
 8004ae2:	d512      	bpl.n	8004b0a <__swsetup_r+0x7a>
 8004ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ae6:	b141      	cbz	r1, 8004afa <__swsetup_r+0x6a>
 8004ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d002      	beq.n	8004af6 <__swsetup_r+0x66>
 8004af0:	4630      	mov	r0, r6
 8004af2:	f001 fc91 	bl	8006418 <_free_r>
 8004af6:	2300      	movs	r3, #0
 8004af8:	6363      	str	r3, [r4, #52]	; 0x34
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	2300      	movs	r3, #0
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	b94b      	cbnz	r3, 8004b2a <__swsetup_r+0x9a>
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b20:	d003      	beq.n	8004b2a <__swsetup_r+0x9a>
 8004b22:	4621      	mov	r1, r4
 8004b24:	4630      	mov	r0, r6
 8004b26:	f001 f87d 	bl	8005c24 <__smakebuf_r>
 8004b2a:	89a0      	ldrh	r0, [r4, #12]
 8004b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b30:	f010 0301 	ands.w	r3, r0, #1
 8004b34:	d00a      	beq.n	8004b4c <__swsetup_r+0xbc>
 8004b36:	2300      	movs	r3, #0
 8004b38:	60a3      	str	r3, [r4, #8]
 8004b3a:	6963      	ldr	r3, [r4, #20]
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	61a3      	str	r3, [r4, #24]
 8004b40:	6923      	ldr	r3, [r4, #16]
 8004b42:	b943      	cbnz	r3, 8004b56 <__swsetup_r+0xc6>
 8004b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b48:	d1ba      	bne.n	8004ac0 <__swsetup_r+0x30>
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	0781      	lsls	r1, r0, #30
 8004b4e:	bf58      	it	pl
 8004b50:	6963      	ldrpl	r3, [r4, #20]
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	e7f4      	b.n	8004b40 <__swsetup_r+0xb0>
 8004b56:	2000      	movs	r0, #0
 8004b58:	e7f7      	b.n	8004b4a <__swsetup_r+0xba>
 8004b5a:	bf00      	nop
 8004b5c:	20000054 	.word	0x20000054
 8004b60:	08008218 	.word	0x08008218
 8004b64:	08008238 	.word	0x08008238
 8004b68:	080081f8 	.word	0x080081f8

08004b6c <quorem>:
 8004b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	6903      	ldr	r3, [r0, #16]
 8004b72:	690c      	ldr	r4, [r1, #16]
 8004b74:	4607      	mov	r7, r0
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	f2c0 8082 	blt.w	8004c80 <quorem+0x114>
 8004b7c:	3c01      	subs	r4, #1
 8004b7e:	f100 0514 	add.w	r5, r0, #20
 8004b82:	f101 0814 	add.w	r8, r1, #20
 8004b86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b94:	3301      	adds	r3, #1
 8004b96:	429a      	cmp	r2, r3
 8004b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ba4:	d331      	bcc.n	8004c0a <quorem+0x9e>
 8004ba6:	f04f 0e00 	mov.w	lr, #0
 8004baa:	4640      	mov	r0, r8
 8004bac:	46ac      	mov	ip, r5
 8004bae:	46f2      	mov	sl, lr
 8004bb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bb4:	b293      	uxth	r3, r2
 8004bb6:	fb06 e303 	mla	r3, r6, r3, lr
 8004bba:	0c12      	lsrs	r2, r2, #16
 8004bbc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	fb06 e202 	mla	r2, r6, r2, lr
 8004bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8004bca:	f8dc a000 	ldr.w	sl, [ip]
 8004bce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bd2:	fa1f fa8a 	uxth.w	sl, sl
 8004bd6:	4453      	add	r3, sl
 8004bd8:	f8dc a000 	ldr.w	sl, [ip]
 8004bdc:	b292      	uxth	r2, r2
 8004bde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004be2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bec:	4581      	cmp	r9, r0
 8004bee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8004bf6:	d2db      	bcs.n	8004bb0 <quorem+0x44>
 8004bf8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bfc:	b92b      	cbnz	r3, 8004c0a <quorem+0x9e>
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	3b04      	subs	r3, #4
 8004c02:	429d      	cmp	r5, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	d32f      	bcc.n	8004c68 <quorem+0xfc>
 8004c08:	613c      	str	r4, [r7, #16]
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f001 faec 	bl	80061e8 <__mcmp>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	db25      	blt.n	8004c60 <quorem+0xf4>
 8004c14:	4628      	mov	r0, r5
 8004c16:	f04f 0c00 	mov.w	ip, #0
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004c20:	f8d0 e000 	ldr.w	lr, [r0]
 8004c24:	b28b      	uxth	r3, r1
 8004c26:	ebac 0303 	sub.w	r3, ip, r3
 8004c2a:	fa1f f28e 	uxth.w	r2, lr
 8004c2e:	4413      	add	r3, r2
 8004c30:	0c0a      	lsrs	r2, r1, #16
 8004c32:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c40:	45c1      	cmp	r9, r8
 8004c42:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c46:	f840 3b04 	str.w	r3, [r0], #4
 8004c4a:	d2e7      	bcs.n	8004c1c <quorem+0xb0>
 8004c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c54:	b922      	cbnz	r2, 8004c60 <quorem+0xf4>
 8004c56:	3b04      	subs	r3, #4
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	d30a      	bcc.n	8004c74 <quorem+0x108>
 8004c5e:	613c      	str	r4, [r7, #16]
 8004c60:	4630      	mov	r0, r6
 8004c62:	b003      	add	sp, #12
 8004c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	d1cb      	bne.n	8004c08 <quorem+0x9c>
 8004c70:	3c01      	subs	r4, #1
 8004c72:	e7c6      	b.n	8004c02 <quorem+0x96>
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	3b04      	subs	r3, #4
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d1f0      	bne.n	8004c5e <quorem+0xf2>
 8004c7c:	3c01      	subs	r4, #1
 8004c7e:	e7eb      	b.n	8004c58 <quorem+0xec>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e7ee      	b.n	8004c62 <quorem+0xf6>
 8004c84:	0000      	movs	r0, r0
	...

08004c88 <_dtoa_r>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	461f      	mov	r7, r3
 8004c90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c92:	b099      	sub	sp, #100	; 0x64
 8004c94:	4605      	mov	r5, r0
 8004c96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c9e:	b974      	cbnz	r4, 8004cbe <_dtoa_r+0x36>
 8004ca0:	2010      	movs	r0, #16
 8004ca2:	f000 ffff 	bl	8005ca4 <malloc>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6268      	str	r0, [r5, #36]	; 0x24
 8004caa:	b920      	cbnz	r0, 8004cb6 <_dtoa_r+0x2e>
 8004cac:	21ea      	movs	r1, #234	; 0xea
 8004cae:	4ba8      	ldr	r3, [pc, #672]	; (8004f50 <_dtoa_r+0x2c8>)
 8004cb0:	48a8      	ldr	r0, [pc, #672]	; (8004f54 <_dtoa_r+0x2cc>)
 8004cb2:	f001 ffa7 	bl	8006c04 <__assert_func>
 8004cb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cba:	6004      	str	r4, [r0, #0]
 8004cbc:	60c4      	str	r4, [r0, #12]
 8004cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	b151      	cbz	r1, 8004cda <_dtoa_r+0x52>
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4093      	lsls	r3, r2
 8004cca:	604a      	str	r2, [r1, #4]
 8004ccc:	608b      	str	r3, [r1, #8]
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f001 f84c 	bl	8005d6c <_Bfree>
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	1e3b      	subs	r3, r7, #0
 8004cdc:	bfaf      	iteee	ge
 8004cde:	2300      	movge	r3, #0
 8004ce0:	2201      	movlt	r2, #1
 8004ce2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	9305      	strlt	r3, [sp, #20]
 8004ce8:	bfa8      	it	ge
 8004cea:	f8c8 3000 	strge.w	r3, [r8]
 8004cee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cf2:	4b99      	ldr	r3, [pc, #612]	; (8004f58 <_dtoa_r+0x2d0>)
 8004cf4:	bfb8      	it	lt
 8004cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cfa:	ea33 0309 	bics.w	r3, r3, r9
 8004cfe:	d119      	bne.n	8004d34 <_dtoa_r+0xac>
 8004d00:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d0c:	4333      	orrs	r3, r6
 8004d0e:	f000 857f 	beq.w	8005810 <_dtoa_r+0xb88>
 8004d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d14:	b953      	cbnz	r3, 8004d2c <_dtoa_r+0xa4>
 8004d16:	4b91      	ldr	r3, [pc, #580]	; (8004f5c <_dtoa_r+0x2d4>)
 8004d18:	e022      	b.n	8004d60 <_dtoa_r+0xd8>
 8004d1a:	4b91      	ldr	r3, [pc, #580]	; (8004f60 <_dtoa_r+0x2d8>)
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	9803      	ldr	r0, [sp, #12]
 8004d26:	b019      	add	sp, #100	; 0x64
 8004d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2c:	4b8b      	ldr	r3, [pc, #556]	; (8004f5c <_dtoa_r+0x2d4>)
 8004d2e:	9303      	str	r3, [sp, #12]
 8004d30:	3303      	adds	r3, #3
 8004d32:	e7f5      	b.n	8004d20 <_dtoa_r+0x98>
 8004d34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	2300      	movs	r3, #0
 8004d44:	f7fb fe40 	bl	80009c8 <__aeabi_dcmpeq>
 8004d48:	4680      	mov	r8, r0
 8004d4a:	b158      	cbz	r0, 8004d64 <_dtoa_r+0xdc>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8558 	beq.w	800580a <_dtoa_r+0xb82>
 8004d5a:	4882      	ldr	r0, [pc, #520]	; (8004f64 <_dtoa_r+0x2dc>)
 8004d5c:	6018      	str	r0, [r3, #0]
 8004d5e:	1e43      	subs	r3, r0, #1
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	e7df      	b.n	8004d24 <_dtoa_r+0x9c>
 8004d64:	ab16      	add	r3, sp, #88	; 0x58
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	ab17      	add	r3, sp, #92	; 0x5c
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d72:	f001 fae1 	bl	8006338 <__d2b>
 8004d76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d7a:	4683      	mov	fp, r0
 8004d7c:	2c00      	cmp	r4, #0
 8004d7e:	d07f      	beq.n	8004e80 <_dtoa_r+0x1f8>
 8004d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4b72      	ldr	r3, [pc, #456]	; (8004f68 <_dtoa_r+0x2e0>)
 8004d9e:	f7fb f9f3 	bl	8000188 <__aeabi_dsub>
 8004da2:	a365      	add	r3, pc, #404	; (adr r3, 8004f38 <_dtoa_r+0x2b0>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fba6 	bl	80004f8 <__aeabi_dmul>
 8004dac:	a364      	add	r3, pc, #400	; (adr r3, 8004f40 <_dtoa_r+0x2b8>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb f9eb 	bl	800018c <__adddf3>
 8004db6:	4606      	mov	r6, r0
 8004db8:	4620      	mov	r0, r4
 8004dba:	460f      	mov	r7, r1
 8004dbc:	f7fb fb32 	bl	8000424 <__aeabi_i2d>
 8004dc0:	a361      	add	r3, pc, #388	; (adr r3, 8004f48 <_dtoa_r+0x2c0>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fb97 	bl	80004f8 <__aeabi_dmul>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	f7fb f9db 	bl	800018c <__adddf3>
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	460f      	mov	r7, r1
 8004dda:	f7fb fe3d 	bl	8000a58 <__aeabi_d2iz>
 8004dde:	2200      	movs	r2, #0
 8004de0:	4682      	mov	sl, r0
 8004de2:	2300      	movs	r3, #0
 8004de4:	4630      	mov	r0, r6
 8004de6:	4639      	mov	r1, r7
 8004de8:	f7fb fdf8 	bl	80009dc <__aeabi_dcmplt>
 8004dec:	b148      	cbz	r0, 8004e02 <_dtoa_r+0x17a>
 8004dee:	4650      	mov	r0, sl
 8004df0:	f7fb fb18 	bl	8000424 <__aeabi_i2d>
 8004df4:	4632      	mov	r2, r6
 8004df6:	463b      	mov	r3, r7
 8004df8:	f7fb fde6 	bl	80009c8 <__aeabi_dcmpeq>
 8004dfc:	b908      	cbnz	r0, 8004e02 <_dtoa_r+0x17a>
 8004dfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e02:	f1ba 0f16 	cmp.w	sl, #22
 8004e06:	d858      	bhi.n	8004eba <_dtoa_r+0x232>
 8004e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e0c:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <_dtoa_r+0x2e4>)
 8004e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fde1 	bl	80009dc <__aeabi_dcmplt>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d04f      	beq.n	8004ebe <_dtoa_r+0x236>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e28:	1b1c      	subs	r4, r3, r4
 8004e2a:	1e63      	subs	r3, r4, #1
 8004e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2e:	bf49      	itett	mi
 8004e30:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e34:	2300      	movpl	r3, #0
 8004e36:	9306      	strmi	r3, [sp, #24]
 8004e38:	2300      	movmi	r3, #0
 8004e3a:	bf54      	ite	pl
 8004e3c:	9306      	strpl	r3, [sp, #24]
 8004e3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e40:	f1ba 0f00 	cmp.w	sl, #0
 8004e44:	db3d      	blt.n	8004ec2 <_dtoa_r+0x23a>
 8004e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e4c:	4453      	add	r3, sl
 8004e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e50:	2300      	movs	r3, #0
 8004e52:	930a      	str	r3, [sp, #40]	; 0x28
 8004e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e56:	2b09      	cmp	r3, #9
 8004e58:	f200 808c 	bhi.w	8004f74 <_dtoa_r+0x2ec>
 8004e5c:	2b05      	cmp	r3, #5
 8004e5e:	bfc4      	itt	gt
 8004e60:	3b04      	subgt	r3, #4
 8004e62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e66:	bfc8      	it	gt
 8004e68:	2400      	movgt	r4, #0
 8004e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e6e:	bfd8      	it	le
 8004e70:	2401      	movle	r4, #1
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	f200 808a 	bhi.w	8004f8c <_dtoa_r+0x304>
 8004e78:	e8df f003 	tbb	[pc, r3]
 8004e7c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e84:	441c      	add	r4, r3
 8004e86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	bfc3      	ittte	gt
 8004e8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e96:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e9a:	f1c3 0320 	rsble	r3, r3, #32
 8004e9e:	bfc6      	itte	gt
 8004ea0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ea4:	4318      	orrgt	r0, r3
 8004ea6:	fa06 f003 	lslle.w	r0, r6, r3
 8004eaa:	f7fb faab 	bl	8000404 <__aeabi_ui2d>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004eb4:	3c01      	subs	r4, #1
 8004eb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004eb8:	e76f      	b.n	8004d9a <_dtoa_r+0x112>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7b2      	b.n	8004e24 <_dtoa_r+0x19c>
 8004ebe:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ec0:	e7b1      	b.n	8004e26 <_dtoa_r+0x19e>
 8004ec2:	9b06      	ldr	r3, [sp, #24]
 8004ec4:	eba3 030a 	sub.w	r3, r3, sl
 8004ec8:	9306      	str	r3, [sp, #24]
 8004eca:	f1ca 0300 	rsb	r3, sl, #0
 8004ece:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ed4:	e7be      	b.n	8004e54 <_dtoa_r+0x1cc>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dc58      	bgt.n	8004f92 <_dtoa_r+0x30a>
 8004ee0:	f04f 0901 	mov.w	r9, #1
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004eea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004eee:	2200      	movs	r2, #0
 8004ef0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ef2:	6042      	str	r2, [r0, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	f102 0614 	add.w	r6, r2, #20
 8004efa:	429e      	cmp	r6, r3
 8004efc:	6841      	ldr	r1, [r0, #4]
 8004efe:	d94e      	bls.n	8004f9e <_dtoa_r+0x316>
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 fef3 	bl	8005cec <_Balloc>
 8004f06:	9003      	str	r0, [sp, #12]
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d14c      	bne.n	8004fa6 <_dtoa_r+0x31e>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f12:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <_dtoa_r+0x2e8>)
 8004f14:	e6cc      	b.n	8004cb0 <_dtoa_r+0x28>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e7de      	b.n	8004ed8 <_dtoa_r+0x250>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f20:	eb0a 0903 	add.w	r9, sl, r3
 8004f24:	f109 0301 	add.w	r3, r9, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	9308      	str	r3, [sp, #32]
 8004f2c:	bfb8      	it	lt
 8004f2e:	2301      	movlt	r3, #1
 8004f30:	e7dd      	b.n	8004eee <_dtoa_r+0x266>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e7f2      	b.n	8004f1c <_dtoa_r+0x294>
 8004f36:	bf00      	nop
 8004f38:	636f4361 	.word	0x636f4361
 8004f3c:	3fd287a7 	.word	0x3fd287a7
 8004f40:	8b60c8b3 	.word	0x8b60c8b3
 8004f44:	3fc68a28 	.word	0x3fc68a28
 8004f48:	509f79fb 	.word	0x509f79fb
 8004f4c:	3fd34413 	.word	0x3fd34413
 8004f50:	08008172 	.word	0x08008172
 8004f54:	08008189 	.word	0x08008189
 8004f58:	7ff00000 	.word	0x7ff00000
 8004f5c:	0800816e 	.word	0x0800816e
 8004f60:	08008165 	.word	0x08008165
 8004f64:	08008041 	.word	0x08008041
 8004f68:	3ff80000 	.word	0x3ff80000
 8004f6c:	080082e0 	.word	0x080082e0
 8004f70:	080081e4 	.word	0x080081e4
 8004f74:	2401      	movs	r4, #1
 8004f76:	2300      	movs	r3, #0
 8004f78:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f7a:	9322      	str	r3, [sp, #136]	; 0x88
 8004f7c:	f04f 39ff 	mov.w	r9, #4294967295
 8004f80:	2200      	movs	r2, #0
 8004f82:	2312      	movs	r3, #18
 8004f84:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f88:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f8a:	e7b0      	b.n	8004eee <_dtoa_r+0x266>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f90:	e7f4      	b.n	8004f7c <_dtoa_r+0x2f4>
 8004f92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f96:	464b      	mov	r3, r9
 8004f98:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f9c:	e7a7      	b.n	8004eee <_dtoa_r+0x266>
 8004f9e:	3101      	adds	r1, #1
 8004fa0:	6041      	str	r1, [r0, #4]
 8004fa2:	0052      	lsls	r2, r2, #1
 8004fa4:	e7a7      	b.n	8004ef6 <_dtoa_r+0x26e>
 8004fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fa8:	9a03      	ldr	r2, [sp, #12]
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	9b08      	ldr	r3, [sp, #32]
 8004fae:	2b0e      	cmp	r3, #14
 8004fb0:	f200 80a8 	bhi.w	8005104 <_dtoa_r+0x47c>
 8004fb4:	2c00      	cmp	r4, #0
 8004fb6:	f000 80a5 	beq.w	8005104 <_dtoa_r+0x47c>
 8004fba:	f1ba 0f00 	cmp.w	sl, #0
 8004fbe:	dd34      	ble.n	800502a <_dtoa_r+0x3a2>
 8004fc0:	4a9a      	ldr	r2, [pc, #616]	; (800522c <_dtoa_r+0x5a4>)
 8004fc2:	f00a 030f 	and.w	r3, sl, #15
 8004fc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004fda:	d016      	beq.n	800500a <_dtoa_r+0x382>
 8004fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fe0:	4b93      	ldr	r3, [pc, #588]	; (8005230 <_dtoa_r+0x5a8>)
 8004fe2:	2703      	movs	r7, #3
 8004fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe8:	f7fb fbb0 	bl	800074c <__aeabi_ddiv>
 8004fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff0:	f004 040f 	and.w	r4, r4, #15
 8004ff4:	4e8e      	ldr	r6, [pc, #568]	; (8005230 <_dtoa_r+0x5a8>)
 8004ff6:	b954      	cbnz	r4, 800500e <_dtoa_r+0x386>
 8004ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005000:	f7fb fba4 	bl	800074c <__aeabi_ddiv>
 8005004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005008:	e029      	b.n	800505e <_dtoa_r+0x3d6>
 800500a:	2702      	movs	r7, #2
 800500c:	e7f2      	b.n	8004ff4 <_dtoa_r+0x36c>
 800500e:	07e1      	lsls	r1, r4, #31
 8005010:	d508      	bpl.n	8005024 <_dtoa_r+0x39c>
 8005012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005016:	e9d6 2300 	ldrd	r2, r3, [r6]
 800501a:	f7fb fa6d 	bl	80004f8 <__aeabi_dmul>
 800501e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005022:	3701      	adds	r7, #1
 8005024:	1064      	asrs	r4, r4, #1
 8005026:	3608      	adds	r6, #8
 8005028:	e7e5      	b.n	8004ff6 <_dtoa_r+0x36e>
 800502a:	f000 80a5 	beq.w	8005178 <_dtoa_r+0x4f0>
 800502e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005032:	f1ca 0400 	rsb	r4, sl, #0
 8005036:	4b7d      	ldr	r3, [pc, #500]	; (800522c <_dtoa_r+0x5a4>)
 8005038:	f004 020f 	and.w	r2, r4, #15
 800503c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fa58 	bl	80004f8 <__aeabi_dmul>
 8005048:	2702      	movs	r7, #2
 800504a:	2300      	movs	r3, #0
 800504c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005050:	4e77      	ldr	r6, [pc, #476]	; (8005230 <_dtoa_r+0x5a8>)
 8005052:	1124      	asrs	r4, r4, #4
 8005054:	2c00      	cmp	r4, #0
 8005056:	f040 8084 	bne.w	8005162 <_dtoa_r+0x4da>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1d2      	bne.n	8005004 <_dtoa_r+0x37c>
 800505e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 808b 	beq.w	800517c <_dtoa_r+0x4f4>
 8005066:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800506a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800506e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005072:	2200      	movs	r2, #0
 8005074:	4b6f      	ldr	r3, [pc, #444]	; (8005234 <_dtoa_r+0x5ac>)
 8005076:	f7fb fcb1 	bl	80009dc <__aeabi_dcmplt>
 800507a:	2800      	cmp	r0, #0
 800507c:	d07e      	beq.n	800517c <_dtoa_r+0x4f4>
 800507e:	9b08      	ldr	r3, [sp, #32]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d07b      	beq.n	800517c <_dtoa_r+0x4f4>
 8005084:	f1b9 0f00 	cmp.w	r9, #0
 8005088:	dd38      	ble.n	80050fc <_dtoa_r+0x474>
 800508a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800508e:	2200      	movs	r2, #0
 8005090:	4b69      	ldr	r3, [pc, #420]	; (8005238 <_dtoa_r+0x5b0>)
 8005092:	f7fb fa31 	bl	80004f8 <__aeabi_dmul>
 8005096:	464c      	mov	r4, r9
 8005098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800509c:	f10a 38ff 	add.w	r8, sl, #4294967295
 80050a0:	3701      	adds	r7, #1
 80050a2:	4638      	mov	r0, r7
 80050a4:	f7fb f9be 	bl	8000424 <__aeabi_i2d>
 80050a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ac:	f7fb fa24 	bl	80004f8 <__aeabi_dmul>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b62      	ldr	r3, [pc, #392]	; (800523c <_dtoa_r+0x5b4>)
 80050b4:	f7fb f86a 	bl	800018c <__adddf3>
 80050b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050c0:	9611      	str	r6, [sp, #68]	; 0x44
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	d15d      	bne.n	8005182 <_dtoa_r+0x4fa>
 80050c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ca:	2200      	movs	r2, #0
 80050cc:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <_dtoa_r+0x5b8>)
 80050ce:	f7fb f85b 	bl	8000188 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050da:	4633      	mov	r3, r6
 80050dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050de:	f7fb fc9b 	bl	8000a18 <__aeabi_dcmpgt>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f040 829c 	bne.w	8005620 <_dtoa_r+0x998>
 80050e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050f2:	f7fb fc73 	bl	80009dc <__aeabi_dcmplt>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	f040 8290 	bne.w	800561c <_dtoa_r+0x994>
 80050fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005100:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005106:	2b00      	cmp	r3, #0
 8005108:	f2c0 8152 	blt.w	80053b0 <_dtoa_r+0x728>
 800510c:	f1ba 0f0e 	cmp.w	sl, #14
 8005110:	f300 814e 	bgt.w	80053b0 <_dtoa_r+0x728>
 8005114:	4b45      	ldr	r3, [pc, #276]	; (800522c <_dtoa_r+0x5a4>)
 8005116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800511a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800511e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005124:	2b00      	cmp	r3, #0
 8005126:	f280 80db 	bge.w	80052e0 <_dtoa_r+0x658>
 800512a:	9b08      	ldr	r3, [sp, #32]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f300 80d7 	bgt.w	80052e0 <_dtoa_r+0x658>
 8005132:	f040 8272 	bne.w	800561a <_dtoa_r+0x992>
 8005136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800513a:	2200      	movs	r2, #0
 800513c:	4b40      	ldr	r3, [pc, #256]	; (8005240 <_dtoa_r+0x5b8>)
 800513e:	f7fb f9db 	bl	80004f8 <__aeabi_dmul>
 8005142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005146:	f7fb fc5d 	bl	8000a04 <__aeabi_dcmpge>
 800514a:	9c08      	ldr	r4, [sp, #32]
 800514c:	4626      	mov	r6, r4
 800514e:	2800      	cmp	r0, #0
 8005150:	f040 8248 	bne.w	80055e4 <_dtoa_r+0x95c>
 8005154:	2331      	movs	r3, #49	; 0x31
 8005156:	9f03      	ldr	r7, [sp, #12]
 8005158:	f10a 0a01 	add.w	sl, sl, #1
 800515c:	f807 3b01 	strb.w	r3, [r7], #1
 8005160:	e244      	b.n	80055ec <_dtoa_r+0x964>
 8005162:	07e2      	lsls	r2, r4, #31
 8005164:	d505      	bpl.n	8005172 <_dtoa_r+0x4ea>
 8005166:	e9d6 2300 	ldrd	r2, r3, [r6]
 800516a:	f7fb f9c5 	bl	80004f8 <__aeabi_dmul>
 800516e:	2301      	movs	r3, #1
 8005170:	3701      	adds	r7, #1
 8005172:	1064      	asrs	r4, r4, #1
 8005174:	3608      	adds	r6, #8
 8005176:	e76d      	b.n	8005054 <_dtoa_r+0x3cc>
 8005178:	2702      	movs	r7, #2
 800517a:	e770      	b.n	800505e <_dtoa_r+0x3d6>
 800517c:	46d0      	mov	r8, sl
 800517e:	9c08      	ldr	r4, [sp, #32]
 8005180:	e78f      	b.n	80050a2 <_dtoa_r+0x41a>
 8005182:	9903      	ldr	r1, [sp, #12]
 8005184:	4b29      	ldr	r3, [pc, #164]	; (800522c <_dtoa_r+0x5a4>)
 8005186:	4421      	add	r1, r4
 8005188:	9112      	str	r1, [sp, #72]	; 0x48
 800518a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800518c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005190:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005194:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005198:	2900      	cmp	r1, #0
 800519a:	d055      	beq.n	8005248 <_dtoa_r+0x5c0>
 800519c:	2000      	movs	r0, #0
 800519e:	4929      	ldr	r1, [pc, #164]	; (8005244 <_dtoa_r+0x5bc>)
 80051a0:	f7fb fad4 	bl	800074c <__aeabi_ddiv>
 80051a4:	463b      	mov	r3, r7
 80051a6:	4632      	mov	r2, r6
 80051a8:	f7fa ffee 	bl	8000188 <__aeabi_dsub>
 80051ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051b0:	9f03      	ldr	r7, [sp, #12]
 80051b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b6:	f7fb fc4f 	bl	8000a58 <__aeabi_d2iz>
 80051ba:	4604      	mov	r4, r0
 80051bc:	f7fb f932 	bl	8000424 <__aeabi_i2d>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051c8:	f7fa ffde 	bl	8000188 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	3430      	adds	r4, #48	; 0x30
 80051d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051da:	f807 4b01 	strb.w	r4, [r7], #1
 80051de:	f7fb fbfd 	bl	80009dc <__aeabi_dcmplt>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d174      	bne.n	80052d0 <_dtoa_r+0x648>
 80051e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ea:	2000      	movs	r0, #0
 80051ec:	4911      	ldr	r1, [pc, #68]	; (8005234 <_dtoa_r+0x5ac>)
 80051ee:	f7fa ffcb 	bl	8000188 <__aeabi_dsub>
 80051f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051f6:	f7fb fbf1 	bl	80009dc <__aeabi_dcmplt>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f040 80b7 	bne.w	800536e <_dtoa_r+0x6e6>
 8005200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005202:	429f      	cmp	r7, r3
 8005204:	f43f af7a 	beq.w	80050fc <_dtoa_r+0x474>
 8005208:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800520c:	2200      	movs	r2, #0
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <_dtoa_r+0x5b0>)
 8005210:	f7fb f972 	bl	80004f8 <__aeabi_dmul>
 8005214:	2200      	movs	r2, #0
 8005216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800521a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <_dtoa_r+0x5b0>)
 8005220:	f7fb f96a 	bl	80004f8 <__aeabi_dmul>
 8005224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005228:	e7c3      	b.n	80051b2 <_dtoa_r+0x52a>
 800522a:	bf00      	nop
 800522c:	080082e0 	.word	0x080082e0
 8005230:	080082b8 	.word	0x080082b8
 8005234:	3ff00000 	.word	0x3ff00000
 8005238:	40240000 	.word	0x40240000
 800523c:	401c0000 	.word	0x401c0000
 8005240:	40140000 	.word	0x40140000
 8005244:	3fe00000 	.word	0x3fe00000
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	f7fb f954 	bl	80004f8 <__aeabi_dmul>
 8005250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005252:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005256:	9c03      	ldr	r4, [sp, #12]
 8005258:	9314      	str	r3, [sp, #80]	; 0x50
 800525a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800525e:	f7fb fbfb 	bl	8000a58 <__aeabi_d2iz>
 8005262:	9015      	str	r0, [sp, #84]	; 0x54
 8005264:	f7fb f8de 	bl	8000424 <__aeabi_i2d>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005270:	f7fa ff8a 	bl	8000188 <__aeabi_dsub>
 8005274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005276:	4606      	mov	r6, r0
 8005278:	3330      	adds	r3, #48	; 0x30
 800527a:	f804 3b01 	strb.w	r3, [r4], #1
 800527e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005280:	460f      	mov	r7, r1
 8005282:	429c      	cmp	r4, r3
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	d124      	bne.n	80052d4 <_dtoa_r+0x64c>
 800528a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800528e:	4bb0      	ldr	r3, [pc, #704]	; (8005550 <_dtoa_r+0x8c8>)
 8005290:	f7fa ff7c 	bl	800018c <__adddf3>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4630      	mov	r0, r6
 800529a:	4639      	mov	r1, r7
 800529c:	f7fb fbbc 	bl	8000a18 <__aeabi_dcmpgt>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d163      	bne.n	800536c <_dtoa_r+0x6e4>
 80052a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052a8:	2000      	movs	r0, #0
 80052aa:	49a9      	ldr	r1, [pc, #676]	; (8005550 <_dtoa_r+0x8c8>)
 80052ac:	f7fa ff6c 	bl	8000188 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4630      	mov	r0, r6
 80052b6:	4639      	mov	r1, r7
 80052b8:	f7fb fb90 	bl	80009dc <__aeabi_dcmplt>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f43f af1d 	beq.w	80050fc <_dtoa_r+0x474>
 80052c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052c4:	1e7b      	subs	r3, r7, #1
 80052c6:	9314      	str	r3, [sp, #80]	; 0x50
 80052c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d0f8      	beq.n	80052c2 <_dtoa_r+0x63a>
 80052d0:	46c2      	mov	sl, r8
 80052d2:	e03b      	b.n	800534c <_dtoa_r+0x6c4>
 80052d4:	4b9f      	ldr	r3, [pc, #636]	; (8005554 <_dtoa_r+0x8cc>)
 80052d6:	f7fb f90f 	bl	80004f8 <__aeabi_dmul>
 80052da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052de:	e7bc      	b.n	800525a <_dtoa_r+0x5d2>
 80052e0:	9f03      	ldr	r7, [sp, #12]
 80052e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	f7fb fa2d 	bl	800074c <__aeabi_ddiv>
 80052f2:	f7fb fbb1 	bl	8000a58 <__aeabi_d2iz>
 80052f6:	4604      	mov	r4, r0
 80052f8:	f7fb f894 	bl	8000424 <__aeabi_i2d>
 80052fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005300:	f7fb f8fa 	bl	80004f8 <__aeabi_dmul>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4640      	mov	r0, r8
 800530a:	4649      	mov	r1, r9
 800530c:	f7fa ff3c 	bl	8000188 <__aeabi_dsub>
 8005310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005314:	f807 6b01 	strb.w	r6, [r7], #1
 8005318:	9e03      	ldr	r6, [sp, #12]
 800531a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800531e:	1bbe      	subs	r6, r7, r6
 8005320:	45b4      	cmp	ip, r6
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	d136      	bne.n	8005396 <_dtoa_r+0x70e>
 8005328:	f7fa ff30 	bl	800018c <__adddf3>
 800532c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005330:	4680      	mov	r8, r0
 8005332:	4689      	mov	r9, r1
 8005334:	f7fb fb70 	bl	8000a18 <__aeabi_dcmpgt>
 8005338:	bb58      	cbnz	r0, 8005392 <_dtoa_r+0x70a>
 800533a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800533e:	4640      	mov	r0, r8
 8005340:	4649      	mov	r1, r9
 8005342:	f7fb fb41 	bl	80009c8 <__aeabi_dcmpeq>
 8005346:	b108      	cbz	r0, 800534c <_dtoa_r+0x6c4>
 8005348:	07e1      	lsls	r1, r4, #31
 800534a:	d422      	bmi.n	8005392 <_dtoa_r+0x70a>
 800534c:	4628      	mov	r0, r5
 800534e:	4659      	mov	r1, fp
 8005350:	f000 fd0c 	bl	8005d6c <_Bfree>
 8005354:	2300      	movs	r3, #0
 8005356:	703b      	strb	r3, [r7, #0]
 8005358:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800535a:	f10a 0001 	add.w	r0, sl, #1
 800535e:	6018      	str	r0, [r3, #0]
 8005360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005362:	2b00      	cmp	r3, #0
 8005364:	f43f acde 	beq.w	8004d24 <_dtoa_r+0x9c>
 8005368:	601f      	str	r7, [r3, #0]
 800536a:	e4db      	b.n	8004d24 <_dtoa_r+0x9c>
 800536c:	4627      	mov	r7, r4
 800536e:	463b      	mov	r3, r7
 8005370:	461f      	mov	r7, r3
 8005372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005376:	2a39      	cmp	r2, #57	; 0x39
 8005378:	d107      	bne.n	800538a <_dtoa_r+0x702>
 800537a:	9a03      	ldr	r2, [sp, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d1f7      	bne.n	8005370 <_dtoa_r+0x6e8>
 8005380:	2230      	movs	r2, #48	; 0x30
 8005382:	9903      	ldr	r1, [sp, #12]
 8005384:	f108 0801 	add.w	r8, r8, #1
 8005388:	700a      	strb	r2, [r1, #0]
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	3201      	adds	r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e79e      	b.n	80052d0 <_dtoa_r+0x648>
 8005392:	46d0      	mov	r8, sl
 8005394:	e7eb      	b.n	800536e <_dtoa_r+0x6e6>
 8005396:	2200      	movs	r2, #0
 8005398:	4b6e      	ldr	r3, [pc, #440]	; (8005554 <_dtoa_r+0x8cc>)
 800539a:	f7fb f8ad 	bl	80004f8 <__aeabi_dmul>
 800539e:	2200      	movs	r2, #0
 80053a0:	2300      	movs	r3, #0
 80053a2:	4680      	mov	r8, r0
 80053a4:	4689      	mov	r9, r1
 80053a6:	f7fb fb0f 	bl	80009c8 <__aeabi_dcmpeq>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d09b      	beq.n	80052e6 <_dtoa_r+0x65e>
 80053ae:	e7cd      	b.n	800534c <_dtoa_r+0x6c4>
 80053b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	f000 80d0 	beq.w	8005558 <_dtoa_r+0x8d0>
 80053b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053ba:	2a01      	cmp	r2, #1
 80053bc:	f300 80ae 	bgt.w	800551c <_dtoa_r+0x894>
 80053c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	f000 80a6 	beq.w	8005514 <_dtoa_r+0x88c>
 80053c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053ce:	9f06      	ldr	r7, [sp, #24]
 80053d0:	9a06      	ldr	r2, [sp, #24]
 80053d2:	2101      	movs	r1, #1
 80053d4:	441a      	add	r2, r3
 80053d6:	9206      	str	r2, [sp, #24]
 80053d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053da:	4628      	mov	r0, r5
 80053dc:	441a      	add	r2, r3
 80053de:	9209      	str	r2, [sp, #36]	; 0x24
 80053e0:	f000 fd7a 	bl	8005ed8 <__i2b>
 80053e4:	4606      	mov	r6, r0
 80053e6:	2f00      	cmp	r7, #0
 80053e8:	dd0c      	ble.n	8005404 <_dtoa_r+0x77c>
 80053ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dd09      	ble.n	8005404 <_dtoa_r+0x77c>
 80053f0:	42bb      	cmp	r3, r7
 80053f2:	bfa8      	it	ge
 80053f4:	463b      	movge	r3, r7
 80053f6:	9a06      	ldr	r2, [sp, #24]
 80053f8:	1aff      	subs	r7, r7, r3
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	9206      	str	r2, [sp, #24]
 80053fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	9309      	str	r3, [sp, #36]	; 0x24
 8005404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005406:	b1f3      	cbz	r3, 8005446 <_dtoa_r+0x7be>
 8005408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80a8 	beq.w	8005560 <_dtoa_r+0x8d8>
 8005410:	2c00      	cmp	r4, #0
 8005412:	dd10      	ble.n	8005436 <_dtoa_r+0x7ae>
 8005414:	4631      	mov	r1, r6
 8005416:	4622      	mov	r2, r4
 8005418:	4628      	mov	r0, r5
 800541a:	f000 fe1b 	bl	8006054 <__pow5mult>
 800541e:	465a      	mov	r2, fp
 8005420:	4601      	mov	r1, r0
 8005422:	4606      	mov	r6, r0
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fd6d 	bl	8005f04 <__multiply>
 800542a:	4680      	mov	r8, r0
 800542c:	4659      	mov	r1, fp
 800542e:	4628      	mov	r0, r5
 8005430:	f000 fc9c 	bl	8005d6c <_Bfree>
 8005434:	46c3      	mov	fp, r8
 8005436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005438:	1b1a      	subs	r2, r3, r4
 800543a:	d004      	beq.n	8005446 <_dtoa_r+0x7be>
 800543c:	4659      	mov	r1, fp
 800543e:	4628      	mov	r0, r5
 8005440:	f000 fe08 	bl	8006054 <__pow5mult>
 8005444:	4683      	mov	fp, r0
 8005446:	2101      	movs	r1, #1
 8005448:	4628      	mov	r0, r5
 800544a:	f000 fd45 	bl	8005ed8 <__i2b>
 800544e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005450:	4604      	mov	r4, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f340 8086 	ble.w	8005564 <_dtoa_r+0x8dc>
 8005458:	461a      	mov	r2, r3
 800545a:	4601      	mov	r1, r0
 800545c:	4628      	mov	r0, r5
 800545e:	f000 fdf9 	bl	8006054 <__pow5mult>
 8005462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005464:	4604      	mov	r4, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	dd7f      	ble.n	800556a <_dtoa_r+0x8e2>
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005474:	6918      	ldr	r0, [r3, #16]
 8005476:	f000 fce1 	bl	8005e3c <__hi0bits>
 800547a:	f1c0 0020 	rsb	r0, r0, #32
 800547e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005480:	4418      	add	r0, r3
 8005482:	f010 001f 	ands.w	r0, r0, #31
 8005486:	f000 8092 	beq.w	80055ae <_dtoa_r+0x926>
 800548a:	f1c0 0320 	rsb	r3, r0, #32
 800548e:	2b04      	cmp	r3, #4
 8005490:	f340 808a 	ble.w	80055a8 <_dtoa_r+0x920>
 8005494:	f1c0 001c 	rsb	r0, r0, #28
 8005498:	9b06      	ldr	r3, [sp, #24]
 800549a:	4407      	add	r7, r0
 800549c:	4403      	add	r3, r0
 800549e:	9306      	str	r3, [sp, #24]
 80054a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a2:	4403      	add	r3, r0
 80054a4:	9309      	str	r3, [sp, #36]	; 0x24
 80054a6:	9b06      	ldr	r3, [sp, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	dd05      	ble.n	80054b8 <_dtoa_r+0x830>
 80054ac:	4659      	mov	r1, fp
 80054ae:	461a      	mov	r2, r3
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 fe29 	bl	8006108 <__lshift>
 80054b6:	4683      	mov	fp, r0
 80054b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dd05      	ble.n	80054ca <_dtoa_r+0x842>
 80054be:	4621      	mov	r1, r4
 80054c0:	461a      	mov	r2, r3
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fe20 	bl	8006108 <__lshift>
 80054c8:	4604      	mov	r4, r0
 80054ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d070      	beq.n	80055b2 <_dtoa_r+0x92a>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4658      	mov	r0, fp
 80054d4:	f000 fe88 	bl	80061e8 <__mcmp>
 80054d8:	2800      	cmp	r0, #0
 80054da:	da6a      	bge.n	80055b2 <_dtoa_r+0x92a>
 80054dc:	2300      	movs	r3, #0
 80054de:	4659      	mov	r1, fp
 80054e0:	220a      	movs	r2, #10
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fc64 	bl	8005db0 <__multadd>
 80054e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ea:	4683      	mov	fp, r0
 80054ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8194 	beq.w	800581e <_dtoa_r+0xb96>
 80054f6:	4631      	mov	r1, r6
 80054f8:	2300      	movs	r3, #0
 80054fa:	220a      	movs	r2, #10
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fc57 	bl	8005db0 <__multadd>
 8005502:	f1b9 0f00 	cmp.w	r9, #0
 8005506:	4606      	mov	r6, r0
 8005508:	f300 8093 	bgt.w	8005632 <_dtoa_r+0x9aa>
 800550c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800550e:	2b02      	cmp	r3, #2
 8005510:	dc57      	bgt.n	80055c2 <_dtoa_r+0x93a>
 8005512:	e08e      	b.n	8005632 <_dtoa_r+0x9aa>
 8005514:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800551a:	e757      	b.n	80053cc <_dtoa_r+0x744>
 800551c:	9b08      	ldr	r3, [sp, #32]
 800551e:	1e5c      	subs	r4, r3, #1
 8005520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005522:	42a3      	cmp	r3, r4
 8005524:	bfb7      	itett	lt
 8005526:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005528:	1b1c      	subge	r4, r3, r4
 800552a:	1ae2      	sublt	r2, r4, r3
 800552c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800552e:	bfbe      	ittt	lt
 8005530:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005532:	189b      	addlt	r3, r3, r2
 8005534:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005536:	9b08      	ldr	r3, [sp, #32]
 8005538:	bfb8      	it	lt
 800553a:	2400      	movlt	r4, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfbb      	ittet	lt
 8005540:	9b06      	ldrlt	r3, [sp, #24]
 8005542:	9a08      	ldrlt	r2, [sp, #32]
 8005544:	9f06      	ldrge	r7, [sp, #24]
 8005546:	1a9f      	sublt	r7, r3, r2
 8005548:	bfac      	ite	ge
 800554a:	9b08      	ldrge	r3, [sp, #32]
 800554c:	2300      	movlt	r3, #0
 800554e:	e73f      	b.n	80053d0 <_dtoa_r+0x748>
 8005550:	3fe00000 	.word	0x3fe00000
 8005554:	40240000 	.word	0x40240000
 8005558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800555a:	9f06      	ldr	r7, [sp, #24]
 800555c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800555e:	e742      	b.n	80053e6 <_dtoa_r+0x75e>
 8005560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005562:	e76b      	b.n	800543c <_dtoa_r+0x7b4>
 8005564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005566:	2b01      	cmp	r3, #1
 8005568:	dc19      	bgt.n	800559e <_dtoa_r+0x916>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	b9bb      	cbnz	r3, 800559e <_dtoa_r+0x916>
 800556e:	9b05      	ldr	r3, [sp, #20]
 8005570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005574:	b99b      	cbnz	r3, 800559e <_dtoa_r+0x916>
 8005576:	9b05      	ldr	r3, [sp, #20]
 8005578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800557c:	0d1b      	lsrs	r3, r3, #20
 800557e:	051b      	lsls	r3, r3, #20
 8005580:	b183      	cbz	r3, 80055a4 <_dtoa_r+0x91c>
 8005582:	f04f 0801 	mov.w	r8, #1
 8005586:	9b06      	ldr	r3, [sp, #24]
 8005588:	3301      	adds	r3, #1
 800558a:	9306      	str	r3, [sp, #24]
 800558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558e:	3301      	adds	r3, #1
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	f47f af6a 	bne.w	800546e <_dtoa_r+0x7e6>
 800559a:	2001      	movs	r0, #1
 800559c:	e76f      	b.n	800547e <_dtoa_r+0x7f6>
 800559e:	f04f 0800 	mov.w	r8, #0
 80055a2:	e7f6      	b.n	8005592 <_dtoa_r+0x90a>
 80055a4:	4698      	mov	r8, r3
 80055a6:	e7f4      	b.n	8005592 <_dtoa_r+0x90a>
 80055a8:	f43f af7d 	beq.w	80054a6 <_dtoa_r+0x81e>
 80055ac:	4618      	mov	r0, r3
 80055ae:	301c      	adds	r0, #28
 80055b0:	e772      	b.n	8005498 <_dtoa_r+0x810>
 80055b2:	9b08      	ldr	r3, [sp, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dc36      	bgt.n	8005626 <_dtoa_r+0x99e>
 80055b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	dd33      	ble.n	8005626 <_dtoa_r+0x99e>
 80055be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055c2:	f1b9 0f00 	cmp.w	r9, #0
 80055c6:	d10d      	bne.n	80055e4 <_dtoa_r+0x95c>
 80055c8:	4621      	mov	r1, r4
 80055ca:	464b      	mov	r3, r9
 80055cc:	2205      	movs	r2, #5
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 fbee 	bl	8005db0 <__multadd>
 80055d4:	4601      	mov	r1, r0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4658      	mov	r0, fp
 80055da:	f000 fe05 	bl	80061e8 <__mcmp>
 80055de:	2800      	cmp	r0, #0
 80055e0:	f73f adb8 	bgt.w	8005154 <_dtoa_r+0x4cc>
 80055e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055e6:	9f03      	ldr	r7, [sp, #12]
 80055e8:	ea6f 0a03 	mvn.w	sl, r3
 80055ec:	f04f 0800 	mov.w	r8, #0
 80055f0:	4621      	mov	r1, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 fbba 	bl	8005d6c <_Bfree>
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	f43f aea7 	beq.w	800534c <_dtoa_r+0x6c4>
 80055fe:	f1b8 0f00 	cmp.w	r8, #0
 8005602:	d005      	beq.n	8005610 <_dtoa_r+0x988>
 8005604:	45b0      	cmp	r8, r6
 8005606:	d003      	beq.n	8005610 <_dtoa_r+0x988>
 8005608:	4641      	mov	r1, r8
 800560a:	4628      	mov	r0, r5
 800560c:	f000 fbae 	bl	8005d6c <_Bfree>
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	f000 fbaa 	bl	8005d6c <_Bfree>
 8005618:	e698      	b.n	800534c <_dtoa_r+0x6c4>
 800561a:	2400      	movs	r4, #0
 800561c:	4626      	mov	r6, r4
 800561e:	e7e1      	b.n	80055e4 <_dtoa_r+0x95c>
 8005620:	46c2      	mov	sl, r8
 8005622:	4626      	mov	r6, r4
 8005624:	e596      	b.n	8005154 <_dtoa_r+0x4cc>
 8005626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80fd 	beq.w	800582c <_dtoa_r+0xba4>
 8005632:	2f00      	cmp	r7, #0
 8005634:	dd05      	ble.n	8005642 <_dtoa_r+0x9ba>
 8005636:	4631      	mov	r1, r6
 8005638:	463a      	mov	r2, r7
 800563a:	4628      	mov	r0, r5
 800563c:	f000 fd64 	bl	8006108 <__lshift>
 8005640:	4606      	mov	r6, r0
 8005642:	f1b8 0f00 	cmp.w	r8, #0
 8005646:	d05c      	beq.n	8005702 <_dtoa_r+0xa7a>
 8005648:	4628      	mov	r0, r5
 800564a:	6871      	ldr	r1, [r6, #4]
 800564c:	f000 fb4e 	bl	8005cec <_Balloc>
 8005650:	4607      	mov	r7, r0
 8005652:	b928      	cbnz	r0, 8005660 <_dtoa_r+0x9d8>
 8005654:	4602      	mov	r2, r0
 8005656:	f240 21ea 	movw	r1, #746	; 0x2ea
 800565a:	4b7f      	ldr	r3, [pc, #508]	; (8005858 <_dtoa_r+0xbd0>)
 800565c:	f7ff bb28 	b.w	8004cb0 <_dtoa_r+0x28>
 8005660:	6932      	ldr	r2, [r6, #16]
 8005662:	f106 010c 	add.w	r1, r6, #12
 8005666:	3202      	adds	r2, #2
 8005668:	0092      	lsls	r2, r2, #2
 800566a:	300c      	adds	r0, #12
 800566c:	f000 fb30 	bl	8005cd0 <memcpy>
 8005670:	2201      	movs	r2, #1
 8005672:	4639      	mov	r1, r7
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fd47 	bl	8006108 <__lshift>
 800567a:	46b0      	mov	r8, r6
 800567c:	4606      	mov	r6, r0
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	9308      	str	r3, [sp, #32]
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	444b      	add	r3, r9
 8005688:	930a      	str	r3, [sp, #40]	; 0x28
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	9309      	str	r3, [sp, #36]	; 0x24
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	4621      	mov	r1, r4
 8005696:	3b01      	subs	r3, #1
 8005698:	4658      	mov	r0, fp
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	f7ff fa66 	bl	8004b6c <quorem>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4641      	mov	r1, r8
 80056a4:	3330      	adds	r3, #48	; 0x30
 80056a6:	9006      	str	r0, [sp, #24]
 80056a8:	4658      	mov	r0, fp
 80056aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ac:	f000 fd9c 	bl	80061e8 <__mcmp>
 80056b0:	4632      	mov	r2, r6
 80056b2:	4681      	mov	r9, r0
 80056b4:	4621      	mov	r1, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fdb2 	bl	8006220 <__mdiff>
 80056bc:	68c2      	ldr	r2, [r0, #12]
 80056be:	4607      	mov	r7, r0
 80056c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c2:	bb02      	cbnz	r2, 8005706 <_dtoa_r+0xa7e>
 80056c4:	4601      	mov	r1, r0
 80056c6:	4658      	mov	r0, fp
 80056c8:	f000 fd8e 	bl	80061e8 <__mcmp>
 80056cc:	4602      	mov	r2, r0
 80056ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d0:	4639      	mov	r1, r7
 80056d2:	4628      	mov	r0, r5
 80056d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056d8:	f000 fb48 	bl	8005d6c <_Bfree>
 80056dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e0:	9f08      	ldr	r7, [sp, #32]
 80056e2:	ea43 0102 	orr.w	r1, r3, r2
 80056e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e8:	430b      	orrs	r3, r1
 80056ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ec:	d10d      	bne.n	800570a <_dtoa_r+0xa82>
 80056ee:	2b39      	cmp	r3, #57	; 0x39
 80056f0:	d029      	beq.n	8005746 <_dtoa_r+0xabe>
 80056f2:	f1b9 0f00 	cmp.w	r9, #0
 80056f6:	dd01      	ble.n	80056fc <_dtoa_r+0xa74>
 80056f8:	9b06      	ldr	r3, [sp, #24]
 80056fa:	3331      	adds	r3, #49	; 0x31
 80056fc:	9a04      	ldr	r2, [sp, #16]
 80056fe:	7013      	strb	r3, [r2, #0]
 8005700:	e776      	b.n	80055f0 <_dtoa_r+0x968>
 8005702:	4630      	mov	r0, r6
 8005704:	e7b9      	b.n	800567a <_dtoa_r+0x9f2>
 8005706:	2201      	movs	r2, #1
 8005708:	e7e2      	b.n	80056d0 <_dtoa_r+0xa48>
 800570a:	f1b9 0f00 	cmp.w	r9, #0
 800570e:	db06      	blt.n	800571e <_dtoa_r+0xa96>
 8005710:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005712:	ea41 0909 	orr.w	r9, r1, r9
 8005716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005718:	ea59 0101 	orrs.w	r1, r9, r1
 800571c:	d120      	bne.n	8005760 <_dtoa_r+0xad8>
 800571e:	2a00      	cmp	r2, #0
 8005720:	ddec      	ble.n	80056fc <_dtoa_r+0xa74>
 8005722:	4659      	mov	r1, fp
 8005724:	2201      	movs	r2, #1
 8005726:	4628      	mov	r0, r5
 8005728:	9308      	str	r3, [sp, #32]
 800572a:	f000 fced 	bl	8006108 <__lshift>
 800572e:	4621      	mov	r1, r4
 8005730:	4683      	mov	fp, r0
 8005732:	f000 fd59 	bl	80061e8 <__mcmp>
 8005736:	2800      	cmp	r0, #0
 8005738:	9b08      	ldr	r3, [sp, #32]
 800573a:	dc02      	bgt.n	8005742 <_dtoa_r+0xaba>
 800573c:	d1de      	bne.n	80056fc <_dtoa_r+0xa74>
 800573e:	07da      	lsls	r2, r3, #31
 8005740:	d5dc      	bpl.n	80056fc <_dtoa_r+0xa74>
 8005742:	2b39      	cmp	r3, #57	; 0x39
 8005744:	d1d8      	bne.n	80056f8 <_dtoa_r+0xa70>
 8005746:	2339      	movs	r3, #57	; 0x39
 8005748:	9a04      	ldr	r2, [sp, #16]
 800574a:	7013      	strb	r3, [r2, #0]
 800574c:	463b      	mov	r3, r7
 800574e:	461f      	mov	r7, r3
 8005750:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005754:	3b01      	subs	r3, #1
 8005756:	2a39      	cmp	r2, #57	; 0x39
 8005758:	d050      	beq.n	80057fc <_dtoa_r+0xb74>
 800575a:	3201      	adds	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e747      	b.n	80055f0 <_dtoa_r+0x968>
 8005760:	2a00      	cmp	r2, #0
 8005762:	dd03      	ble.n	800576c <_dtoa_r+0xae4>
 8005764:	2b39      	cmp	r3, #57	; 0x39
 8005766:	d0ee      	beq.n	8005746 <_dtoa_r+0xabe>
 8005768:	3301      	adds	r3, #1
 800576a:	e7c7      	b.n	80056fc <_dtoa_r+0xa74>
 800576c:	9a08      	ldr	r2, [sp, #32]
 800576e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005770:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005774:	428a      	cmp	r2, r1
 8005776:	d02a      	beq.n	80057ce <_dtoa_r+0xb46>
 8005778:	4659      	mov	r1, fp
 800577a:	2300      	movs	r3, #0
 800577c:	220a      	movs	r2, #10
 800577e:	4628      	mov	r0, r5
 8005780:	f000 fb16 	bl	8005db0 <__multadd>
 8005784:	45b0      	cmp	r8, r6
 8005786:	4683      	mov	fp, r0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	f04f 020a 	mov.w	r2, #10
 8005790:	4641      	mov	r1, r8
 8005792:	4628      	mov	r0, r5
 8005794:	d107      	bne.n	80057a6 <_dtoa_r+0xb1e>
 8005796:	f000 fb0b 	bl	8005db0 <__multadd>
 800579a:	4680      	mov	r8, r0
 800579c:	4606      	mov	r6, r0
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	3301      	adds	r3, #1
 80057a2:	9308      	str	r3, [sp, #32]
 80057a4:	e775      	b.n	8005692 <_dtoa_r+0xa0a>
 80057a6:	f000 fb03 	bl	8005db0 <__multadd>
 80057aa:	4631      	mov	r1, r6
 80057ac:	4680      	mov	r8, r0
 80057ae:	2300      	movs	r3, #0
 80057b0:	220a      	movs	r2, #10
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 fafc 	bl	8005db0 <__multadd>
 80057b8:	4606      	mov	r6, r0
 80057ba:	e7f0      	b.n	800579e <_dtoa_r+0xb16>
 80057bc:	f1b9 0f00 	cmp.w	r9, #0
 80057c0:	bfcc      	ite	gt
 80057c2:	464f      	movgt	r7, r9
 80057c4:	2701      	movle	r7, #1
 80057c6:	f04f 0800 	mov.w	r8, #0
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	4417      	add	r7, r2
 80057ce:	4659      	mov	r1, fp
 80057d0:	2201      	movs	r2, #1
 80057d2:	4628      	mov	r0, r5
 80057d4:	9308      	str	r3, [sp, #32]
 80057d6:	f000 fc97 	bl	8006108 <__lshift>
 80057da:	4621      	mov	r1, r4
 80057dc:	4683      	mov	fp, r0
 80057de:	f000 fd03 	bl	80061e8 <__mcmp>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	dcb2      	bgt.n	800574c <_dtoa_r+0xac4>
 80057e6:	d102      	bne.n	80057ee <_dtoa_r+0xb66>
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	07db      	lsls	r3, r3, #31
 80057ec:	d4ae      	bmi.n	800574c <_dtoa_r+0xac4>
 80057ee:	463b      	mov	r3, r7
 80057f0:	461f      	mov	r7, r3
 80057f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057f6:	2a30      	cmp	r2, #48	; 0x30
 80057f8:	d0fa      	beq.n	80057f0 <_dtoa_r+0xb68>
 80057fa:	e6f9      	b.n	80055f0 <_dtoa_r+0x968>
 80057fc:	9a03      	ldr	r2, [sp, #12]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d1a5      	bne.n	800574e <_dtoa_r+0xac6>
 8005802:	2331      	movs	r3, #49	; 0x31
 8005804:	f10a 0a01 	add.w	sl, sl, #1
 8005808:	e779      	b.n	80056fe <_dtoa_r+0xa76>
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <_dtoa_r+0xbd4>)
 800580c:	f7ff baa8 	b.w	8004d60 <_dtoa_r+0xd8>
 8005810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005812:	2b00      	cmp	r3, #0
 8005814:	f47f aa81 	bne.w	8004d1a <_dtoa_r+0x92>
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <_dtoa_r+0xbd8>)
 800581a:	f7ff baa1 	b.w	8004d60 <_dtoa_r+0xd8>
 800581e:	f1b9 0f00 	cmp.w	r9, #0
 8005822:	dc03      	bgt.n	800582c <_dtoa_r+0xba4>
 8005824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005826:	2b02      	cmp	r3, #2
 8005828:	f73f aecb 	bgt.w	80055c2 <_dtoa_r+0x93a>
 800582c:	9f03      	ldr	r7, [sp, #12]
 800582e:	4621      	mov	r1, r4
 8005830:	4658      	mov	r0, fp
 8005832:	f7ff f99b 	bl	8004b6c <quorem>
 8005836:	9a03      	ldr	r2, [sp, #12]
 8005838:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800583c:	f807 3b01 	strb.w	r3, [r7], #1
 8005840:	1aba      	subs	r2, r7, r2
 8005842:	4591      	cmp	r9, r2
 8005844:	ddba      	ble.n	80057bc <_dtoa_r+0xb34>
 8005846:	4659      	mov	r1, fp
 8005848:	2300      	movs	r3, #0
 800584a:	220a      	movs	r2, #10
 800584c:	4628      	mov	r0, r5
 800584e:	f000 faaf 	bl	8005db0 <__multadd>
 8005852:	4683      	mov	fp, r0
 8005854:	e7eb      	b.n	800582e <_dtoa_r+0xba6>
 8005856:	bf00      	nop
 8005858:	080081e4 	.word	0x080081e4
 800585c:	08008040 	.word	0x08008040
 8005860:	08008165 	.word	0x08008165

08005864 <__sflush_r>:
 8005864:	898a      	ldrh	r2, [r1, #12]
 8005866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005868:	4605      	mov	r5, r0
 800586a:	0710      	lsls	r0, r2, #28
 800586c:	460c      	mov	r4, r1
 800586e:	d457      	bmi.n	8005920 <__sflush_r+0xbc>
 8005870:	684b      	ldr	r3, [r1, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	dc04      	bgt.n	8005880 <__sflush_r+0x1c>
 8005876:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	dc01      	bgt.n	8005880 <__sflush_r+0x1c>
 800587c:	2000      	movs	r0, #0
 800587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005882:	2e00      	cmp	r6, #0
 8005884:	d0fa      	beq.n	800587c <__sflush_r+0x18>
 8005886:	2300      	movs	r3, #0
 8005888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800588c:	682f      	ldr	r7, [r5, #0]
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	d032      	beq.n	80058f8 <__sflush_r+0x94>
 8005892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	075a      	lsls	r2, r3, #29
 8005898:	d505      	bpl.n	80058a6 <__sflush_r+0x42>
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	1ac0      	subs	r0, r0, r3
 800589e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058a0:	b10b      	cbz	r3, 80058a6 <__sflush_r+0x42>
 80058a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058a4:	1ac0      	subs	r0, r0, r3
 80058a6:	2300      	movs	r3, #0
 80058a8:	4602      	mov	r2, r0
 80058aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ac:	4628      	mov	r0, r5
 80058ae:	6a21      	ldr	r1, [r4, #32]
 80058b0:	47b0      	blx	r6
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	d106      	bne.n	80058c6 <__sflush_r+0x62>
 80058b8:	6829      	ldr	r1, [r5, #0]
 80058ba:	291d      	cmp	r1, #29
 80058bc:	d82c      	bhi.n	8005918 <__sflush_r+0xb4>
 80058be:	4a29      	ldr	r2, [pc, #164]	; (8005964 <__sflush_r+0x100>)
 80058c0:	40ca      	lsrs	r2, r1
 80058c2:	07d6      	lsls	r6, r2, #31
 80058c4:	d528      	bpl.n	8005918 <__sflush_r+0xb4>
 80058c6:	2200      	movs	r2, #0
 80058c8:	6062      	str	r2, [r4, #4]
 80058ca:	6922      	ldr	r2, [r4, #16]
 80058cc:	04d9      	lsls	r1, r3, #19
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	d504      	bpl.n	80058dc <__sflush_r+0x78>
 80058d2:	1c42      	adds	r2, r0, #1
 80058d4:	d101      	bne.n	80058da <__sflush_r+0x76>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	b903      	cbnz	r3, 80058dc <__sflush_r+0x78>
 80058da:	6560      	str	r0, [r4, #84]	; 0x54
 80058dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058de:	602f      	str	r7, [r5, #0]
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d0cb      	beq.n	800587c <__sflush_r+0x18>
 80058e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058e8:	4299      	cmp	r1, r3
 80058ea:	d002      	beq.n	80058f2 <__sflush_r+0x8e>
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 fd93 	bl	8006418 <_free_r>
 80058f2:	2000      	movs	r0, #0
 80058f4:	6360      	str	r0, [r4, #52]	; 0x34
 80058f6:	e7c2      	b.n	800587e <__sflush_r+0x1a>
 80058f8:	6a21      	ldr	r1, [r4, #32]
 80058fa:	2301      	movs	r3, #1
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b0      	blx	r6
 8005900:	1c41      	adds	r1, r0, #1
 8005902:	d1c7      	bne.n	8005894 <__sflush_r+0x30>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0c4      	beq.n	8005894 <__sflush_r+0x30>
 800590a:	2b1d      	cmp	r3, #29
 800590c:	d001      	beq.n	8005912 <__sflush_r+0xae>
 800590e:	2b16      	cmp	r3, #22
 8005910:	d101      	bne.n	8005916 <__sflush_r+0xb2>
 8005912:	602f      	str	r7, [r5, #0]
 8005914:	e7b2      	b.n	800587c <__sflush_r+0x18>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	e7ae      	b.n	800587e <__sflush_r+0x1a>
 8005920:	690f      	ldr	r7, [r1, #16]
 8005922:	2f00      	cmp	r7, #0
 8005924:	d0aa      	beq.n	800587c <__sflush_r+0x18>
 8005926:	0793      	lsls	r3, r2, #30
 8005928:	bf18      	it	ne
 800592a:	2300      	movne	r3, #0
 800592c:	680e      	ldr	r6, [r1, #0]
 800592e:	bf08      	it	eq
 8005930:	694b      	ldreq	r3, [r1, #20]
 8005932:	1bf6      	subs	r6, r6, r7
 8005934:	600f      	str	r7, [r1, #0]
 8005936:	608b      	str	r3, [r1, #8]
 8005938:	2e00      	cmp	r6, #0
 800593a:	dd9f      	ble.n	800587c <__sflush_r+0x18>
 800593c:	4633      	mov	r3, r6
 800593e:	463a      	mov	r2, r7
 8005940:	4628      	mov	r0, r5
 8005942:	6a21      	ldr	r1, [r4, #32]
 8005944:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005948:	47e0      	blx	ip
 800594a:	2800      	cmp	r0, #0
 800594c:	dc06      	bgt.n	800595c <__sflush_r+0xf8>
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	e790      	b.n	800587e <__sflush_r+0x1a>
 800595c:	4407      	add	r7, r0
 800595e:	1a36      	subs	r6, r6, r0
 8005960:	e7ea      	b.n	8005938 <__sflush_r+0xd4>
 8005962:	bf00      	nop
 8005964:	20400001 	.word	0x20400001

08005968 <_fflush_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	690b      	ldr	r3, [r1, #16]
 800596c:	4605      	mov	r5, r0
 800596e:	460c      	mov	r4, r1
 8005970:	b913      	cbnz	r3, 8005978 <_fflush_r+0x10>
 8005972:	2500      	movs	r5, #0
 8005974:	4628      	mov	r0, r5
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	b118      	cbz	r0, 8005982 <_fflush_r+0x1a>
 800597a:	6983      	ldr	r3, [r0, #24]
 800597c:	b90b      	cbnz	r3, 8005982 <_fflush_r+0x1a>
 800597e:	f000 f887 	bl	8005a90 <__sinit>
 8005982:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <_fflush_r+0x6c>)
 8005984:	429c      	cmp	r4, r3
 8005986:	d11b      	bne.n	80059c0 <_fflush_r+0x58>
 8005988:	686c      	ldr	r4, [r5, #4]
 800598a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0ef      	beq.n	8005972 <_fflush_r+0xa>
 8005992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005994:	07d0      	lsls	r0, r2, #31
 8005996:	d404      	bmi.n	80059a2 <_fflush_r+0x3a>
 8005998:	0599      	lsls	r1, r3, #22
 800599a:	d402      	bmi.n	80059a2 <_fflush_r+0x3a>
 800599c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800599e:	f000 f91a 	bl	8005bd6 <__retarget_lock_acquire_recursive>
 80059a2:	4628      	mov	r0, r5
 80059a4:	4621      	mov	r1, r4
 80059a6:	f7ff ff5d 	bl	8005864 <__sflush_r>
 80059aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ac:	4605      	mov	r5, r0
 80059ae:	07da      	lsls	r2, r3, #31
 80059b0:	d4e0      	bmi.n	8005974 <_fflush_r+0xc>
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	059b      	lsls	r3, r3, #22
 80059b6:	d4dd      	bmi.n	8005974 <_fflush_r+0xc>
 80059b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ba:	f000 f90d 	bl	8005bd8 <__retarget_lock_release_recursive>
 80059be:	e7d9      	b.n	8005974 <_fflush_r+0xc>
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <_fflush_r+0x70>)
 80059c2:	429c      	cmp	r4, r3
 80059c4:	d101      	bne.n	80059ca <_fflush_r+0x62>
 80059c6:	68ac      	ldr	r4, [r5, #8]
 80059c8:	e7df      	b.n	800598a <_fflush_r+0x22>
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <_fflush_r+0x74>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	bf08      	it	eq
 80059d0:	68ec      	ldreq	r4, [r5, #12]
 80059d2:	e7da      	b.n	800598a <_fflush_r+0x22>
 80059d4:	08008218 	.word	0x08008218
 80059d8:	08008238 	.word	0x08008238
 80059dc:	080081f8 	.word	0x080081f8

080059e0 <std>:
 80059e0:	2300      	movs	r3, #0
 80059e2:	b510      	push	{r4, lr}
 80059e4:	4604      	mov	r4, r0
 80059e6:	e9c0 3300 	strd	r3, r3, [r0]
 80059ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ee:	6083      	str	r3, [r0, #8]
 80059f0:	8181      	strh	r1, [r0, #12]
 80059f2:	6643      	str	r3, [r0, #100]	; 0x64
 80059f4:	81c2      	strh	r2, [r0, #14]
 80059f6:	6183      	str	r3, [r0, #24]
 80059f8:	4619      	mov	r1, r3
 80059fa:	2208      	movs	r2, #8
 80059fc:	305c      	adds	r0, #92	; 0x5c
 80059fe:	f7fe fa59 	bl	8003eb4 <memset>
 8005a02:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <std+0x38>)
 8005a04:	6224      	str	r4, [r4, #32]
 8005a06:	6263      	str	r3, [r4, #36]	; 0x24
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <std+0x3c>)
 8005a0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <std+0x40>)
 8005a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <std+0x44>)
 8005a12:	6323      	str	r3, [r4, #48]	; 0x30
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	bf00      	nop
 8005a18:	08006b59 	.word	0x08006b59
 8005a1c:	08006b7b 	.word	0x08006b7b
 8005a20:	08006bb3 	.word	0x08006bb3
 8005a24:	08006bd7 	.word	0x08006bd7

08005a28 <_cleanup_r>:
 8005a28:	4901      	ldr	r1, [pc, #4]	; (8005a30 <_cleanup_r+0x8>)
 8005a2a:	f000 b8af 	b.w	8005b8c <_fwalk_reent>
 8005a2e:	bf00      	nop
 8005a30:	08005969 	.word	0x08005969

08005a34 <__sfmoreglue>:
 8005a34:	2268      	movs	r2, #104	; 0x68
 8005a36:	b570      	push	{r4, r5, r6, lr}
 8005a38:	1e4d      	subs	r5, r1, #1
 8005a3a:	4355      	muls	r5, r2
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a42:	f000 fd51 	bl	80064e8 <_malloc_r>
 8005a46:	4604      	mov	r4, r0
 8005a48:	b140      	cbz	r0, 8005a5c <__sfmoreglue+0x28>
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8005a50:	300c      	adds	r0, #12
 8005a52:	60a0      	str	r0, [r4, #8]
 8005a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a58:	f7fe fa2c 	bl	8003eb4 <memset>
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}

08005a60 <__sfp_lock_acquire>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__sfp_lock_acquire+0x8>)
 8005a62:	f000 b8b8 	b.w	8005bd6 <__retarget_lock_acquire_recursive>
 8005a66:	bf00      	nop
 8005a68:	200004ed 	.word	0x200004ed

08005a6c <__sfp_lock_release>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	; (8005a74 <__sfp_lock_release+0x8>)
 8005a6e:	f000 b8b3 	b.w	8005bd8 <__retarget_lock_release_recursive>
 8005a72:	bf00      	nop
 8005a74:	200004ed 	.word	0x200004ed

08005a78 <__sinit_lock_acquire>:
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <__sinit_lock_acquire+0x8>)
 8005a7a:	f000 b8ac 	b.w	8005bd6 <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	200004ee 	.word	0x200004ee

08005a84 <__sinit_lock_release>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__sinit_lock_release+0x8>)
 8005a86:	f000 b8a7 	b.w	8005bd8 <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	200004ee 	.word	0x200004ee

08005a90 <__sinit>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	4604      	mov	r4, r0
 8005a94:	f7ff fff0 	bl	8005a78 <__sinit_lock_acquire>
 8005a98:	69a3      	ldr	r3, [r4, #24]
 8005a9a:	b11b      	cbz	r3, 8005aa4 <__sinit+0x14>
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	f7ff bff0 	b.w	8005a84 <__sinit_lock_release>
 8005aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005aa8:	6523      	str	r3, [r4, #80]	; 0x50
 8005aaa:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <__sinit+0x68>)
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <__sinit+0x6c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ab2:	42a3      	cmp	r3, r4
 8005ab4:	bf08      	it	eq
 8005ab6:	2301      	moveq	r3, #1
 8005ab8:	4620      	mov	r0, r4
 8005aba:	bf08      	it	eq
 8005abc:	61a3      	streq	r3, [r4, #24]
 8005abe:	f000 f81f 	bl	8005b00 <__sfp>
 8005ac2:	6060      	str	r0, [r4, #4]
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 f81b 	bl	8005b00 <__sfp>
 8005aca:	60a0      	str	r0, [r4, #8]
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 f817 	bl	8005b00 <__sfp>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2104      	movs	r1, #4
 8005ad6:	60e0      	str	r0, [r4, #12]
 8005ad8:	6860      	ldr	r0, [r4, #4]
 8005ada:	f7ff ff81 	bl	80059e0 <std>
 8005ade:	2201      	movs	r2, #1
 8005ae0:	2109      	movs	r1, #9
 8005ae2:	68a0      	ldr	r0, [r4, #8]
 8005ae4:	f7ff ff7c 	bl	80059e0 <std>
 8005ae8:	2202      	movs	r2, #2
 8005aea:	2112      	movs	r1, #18
 8005aec:	68e0      	ldr	r0, [r4, #12]
 8005aee:	f7ff ff77 	bl	80059e0 <std>
 8005af2:	2301      	movs	r3, #1
 8005af4:	61a3      	str	r3, [r4, #24]
 8005af6:	e7d1      	b.n	8005a9c <__sinit+0xc>
 8005af8:	0800802c 	.word	0x0800802c
 8005afc:	08005a29 	.word	0x08005a29

08005b00 <__sfp>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	4607      	mov	r7, r0
 8005b04:	f7ff ffac 	bl	8005a60 <__sfp_lock_acquire>
 8005b08:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <__sfp+0x84>)
 8005b0a:	681e      	ldr	r6, [r3, #0]
 8005b0c:	69b3      	ldr	r3, [r6, #24]
 8005b0e:	b913      	cbnz	r3, 8005b16 <__sfp+0x16>
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff ffbd 	bl	8005a90 <__sinit>
 8005b16:	3648      	adds	r6, #72	; 0x48
 8005b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	d503      	bpl.n	8005b28 <__sfp+0x28>
 8005b20:	6833      	ldr	r3, [r6, #0]
 8005b22:	b30b      	cbz	r3, 8005b68 <__sfp+0x68>
 8005b24:	6836      	ldr	r6, [r6, #0]
 8005b26:	e7f7      	b.n	8005b18 <__sfp+0x18>
 8005b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b2c:	b9d5      	cbnz	r5, 8005b64 <__sfp+0x64>
 8005b2e:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <__sfp+0x88>)
 8005b30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b34:	60e3      	str	r3, [r4, #12]
 8005b36:	6665      	str	r5, [r4, #100]	; 0x64
 8005b38:	f000 f84c 	bl	8005bd4 <__retarget_lock_init_recursive>
 8005b3c:	f7ff ff96 	bl	8005a6c <__sfp_lock_release>
 8005b40:	2208      	movs	r2, #8
 8005b42:	4629      	mov	r1, r5
 8005b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b4c:	6025      	str	r5, [r4, #0]
 8005b4e:	61a5      	str	r5, [r4, #24]
 8005b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b54:	f7fe f9ae 	bl	8003eb4 <memset>
 8005b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b60:	4620      	mov	r0, r4
 8005b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b64:	3468      	adds	r4, #104	; 0x68
 8005b66:	e7d9      	b.n	8005b1c <__sfp+0x1c>
 8005b68:	2104      	movs	r1, #4
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f7ff ff62 	bl	8005a34 <__sfmoreglue>
 8005b70:	4604      	mov	r4, r0
 8005b72:	6030      	str	r0, [r6, #0]
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d1d5      	bne.n	8005b24 <__sfp+0x24>
 8005b78:	f7ff ff78 	bl	8005a6c <__sfp_lock_release>
 8005b7c:	230c      	movs	r3, #12
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	e7ee      	b.n	8005b60 <__sfp+0x60>
 8005b82:	bf00      	nop
 8005b84:	0800802c 	.word	0x0800802c
 8005b88:	ffff0001 	.word	0xffff0001

08005b8c <_fwalk_reent>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4606      	mov	r6, r0
 8005b92:	4688      	mov	r8, r1
 8005b94:	2700      	movs	r7, #0
 8005b96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8005ba2:	d505      	bpl.n	8005bb0 <_fwalk_reent+0x24>
 8005ba4:	6824      	ldr	r4, [r4, #0]
 8005ba6:	2c00      	cmp	r4, #0
 8005ba8:	d1f7      	bne.n	8005b9a <_fwalk_reent+0xe>
 8005baa:	4638      	mov	r0, r7
 8005bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb0:	89ab      	ldrh	r3, [r5, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d907      	bls.n	8005bc6 <_fwalk_reent+0x3a>
 8005bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	d003      	beq.n	8005bc6 <_fwalk_reent+0x3a>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	47c0      	blx	r8
 8005bc4:	4307      	orrs	r7, r0
 8005bc6:	3568      	adds	r5, #104	; 0x68
 8005bc8:	e7e9      	b.n	8005b9e <_fwalk_reent+0x12>
	...

08005bcc <_localeconv_r>:
 8005bcc:	4800      	ldr	r0, [pc, #0]	; (8005bd0 <_localeconv_r+0x4>)
 8005bce:	4770      	bx	lr
 8005bd0:	200001a8 	.word	0x200001a8

08005bd4 <__retarget_lock_init_recursive>:
 8005bd4:	4770      	bx	lr

08005bd6 <__retarget_lock_acquire_recursive>:
 8005bd6:	4770      	bx	lr

08005bd8 <__retarget_lock_release_recursive>:
 8005bd8:	4770      	bx	lr

08005bda <__swhatbuf_r>:
 8005bda:	b570      	push	{r4, r5, r6, lr}
 8005bdc:	460e      	mov	r6, r1
 8005bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be2:	4614      	mov	r4, r2
 8005be4:	2900      	cmp	r1, #0
 8005be6:	461d      	mov	r5, r3
 8005be8:	b096      	sub	sp, #88	; 0x58
 8005bea:	da08      	bge.n	8005bfe <__swhatbuf_r+0x24>
 8005bec:	2200      	movs	r2, #0
 8005bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bf2:	602a      	str	r2, [r5, #0]
 8005bf4:	061a      	lsls	r2, r3, #24
 8005bf6:	d410      	bmi.n	8005c1a <__swhatbuf_r+0x40>
 8005bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfc:	e00e      	b.n	8005c1c <__swhatbuf_r+0x42>
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f001 f840 	bl	8006c84 <_fstat_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dbf1      	blt.n	8005bec <__swhatbuf_r+0x12>
 8005c08:	9a01      	ldr	r2, [sp, #4]
 8005c0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c12:	425a      	negs	r2, r3
 8005c14:	415a      	adcs	r2, r3
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	e7ee      	b.n	8005bf8 <__swhatbuf_r+0x1e>
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	b016      	add	sp, #88	; 0x58
 8005c22:	bd70      	pop	{r4, r5, r6, pc}

08005c24 <__smakebuf_r>:
 8005c24:	898b      	ldrh	r3, [r1, #12]
 8005c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c28:	079d      	lsls	r5, r3, #30
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	d507      	bpl.n	8005c40 <__smakebuf_r+0x1c>
 8005c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	6163      	str	r3, [r4, #20]
 8005c3c:	b002      	add	sp, #8
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	466a      	mov	r2, sp
 8005c42:	ab01      	add	r3, sp, #4
 8005c44:	f7ff ffc9 	bl	8005bda <__swhatbuf_r>
 8005c48:	9900      	ldr	r1, [sp, #0]
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f000 fc4b 	bl	80064e8 <_malloc_r>
 8005c52:	b948      	cbnz	r0, 8005c68 <__smakebuf_r+0x44>
 8005c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c58:	059a      	lsls	r2, r3, #22
 8005c5a:	d4ef      	bmi.n	8005c3c <__smakebuf_r+0x18>
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	e7e3      	b.n	8005c30 <__smakebuf_r+0xc>
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <__smakebuf_r+0x7c>)
 8005c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	6120      	str	r0, [r4, #16]
 8005c7a:	6163      	str	r3, [r4, #20]
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	b15b      	cbz	r3, 8005c98 <__smakebuf_r+0x74>
 8005c80:	4630      	mov	r0, r6
 8005c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c86:	f001 f80f 	bl	8006ca8 <_isatty_r>
 8005c8a:	b128      	cbz	r0, 8005c98 <__smakebuf_r+0x74>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	89a0      	ldrh	r0, [r4, #12]
 8005c9a:	4305      	orrs	r5, r0
 8005c9c:	81a5      	strh	r5, [r4, #12]
 8005c9e:	e7cd      	b.n	8005c3c <__smakebuf_r+0x18>
 8005ca0:	08005a29 	.word	0x08005a29

08005ca4 <malloc>:
 8005ca4:	4b02      	ldr	r3, [pc, #8]	; (8005cb0 <malloc+0xc>)
 8005ca6:	4601      	mov	r1, r0
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	f000 bc1d 	b.w	80064e8 <_malloc_r>
 8005cae:	bf00      	nop
 8005cb0:	20000054 	.word	0x20000054

08005cb4 <memchr>:
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	b510      	push	{r4, lr}
 8005cb8:	b2c9      	uxtb	r1, r1
 8005cba:	4402      	add	r2, r0
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	d101      	bne.n	8005cc6 <memchr+0x12>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e003      	b.n	8005cce <memchr+0x1a>
 8005cc6:	7804      	ldrb	r4, [r0, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	428c      	cmp	r4, r1
 8005ccc:	d1f6      	bne.n	8005cbc <memchr+0x8>
 8005cce:	bd10      	pop	{r4, pc}

08005cd0 <memcpy>:
 8005cd0:	440a      	add	r2, r1
 8005cd2:	4291      	cmp	r1, r2
 8005cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cd8:	d100      	bne.n	8005cdc <memcpy+0xc>
 8005cda:	4770      	bx	lr
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ce2:	4291      	cmp	r1, r2
 8005ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ce8:	d1f9      	bne.n	8005cde <memcpy+0xe>
 8005cea:	bd10      	pop	{r4, pc}

08005cec <_Balloc>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	b976      	cbnz	r6, 8005d14 <_Balloc+0x28>
 8005cf6:	2010      	movs	r0, #16
 8005cf8:	f7ff ffd4 	bl	8005ca4 <malloc>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6260      	str	r0, [r4, #36]	; 0x24
 8005d00:	b920      	cbnz	r0, 8005d0c <_Balloc+0x20>
 8005d02:	2166      	movs	r1, #102	; 0x66
 8005d04:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <_Balloc+0x78>)
 8005d06:	4818      	ldr	r0, [pc, #96]	; (8005d68 <_Balloc+0x7c>)
 8005d08:	f000 ff7c 	bl	8006c04 <__assert_func>
 8005d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d10:	6006      	str	r6, [r0, #0]
 8005d12:	60c6      	str	r6, [r0, #12]
 8005d14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d16:	68f3      	ldr	r3, [r6, #12]
 8005d18:	b183      	cbz	r3, 8005d3c <_Balloc+0x50>
 8005d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d22:	b9b8      	cbnz	r0, 8005d54 <_Balloc+0x68>
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f605 	lsl.w	r6, r1, r5
 8005d2a:	1d72      	adds	r2, r6, #5
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	0092      	lsls	r2, r2, #2
 8005d30:	f000 fb5e 	bl	80063f0 <_calloc_r>
 8005d34:	b160      	cbz	r0, 8005d50 <_Balloc+0x64>
 8005d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d3a:	e00e      	b.n	8005d5a <_Balloc+0x6e>
 8005d3c:	2221      	movs	r2, #33	; 0x21
 8005d3e:	2104      	movs	r1, #4
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fb55 	bl	80063f0 <_calloc_r>
 8005d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d48:	60f0      	str	r0, [r6, #12]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e4      	bne.n	8005d1a <_Balloc+0x2e>
 8005d50:	2000      	movs	r0, #0
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	6802      	ldr	r2, [r0, #0]
 8005d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d60:	e7f7      	b.n	8005d52 <_Balloc+0x66>
 8005d62:	bf00      	nop
 8005d64:	08008172 	.word	0x08008172
 8005d68:	08008258 	.word	0x08008258

08005d6c <_Bfree>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d70:	4605      	mov	r5, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	b976      	cbnz	r6, 8005d94 <_Bfree+0x28>
 8005d76:	2010      	movs	r0, #16
 8005d78:	f7ff ff94 	bl	8005ca4 <malloc>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6268      	str	r0, [r5, #36]	; 0x24
 8005d80:	b920      	cbnz	r0, 8005d8c <_Bfree+0x20>
 8005d82:	218a      	movs	r1, #138	; 0x8a
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <_Bfree+0x3c>)
 8005d86:	4809      	ldr	r0, [pc, #36]	; (8005dac <_Bfree+0x40>)
 8005d88:	f000 ff3c 	bl	8006c04 <__assert_func>
 8005d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d90:	6006      	str	r6, [r0, #0]
 8005d92:	60c6      	str	r6, [r0, #12]
 8005d94:	b13c      	cbz	r4, 8005da6 <_Bfree+0x3a>
 8005d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d98:	6862      	ldr	r2, [r4, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005da0:	6021      	str	r1, [r4, #0]
 8005da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	08008172 	.word	0x08008172
 8005dac:	08008258 	.word	0x08008258

08005db0 <__multadd>:
 8005db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db4:	4607      	mov	r7, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	461e      	mov	r6, r3
 8005dba:	2000      	movs	r0, #0
 8005dbc:	690d      	ldr	r5, [r1, #16]
 8005dbe:	f101 0c14 	add.w	ip, r1, #20
 8005dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	b299      	uxth	r1, r3
 8005dca:	fb02 6101 	mla	r1, r2, r1, r6
 8005dce:	0c1e      	lsrs	r6, r3, #16
 8005dd0:	0c0b      	lsrs	r3, r1, #16
 8005dd2:	fb02 3306 	mla	r3, r2, r6, r3
 8005dd6:	b289      	uxth	r1, r1
 8005dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ddc:	4285      	cmp	r5, r0
 8005dde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005de2:	f84c 1b04 	str.w	r1, [ip], #4
 8005de6:	dcec      	bgt.n	8005dc2 <__multadd+0x12>
 8005de8:	b30e      	cbz	r6, 8005e2e <__multadd+0x7e>
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dc19      	bgt.n	8005e24 <__multadd+0x74>
 8005df0:	6861      	ldr	r1, [r4, #4]
 8005df2:	4638      	mov	r0, r7
 8005df4:	3101      	adds	r1, #1
 8005df6:	f7ff ff79 	bl	8005cec <_Balloc>
 8005dfa:	4680      	mov	r8, r0
 8005dfc:	b928      	cbnz	r0, 8005e0a <__multadd+0x5a>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	21b5      	movs	r1, #181	; 0xb5
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <__multadd+0x84>)
 8005e04:	480c      	ldr	r0, [pc, #48]	; (8005e38 <__multadd+0x88>)
 8005e06:	f000 fefd 	bl	8006c04 <__assert_func>
 8005e0a:	6922      	ldr	r2, [r4, #16]
 8005e0c:	f104 010c 	add.w	r1, r4, #12
 8005e10:	3202      	adds	r2, #2
 8005e12:	0092      	lsls	r2, r2, #2
 8005e14:	300c      	adds	r0, #12
 8005e16:	f7ff ff5b 	bl	8005cd0 <memcpy>
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f7ff ffa5 	bl	8005d6c <_Bfree>
 8005e22:	4644      	mov	r4, r8
 8005e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e28:	3501      	adds	r5, #1
 8005e2a:	615e      	str	r6, [r3, #20]
 8005e2c:	6125      	str	r5, [r4, #16]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e34:	080081e4 	.word	0x080081e4
 8005e38:	08008258 	.word	0x08008258

08005e3c <__hi0bits>:
 8005e3c:	0c02      	lsrs	r2, r0, #16
 8005e3e:	0412      	lsls	r2, r2, #16
 8005e40:	4603      	mov	r3, r0
 8005e42:	b9ca      	cbnz	r2, 8005e78 <__hi0bits+0x3c>
 8005e44:	0403      	lsls	r3, r0, #16
 8005e46:	2010      	movs	r0, #16
 8005e48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e4c:	bf04      	itt	eq
 8005e4e:	021b      	lsleq	r3, r3, #8
 8005e50:	3008      	addeq	r0, #8
 8005e52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e56:	bf04      	itt	eq
 8005e58:	011b      	lsleq	r3, r3, #4
 8005e5a:	3004      	addeq	r0, #4
 8005e5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e60:	bf04      	itt	eq
 8005e62:	009b      	lsleq	r3, r3, #2
 8005e64:	3002      	addeq	r0, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	db05      	blt.n	8005e76 <__hi0bits+0x3a>
 8005e6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e6e:	f100 0001 	add.w	r0, r0, #1
 8005e72:	bf08      	it	eq
 8005e74:	2020      	moveq	r0, #32
 8005e76:	4770      	bx	lr
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e7e5      	b.n	8005e48 <__hi0bits+0xc>

08005e7c <__lo0bits>:
 8005e7c:	6803      	ldr	r3, [r0, #0]
 8005e7e:	4602      	mov	r2, r0
 8005e80:	f013 0007 	ands.w	r0, r3, #7
 8005e84:	d00b      	beq.n	8005e9e <__lo0bits+0x22>
 8005e86:	07d9      	lsls	r1, r3, #31
 8005e88:	d421      	bmi.n	8005ece <__lo0bits+0x52>
 8005e8a:	0798      	lsls	r0, r3, #30
 8005e8c:	bf49      	itett	mi
 8005e8e:	085b      	lsrmi	r3, r3, #1
 8005e90:	089b      	lsrpl	r3, r3, #2
 8005e92:	2001      	movmi	r0, #1
 8005e94:	6013      	strmi	r3, [r2, #0]
 8005e96:	bf5c      	itt	pl
 8005e98:	2002      	movpl	r0, #2
 8005e9a:	6013      	strpl	r3, [r2, #0]
 8005e9c:	4770      	bx	lr
 8005e9e:	b299      	uxth	r1, r3
 8005ea0:	b909      	cbnz	r1, 8005ea6 <__lo0bits+0x2a>
 8005ea2:	2010      	movs	r0, #16
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	b2d9      	uxtb	r1, r3
 8005ea8:	b909      	cbnz	r1, 8005eae <__lo0bits+0x32>
 8005eaa:	3008      	adds	r0, #8
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	0719      	lsls	r1, r3, #28
 8005eb0:	bf04      	itt	eq
 8005eb2:	091b      	lsreq	r3, r3, #4
 8005eb4:	3004      	addeq	r0, #4
 8005eb6:	0799      	lsls	r1, r3, #30
 8005eb8:	bf04      	itt	eq
 8005eba:	089b      	lsreq	r3, r3, #2
 8005ebc:	3002      	addeq	r0, #2
 8005ebe:	07d9      	lsls	r1, r3, #31
 8005ec0:	d403      	bmi.n	8005eca <__lo0bits+0x4e>
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	f100 0001 	add.w	r0, r0, #1
 8005ec8:	d003      	beq.n	8005ed2 <__lo0bits+0x56>
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4770      	bx	lr
 8005ece:	2000      	movs	r0, #0
 8005ed0:	4770      	bx	lr
 8005ed2:	2020      	movs	r0, #32
 8005ed4:	4770      	bx	lr
	...

08005ed8 <__i2b>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	460c      	mov	r4, r1
 8005edc:	2101      	movs	r1, #1
 8005ede:	f7ff ff05 	bl	8005cec <_Balloc>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	b928      	cbnz	r0, 8005ef2 <__i2b+0x1a>
 8005ee6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005eea:	4b04      	ldr	r3, [pc, #16]	; (8005efc <__i2b+0x24>)
 8005eec:	4804      	ldr	r0, [pc, #16]	; (8005f00 <__i2b+0x28>)
 8005eee:	f000 fe89 	bl	8006c04 <__assert_func>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	6144      	str	r4, [r0, #20]
 8005ef6:	6103      	str	r3, [r0, #16]
 8005ef8:	bd10      	pop	{r4, pc}
 8005efa:	bf00      	nop
 8005efc:	080081e4 	.word	0x080081e4
 8005f00:	08008258 	.word	0x08008258

08005f04 <__multiply>:
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	4691      	mov	r9, r2
 8005f0a:	690a      	ldr	r2, [r1, #16]
 8005f0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f10:	460c      	mov	r4, r1
 8005f12:	429a      	cmp	r2, r3
 8005f14:	bfbe      	ittt	lt
 8005f16:	460b      	movlt	r3, r1
 8005f18:	464c      	movlt	r4, r9
 8005f1a:	4699      	movlt	r9, r3
 8005f1c:	6927      	ldr	r7, [r4, #16]
 8005f1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f22:	68a3      	ldr	r3, [r4, #8]
 8005f24:	6861      	ldr	r1, [r4, #4]
 8005f26:	eb07 060a 	add.w	r6, r7, sl
 8005f2a:	42b3      	cmp	r3, r6
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	bfb8      	it	lt
 8005f30:	3101      	addlt	r1, #1
 8005f32:	f7ff fedb 	bl	8005cec <_Balloc>
 8005f36:	b930      	cbnz	r0, 8005f46 <__multiply+0x42>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	f240 115d 	movw	r1, #349	; 0x15d
 8005f3e:	4b43      	ldr	r3, [pc, #268]	; (800604c <__multiply+0x148>)
 8005f40:	4843      	ldr	r0, [pc, #268]	; (8006050 <__multiply+0x14c>)
 8005f42:	f000 fe5f 	bl	8006c04 <__assert_func>
 8005f46:	f100 0514 	add.w	r5, r0, #20
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f52:	4543      	cmp	r3, r8
 8005f54:	d321      	bcc.n	8005f9a <__multiply+0x96>
 8005f56:	f104 0314 	add.w	r3, r4, #20
 8005f5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f5e:	f109 0314 	add.w	r3, r9, #20
 8005f62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f66:	9202      	str	r2, [sp, #8]
 8005f68:	1b3a      	subs	r2, r7, r4
 8005f6a:	3a15      	subs	r2, #21
 8005f6c:	f022 0203 	bic.w	r2, r2, #3
 8005f70:	3204      	adds	r2, #4
 8005f72:	f104 0115 	add.w	r1, r4, #21
 8005f76:	428f      	cmp	r7, r1
 8005f78:	bf38      	it	cc
 8005f7a:	2204      	movcc	r2, #4
 8005f7c:	9201      	str	r2, [sp, #4]
 8005f7e:	9a02      	ldr	r2, [sp, #8]
 8005f80:	9303      	str	r3, [sp, #12]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d80c      	bhi.n	8005fa0 <__multiply+0x9c>
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	dd03      	ble.n	8005f92 <__multiply+0x8e>
 8005f8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d059      	beq.n	8006046 <__multiply+0x142>
 8005f92:	6106      	str	r6, [r0, #16]
 8005f94:	b005      	add	sp, #20
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	f843 2b04 	str.w	r2, [r3], #4
 8005f9e:	e7d8      	b.n	8005f52 <__multiply+0x4e>
 8005fa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fa4:	f1ba 0f00 	cmp.w	sl, #0
 8005fa8:	d023      	beq.n	8005ff2 <__multiply+0xee>
 8005faa:	46a9      	mov	r9, r5
 8005fac:	f04f 0c00 	mov.w	ip, #0
 8005fb0:	f104 0e14 	add.w	lr, r4, #20
 8005fb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fb8:	f8d9 1000 	ldr.w	r1, [r9]
 8005fbc:	fa1f fb82 	uxth.w	fp, r2
 8005fc0:	b289      	uxth	r1, r1
 8005fc2:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fc6:	4461      	add	r1, ip
 8005fc8:	f8d9 c000 	ldr.w	ip, [r9]
 8005fcc:	0c12      	lsrs	r2, r2, #16
 8005fce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005fd2:	fb0a c202 	mla	r2, sl, r2, ip
 8005fd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fda:	b289      	uxth	r1, r1
 8005fdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fe0:	4577      	cmp	r7, lr
 8005fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fe6:	f849 1b04 	str.w	r1, [r9], #4
 8005fea:	d8e3      	bhi.n	8005fb4 <__multiply+0xb0>
 8005fec:	9a01      	ldr	r2, [sp, #4]
 8005fee:	f845 c002 	str.w	ip, [r5, r2]
 8005ff2:	9a03      	ldr	r2, [sp, #12]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ffa:	f1b9 0f00 	cmp.w	r9, #0
 8005ffe:	d020      	beq.n	8006042 <__multiply+0x13e>
 8006000:	46ae      	mov	lr, r5
 8006002:	f04f 0a00 	mov.w	sl, #0
 8006006:	6829      	ldr	r1, [r5, #0]
 8006008:	f104 0c14 	add.w	ip, r4, #20
 800600c:	f8bc b000 	ldrh.w	fp, [ip]
 8006010:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006014:	b289      	uxth	r1, r1
 8006016:	fb09 220b 	mla	r2, r9, fp, r2
 800601a:	4492      	add	sl, r2
 800601c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006020:	f84e 1b04 	str.w	r1, [lr], #4
 8006024:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006028:	f8be 1000 	ldrh.w	r1, [lr]
 800602c:	0c12      	lsrs	r2, r2, #16
 800602e:	fb09 1102 	mla	r1, r9, r2, r1
 8006032:	4567      	cmp	r7, ip
 8006034:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006038:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800603c:	d8e6      	bhi.n	800600c <__multiply+0x108>
 800603e:	9a01      	ldr	r2, [sp, #4]
 8006040:	50a9      	str	r1, [r5, r2]
 8006042:	3504      	adds	r5, #4
 8006044:	e79b      	b.n	8005f7e <__multiply+0x7a>
 8006046:	3e01      	subs	r6, #1
 8006048:	e79d      	b.n	8005f86 <__multiply+0x82>
 800604a:	bf00      	nop
 800604c:	080081e4 	.word	0x080081e4
 8006050:	08008258 	.word	0x08008258

08006054 <__pow5mult>:
 8006054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006058:	4615      	mov	r5, r2
 800605a:	f012 0203 	ands.w	r2, r2, #3
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	d007      	beq.n	8006074 <__pow5mult+0x20>
 8006064:	4c25      	ldr	r4, [pc, #148]	; (80060fc <__pow5mult+0xa8>)
 8006066:	3a01      	subs	r2, #1
 8006068:	2300      	movs	r3, #0
 800606a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800606e:	f7ff fe9f 	bl	8005db0 <__multadd>
 8006072:	4607      	mov	r7, r0
 8006074:	10ad      	asrs	r5, r5, #2
 8006076:	d03d      	beq.n	80060f4 <__pow5mult+0xa0>
 8006078:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800607a:	b97c      	cbnz	r4, 800609c <__pow5mult+0x48>
 800607c:	2010      	movs	r0, #16
 800607e:	f7ff fe11 	bl	8005ca4 <malloc>
 8006082:	4602      	mov	r2, r0
 8006084:	6270      	str	r0, [r6, #36]	; 0x24
 8006086:	b928      	cbnz	r0, 8006094 <__pow5mult+0x40>
 8006088:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800608c:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <__pow5mult+0xac>)
 800608e:	481d      	ldr	r0, [pc, #116]	; (8006104 <__pow5mult+0xb0>)
 8006090:	f000 fdb8 	bl	8006c04 <__assert_func>
 8006094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006098:	6004      	str	r4, [r0, #0]
 800609a:	60c4      	str	r4, [r0, #12]
 800609c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060a4:	b94c      	cbnz	r4, 80060ba <__pow5mult+0x66>
 80060a6:	f240 2171 	movw	r1, #625	; 0x271
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ff14 	bl	8005ed8 <__i2b>
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80060b8:	6003      	str	r3, [r0, #0]
 80060ba:	f04f 0900 	mov.w	r9, #0
 80060be:	07eb      	lsls	r3, r5, #31
 80060c0:	d50a      	bpl.n	80060d8 <__pow5mult+0x84>
 80060c2:	4639      	mov	r1, r7
 80060c4:	4622      	mov	r2, r4
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7ff ff1c 	bl	8005f04 <__multiply>
 80060cc:	4680      	mov	r8, r0
 80060ce:	4639      	mov	r1, r7
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7ff fe4b 	bl	8005d6c <_Bfree>
 80060d6:	4647      	mov	r7, r8
 80060d8:	106d      	asrs	r5, r5, #1
 80060da:	d00b      	beq.n	80060f4 <__pow5mult+0xa0>
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	b938      	cbnz	r0, 80060f0 <__pow5mult+0x9c>
 80060e0:	4622      	mov	r2, r4
 80060e2:	4621      	mov	r1, r4
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff ff0d 	bl	8005f04 <__multiply>
 80060ea:	6020      	str	r0, [r4, #0]
 80060ec:	f8c0 9000 	str.w	r9, [r0]
 80060f0:	4604      	mov	r4, r0
 80060f2:	e7e4      	b.n	80060be <__pow5mult+0x6a>
 80060f4:	4638      	mov	r0, r7
 80060f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fa:	bf00      	nop
 80060fc:	080083a8 	.word	0x080083a8
 8006100:	08008172 	.word	0x08008172
 8006104:	08008258 	.word	0x08008258

08006108 <__lshift>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	460c      	mov	r4, r1
 800610e:	4607      	mov	r7, r0
 8006110:	4691      	mov	r9, r2
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	6849      	ldr	r1, [r1, #4]
 8006116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800611a:	68a3      	ldr	r3, [r4, #8]
 800611c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006120:	f108 0601 	add.w	r6, r8, #1
 8006124:	42b3      	cmp	r3, r6
 8006126:	db0b      	blt.n	8006140 <__lshift+0x38>
 8006128:	4638      	mov	r0, r7
 800612a:	f7ff fddf 	bl	8005cec <_Balloc>
 800612e:	4605      	mov	r5, r0
 8006130:	b948      	cbnz	r0, 8006146 <__lshift+0x3e>
 8006132:	4602      	mov	r2, r0
 8006134:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006138:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <__lshift+0xd8>)
 800613a:	482a      	ldr	r0, [pc, #168]	; (80061e4 <__lshift+0xdc>)
 800613c:	f000 fd62 	bl	8006c04 <__assert_func>
 8006140:	3101      	adds	r1, #1
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	e7ee      	b.n	8006124 <__lshift+0x1c>
 8006146:	2300      	movs	r3, #0
 8006148:	f100 0114 	add.w	r1, r0, #20
 800614c:	f100 0210 	add.w	r2, r0, #16
 8006150:	4618      	mov	r0, r3
 8006152:	4553      	cmp	r3, sl
 8006154:	db37      	blt.n	80061c6 <__lshift+0xbe>
 8006156:	6920      	ldr	r0, [r4, #16]
 8006158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800615c:	f104 0314 	add.w	r3, r4, #20
 8006160:	f019 091f 	ands.w	r9, r9, #31
 8006164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006168:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800616c:	d02f      	beq.n	80061ce <__lshift+0xc6>
 800616e:	468a      	mov	sl, r1
 8006170:	f04f 0c00 	mov.w	ip, #0
 8006174:	f1c9 0e20 	rsb	lr, r9, #32
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	fa02 f209 	lsl.w	r2, r2, r9
 800617e:	ea42 020c 	orr.w	r2, r2, ip
 8006182:	f84a 2b04 	str.w	r2, [sl], #4
 8006186:	f853 2b04 	ldr.w	r2, [r3], #4
 800618a:	4298      	cmp	r0, r3
 800618c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006190:	d8f2      	bhi.n	8006178 <__lshift+0x70>
 8006192:	1b03      	subs	r3, r0, r4
 8006194:	3b15      	subs	r3, #21
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	3304      	adds	r3, #4
 800619c:	f104 0215 	add.w	r2, r4, #21
 80061a0:	4290      	cmp	r0, r2
 80061a2:	bf38      	it	cc
 80061a4:	2304      	movcc	r3, #4
 80061a6:	f841 c003 	str.w	ip, [r1, r3]
 80061aa:	f1bc 0f00 	cmp.w	ip, #0
 80061ae:	d001      	beq.n	80061b4 <__lshift+0xac>
 80061b0:	f108 0602 	add.w	r6, r8, #2
 80061b4:	3e01      	subs	r6, #1
 80061b6:	4638      	mov	r0, r7
 80061b8:	4621      	mov	r1, r4
 80061ba:	612e      	str	r6, [r5, #16]
 80061bc:	f7ff fdd6 	bl	8005d6c <_Bfree>
 80061c0:	4628      	mov	r0, r5
 80061c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80061ca:	3301      	adds	r3, #1
 80061cc:	e7c1      	b.n	8006152 <__lshift+0x4a>
 80061ce:	3904      	subs	r1, #4
 80061d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d4:	4298      	cmp	r0, r3
 80061d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80061da:	d8f9      	bhi.n	80061d0 <__lshift+0xc8>
 80061dc:	e7ea      	b.n	80061b4 <__lshift+0xac>
 80061de:	bf00      	nop
 80061e0:	080081e4 	.word	0x080081e4
 80061e4:	08008258 	.word	0x08008258

080061e8 <__mcmp>:
 80061e8:	4603      	mov	r3, r0
 80061ea:	690a      	ldr	r2, [r1, #16]
 80061ec:	6900      	ldr	r0, [r0, #16]
 80061ee:	b530      	push	{r4, r5, lr}
 80061f0:	1a80      	subs	r0, r0, r2
 80061f2:	d10d      	bne.n	8006210 <__mcmp+0x28>
 80061f4:	3314      	adds	r3, #20
 80061f6:	3114      	adds	r1, #20
 80061f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006200:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006208:	4295      	cmp	r5, r2
 800620a:	d002      	beq.n	8006212 <__mcmp+0x2a>
 800620c:	d304      	bcc.n	8006218 <__mcmp+0x30>
 800620e:	2001      	movs	r0, #1
 8006210:	bd30      	pop	{r4, r5, pc}
 8006212:	42a3      	cmp	r3, r4
 8006214:	d3f4      	bcc.n	8006200 <__mcmp+0x18>
 8006216:	e7fb      	b.n	8006210 <__mcmp+0x28>
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e7f8      	b.n	8006210 <__mcmp+0x28>
	...

08006220 <__mdiff>:
 8006220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	460d      	mov	r5, r1
 8006226:	4607      	mov	r7, r0
 8006228:	4611      	mov	r1, r2
 800622a:	4628      	mov	r0, r5
 800622c:	4614      	mov	r4, r2
 800622e:	f7ff ffdb 	bl	80061e8 <__mcmp>
 8006232:	1e06      	subs	r6, r0, #0
 8006234:	d111      	bne.n	800625a <__mdiff+0x3a>
 8006236:	4631      	mov	r1, r6
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff fd57 	bl	8005cec <_Balloc>
 800623e:	4602      	mov	r2, r0
 8006240:	b928      	cbnz	r0, 800624e <__mdiff+0x2e>
 8006242:	f240 2132 	movw	r1, #562	; 0x232
 8006246:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <__mdiff+0x110>)
 8006248:	483a      	ldr	r0, [pc, #232]	; (8006334 <__mdiff+0x114>)
 800624a:	f000 fcdb 	bl	8006c04 <__assert_func>
 800624e:	2301      	movs	r3, #1
 8006250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006254:	4610      	mov	r0, r2
 8006256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625a:	bfa4      	itt	ge
 800625c:	4623      	movge	r3, r4
 800625e:	462c      	movge	r4, r5
 8006260:	4638      	mov	r0, r7
 8006262:	6861      	ldr	r1, [r4, #4]
 8006264:	bfa6      	itte	ge
 8006266:	461d      	movge	r5, r3
 8006268:	2600      	movge	r6, #0
 800626a:	2601      	movlt	r6, #1
 800626c:	f7ff fd3e 	bl	8005cec <_Balloc>
 8006270:	4602      	mov	r2, r0
 8006272:	b918      	cbnz	r0, 800627c <__mdiff+0x5c>
 8006274:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006278:	4b2d      	ldr	r3, [pc, #180]	; (8006330 <__mdiff+0x110>)
 800627a:	e7e5      	b.n	8006248 <__mdiff+0x28>
 800627c:	f102 0814 	add.w	r8, r2, #20
 8006280:	46c2      	mov	sl, r8
 8006282:	f04f 0c00 	mov.w	ip, #0
 8006286:	6927      	ldr	r7, [r4, #16]
 8006288:	60c6      	str	r6, [r0, #12]
 800628a:	692e      	ldr	r6, [r5, #16]
 800628c:	f104 0014 	add.w	r0, r4, #20
 8006290:	f105 0914 	add.w	r9, r5, #20
 8006294:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006298:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800629c:	3410      	adds	r4, #16
 800629e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80062a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80062a6:	fa1f f18b 	uxth.w	r1, fp
 80062aa:	448c      	add	ip, r1
 80062ac:	b299      	uxth	r1, r3
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	ebac 0101 	sub.w	r1, ip, r1
 80062b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062bc:	b289      	uxth	r1, r1
 80062be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062c2:	454e      	cmp	r6, r9
 80062c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80062c8:	f84a 3b04 	str.w	r3, [sl], #4
 80062cc:	d8e7      	bhi.n	800629e <__mdiff+0x7e>
 80062ce:	1b73      	subs	r3, r6, r5
 80062d0:	3b15      	subs	r3, #21
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	3515      	adds	r5, #21
 80062d8:	3304      	adds	r3, #4
 80062da:	42ae      	cmp	r6, r5
 80062dc:	bf38      	it	cc
 80062de:	2304      	movcc	r3, #4
 80062e0:	4418      	add	r0, r3
 80062e2:	4443      	add	r3, r8
 80062e4:	461e      	mov	r6, r3
 80062e6:	4605      	mov	r5, r0
 80062e8:	4575      	cmp	r5, lr
 80062ea:	d30e      	bcc.n	800630a <__mdiff+0xea>
 80062ec:	f10e 0103 	add.w	r1, lr, #3
 80062f0:	1a09      	subs	r1, r1, r0
 80062f2:	f021 0103 	bic.w	r1, r1, #3
 80062f6:	3803      	subs	r0, #3
 80062f8:	4586      	cmp	lr, r0
 80062fa:	bf38      	it	cc
 80062fc:	2100      	movcc	r1, #0
 80062fe:	4419      	add	r1, r3
 8006300:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006304:	b18b      	cbz	r3, 800632a <__mdiff+0x10a>
 8006306:	6117      	str	r7, [r2, #16]
 8006308:	e7a4      	b.n	8006254 <__mdiff+0x34>
 800630a:	f855 8b04 	ldr.w	r8, [r5], #4
 800630e:	fa1f f188 	uxth.w	r1, r8
 8006312:	4461      	add	r1, ip
 8006314:	140c      	asrs	r4, r1, #16
 8006316:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800631a:	b289      	uxth	r1, r1
 800631c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006320:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006324:	f846 1b04 	str.w	r1, [r6], #4
 8006328:	e7de      	b.n	80062e8 <__mdiff+0xc8>
 800632a:	3f01      	subs	r7, #1
 800632c:	e7e8      	b.n	8006300 <__mdiff+0xe0>
 800632e:	bf00      	nop
 8006330:	080081e4 	.word	0x080081e4
 8006334:	08008258 	.word	0x08008258

08006338 <__d2b>:
 8006338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800633c:	2101      	movs	r1, #1
 800633e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006342:	4690      	mov	r8, r2
 8006344:	461d      	mov	r5, r3
 8006346:	f7ff fcd1 	bl	8005cec <_Balloc>
 800634a:	4604      	mov	r4, r0
 800634c:	b930      	cbnz	r0, 800635c <__d2b+0x24>
 800634e:	4602      	mov	r2, r0
 8006350:	f240 310a 	movw	r1, #778	; 0x30a
 8006354:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <__d2b+0xb0>)
 8006356:	4825      	ldr	r0, [pc, #148]	; (80063ec <__d2b+0xb4>)
 8006358:	f000 fc54 	bl	8006c04 <__assert_func>
 800635c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006360:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006364:	bb2d      	cbnz	r5, 80063b2 <__d2b+0x7a>
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	f1b8 0300 	subs.w	r3, r8, #0
 800636c:	d026      	beq.n	80063bc <__d2b+0x84>
 800636e:	4668      	mov	r0, sp
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	f7ff fd83 	bl	8005e7c <__lo0bits>
 8006376:	9900      	ldr	r1, [sp, #0]
 8006378:	b1f0      	cbz	r0, 80063b8 <__d2b+0x80>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	f1c0 0320 	rsb	r3, r0, #32
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	430b      	orrs	r3, r1
 8006386:	40c2      	lsrs	r2, r0
 8006388:	6163      	str	r3, [r4, #20]
 800638a:	9201      	str	r2, [sp, #4]
 800638c:	9b01      	ldr	r3, [sp, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf14      	ite	ne
 8006392:	2102      	movne	r1, #2
 8006394:	2101      	moveq	r1, #1
 8006396:	61a3      	str	r3, [r4, #24]
 8006398:	6121      	str	r1, [r4, #16]
 800639a:	b1c5      	cbz	r5, 80063ce <__d2b+0x96>
 800639c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063a0:	4405      	add	r5, r0
 80063a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063a6:	603d      	str	r5, [r7, #0]
 80063a8:	6030      	str	r0, [r6, #0]
 80063aa:	4620      	mov	r0, r4
 80063ac:	b002      	add	sp, #8
 80063ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b6:	e7d6      	b.n	8006366 <__d2b+0x2e>
 80063b8:	6161      	str	r1, [r4, #20]
 80063ba:	e7e7      	b.n	800638c <__d2b+0x54>
 80063bc:	a801      	add	r0, sp, #4
 80063be:	f7ff fd5d 	bl	8005e7c <__lo0bits>
 80063c2:	2101      	movs	r1, #1
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	6121      	str	r1, [r4, #16]
 80063c8:	6163      	str	r3, [r4, #20]
 80063ca:	3020      	adds	r0, #32
 80063cc:	e7e5      	b.n	800639a <__d2b+0x62>
 80063ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80063d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063d6:	6038      	str	r0, [r7, #0]
 80063d8:	6918      	ldr	r0, [r3, #16]
 80063da:	f7ff fd2f 	bl	8005e3c <__hi0bits>
 80063de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80063e2:	6031      	str	r1, [r6, #0]
 80063e4:	e7e1      	b.n	80063aa <__d2b+0x72>
 80063e6:	bf00      	nop
 80063e8:	080081e4 	.word	0x080081e4
 80063ec:	08008258 	.word	0x08008258

080063f0 <_calloc_r>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	fba1 5402 	umull	r5, r4, r1, r2
 80063f6:	b934      	cbnz	r4, 8006406 <_calloc_r+0x16>
 80063f8:	4629      	mov	r1, r5
 80063fa:	f000 f875 	bl	80064e8 <_malloc_r>
 80063fe:	4606      	mov	r6, r0
 8006400:	b928      	cbnz	r0, 800640e <_calloc_r+0x1e>
 8006402:	4630      	mov	r0, r6
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	220c      	movs	r2, #12
 8006408:	2600      	movs	r6, #0
 800640a:	6002      	str	r2, [r0, #0]
 800640c:	e7f9      	b.n	8006402 <_calloc_r+0x12>
 800640e:	462a      	mov	r2, r5
 8006410:	4621      	mov	r1, r4
 8006412:	f7fd fd4f 	bl	8003eb4 <memset>
 8006416:	e7f4      	b.n	8006402 <_calloc_r+0x12>

08006418 <_free_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4605      	mov	r5, r0
 800641c:	2900      	cmp	r1, #0
 800641e:	d040      	beq.n	80064a2 <_free_r+0x8a>
 8006420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006424:	1f0c      	subs	r4, r1, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfb8      	it	lt
 800642a:	18e4      	addlt	r4, r4, r3
 800642c:	f000 fc8a 	bl	8006d44 <__malloc_lock>
 8006430:	4a1c      	ldr	r2, [pc, #112]	; (80064a4 <_free_r+0x8c>)
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	b933      	cbnz	r3, 8006444 <_free_r+0x2c>
 8006436:	6063      	str	r3, [r4, #4]
 8006438:	6014      	str	r4, [r2, #0]
 800643a:	4628      	mov	r0, r5
 800643c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006440:	f000 bc86 	b.w	8006d50 <__malloc_unlock>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d908      	bls.n	800645a <_free_r+0x42>
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	1821      	adds	r1, r4, r0
 800644c:	428b      	cmp	r3, r1
 800644e:	bf01      	itttt	eq
 8006450:	6819      	ldreq	r1, [r3, #0]
 8006452:	685b      	ldreq	r3, [r3, #4]
 8006454:	1809      	addeq	r1, r1, r0
 8006456:	6021      	streq	r1, [r4, #0]
 8006458:	e7ed      	b.n	8006436 <_free_r+0x1e>
 800645a:	461a      	mov	r2, r3
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	b10b      	cbz	r3, 8006464 <_free_r+0x4c>
 8006460:	42a3      	cmp	r3, r4
 8006462:	d9fa      	bls.n	800645a <_free_r+0x42>
 8006464:	6811      	ldr	r1, [r2, #0]
 8006466:	1850      	adds	r0, r2, r1
 8006468:	42a0      	cmp	r0, r4
 800646a:	d10b      	bne.n	8006484 <_free_r+0x6c>
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	4401      	add	r1, r0
 8006470:	1850      	adds	r0, r2, r1
 8006472:	4283      	cmp	r3, r0
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	d1e0      	bne.n	800643a <_free_r+0x22>
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4401      	add	r1, r0
 800647e:	6011      	str	r1, [r2, #0]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	e7da      	b.n	800643a <_free_r+0x22>
 8006484:	d902      	bls.n	800648c <_free_r+0x74>
 8006486:	230c      	movs	r3, #12
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	e7d6      	b.n	800643a <_free_r+0x22>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	1821      	adds	r1, r4, r0
 8006490:	428b      	cmp	r3, r1
 8006492:	bf01      	itttt	eq
 8006494:	6819      	ldreq	r1, [r3, #0]
 8006496:	685b      	ldreq	r3, [r3, #4]
 8006498:	1809      	addeq	r1, r1, r0
 800649a:	6021      	streq	r1, [r4, #0]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	6054      	str	r4, [r2, #4]
 80064a0:	e7cb      	b.n	800643a <_free_r+0x22>
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	200004f0 	.word	0x200004f0

080064a8 <sbrk_aligned>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4e0e      	ldr	r6, [pc, #56]	; (80064e4 <sbrk_aligned+0x3c>)
 80064ac:	460c      	mov	r4, r1
 80064ae:	6831      	ldr	r1, [r6, #0]
 80064b0:	4605      	mov	r5, r0
 80064b2:	b911      	cbnz	r1, 80064ba <sbrk_aligned+0x12>
 80064b4:	f000 fb40 	bl	8006b38 <_sbrk_r>
 80064b8:	6030      	str	r0, [r6, #0]
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 fb3b 	bl	8006b38 <_sbrk_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d00a      	beq.n	80064dc <sbrk_aligned+0x34>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d007      	beq.n	80064e0 <sbrk_aligned+0x38>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 fb30 	bl	8006b38 <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d101      	bne.n	80064e0 <sbrk_aligned+0x38>
 80064dc:	f04f 34ff 	mov.w	r4, #4294967295
 80064e0:	4620      	mov	r0, r4
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	200004f4 	.word	0x200004f4

080064e8 <_malloc_r>:
 80064e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	1ccd      	adds	r5, r1, #3
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	4607      	mov	r7, r0
 80064fe:	db01      	blt.n	8006504 <_malloc_r+0x1c>
 8006500:	42a9      	cmp	r1, r5
 8006502:	d905      	bls.n	8006510 <_malloc_r+0x28>
 8006504:	230c      	movs	r3, #12
 8006506:	2600      	movs	r6, #0
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4630      	mov	r0, r6
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	4e2e      	ldr	r6, [pc, #184]	; (80065cc <_malloc_r+0xe4>)
 8006512:	f000 fc17 	bl	8006d44 <__malloc_lock>
 8006516:	6833      	ldr	r3, [r6, #0]
 8006518:	461c      	mov	r4, r3
 800651a:	bb34      	cbnz	r4, 800656a <_malloc_r+0x82>
 800651c:	4629      	mov	r1, r5
 800651e:	4638      	mov	r0, r7
 8006520:	f7ff ffc2 	bl	80064a8 <sbrk_aligned>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	4604      	mov	r4, r0
 8006528:	d14d      	bne.n	80065c6 <_malloc_r+0xde>
 800652a:	6834      	ldr	r4, [r6, #0]
 800652c:	4626      	mov	r6, r4
 800652e:	2e00      	cmp	r6, #0
 8006530:	d140      	bne.n	80065b4 <_malloc_r+0xcc>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	4631      	mov	r1, r6
 8006536:	4638      	mov	r0, r7
 8006538:	eb04 0803 	add.w	r8, r4, r3
 800653c:	f000 fafc 	bl	8006b38 <_sbrk_r>
 8006540:	4580      	cmp	r8, r0
 8006542:	d13a      	bne.n	80065ba <_malloc_r+0xd2>
 8006544:	6821      	ldr	r1, [r4, #0]
 8006546:	3503      	adds	r5, #3
 8006548:	1a6d      	subs	r5, r5, r1
 800654a:	f025 0503 	bic.w	r5, r5, #3
 800654e:	3508      	adds	r5, #8
 8006550:	2d0c      	cmp	r5, #12
 8006552:	bf38      	it	cc
 8006554:	250c      	movcc	r5, #12
 8006556:	4638      	mov	r0, r7
 8006558:	4629      	mov	r1, r5
 800655a:	f7ff ffa5 	bl	80064a8 <sbrk_aligned>
 800655e:	3001      	adds	r0, #1
 8006560:	d02b      	beq.n	80065ba <_malloc_r+0xd2>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	442b      	add	r3, r5
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	e00e      	b.n	8006588 <_malloc_r+0xa0>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	1b52      	subs	r2, r2, r5
 800656e:	d41e      	bmi.n	80065ae <_malloc_r+0xc6>
 8006570:	2a0b      	cmp	r2, #11
 8006572:	d916      	bls.n	80065a2 <_malloc_r+0xba>
 8006574:	1961      	adds	r1, r4, r5
 8006576:	42a3      	cmp	r3, r4
 8006578:	6025      	str	r5, [r4, #0]
 800657a:	bf18      	it	ne
 800657c:	6059      	strne	r1, [r3, #4]
 800657e:	6863      	ldr	r3, [r4, #4]
 8006580:	bf08      	it	eq
 8006582:	6031      	streq	r1, [r6, #0]
 8006584:	5162      	str	r2, [r4, r5]
 8006586:	604b      	str	r3, [r1, #4]
 8006588:	4638      	mov	r0, r7
 800658a:	f104 060b 	add.w	r6, r4, #11
 800658e:	f000 fbdf 	bl	8006d50 <__malloc_unlock>
 8006592:	f026 0607 	bic.w	r6, r6, #7
 8006596:	1d23      	adds	r3, r4, #4
 8006598:	1af2      	subs	r2, r6, r3
 800659a:	d0b6      	beq.n	800650a <_malloc_r+0x22>
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	50a3      	str	r3, [r4, r2]
 80065a0:	e7b3      	b.n	800650a <_malloc_r+0x22>
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	bf0c      	ite	eq
 80065a8:	6032      	streq	r2, [r6, #0]
 80065aa:	605a      	strne	r2, [r3, #4]
 80065ac:	e7ec      	b.n	8006588 <_malloc_r+0xa0>
 80065ae:	4623      	mov	r3, r4
 80065b0:	6864      	ldr	r4, [r4, #4]
 80065b2:	e7b2      	b.n	800651a <_malloc_r+0x32>
 80065b4:	4634      	mov	r4, r6
 80065b6:	6876      	ldr	r6, [r6, #4]
 80065b8:	e7b9      	b.n	800652e <_malloc_r+0x46>
 80065ba:	230c      	movs	r3, #12
 80065bc:	4638      	mov	r0, r7
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	f000 fbc6 	bl	8006d50 <__malloc_unlock>
 80065c4:	e7a1      	b.n	800650a <_malloc_r+0x22>
 80065c6:	6025      	str	r5, [r4, #0]
 80065c8:	e7de      	b.n	8006588 <_malloc_r+0xa0>
 80065ca:	bf00      	nop
 80065cc:	200004f0 	.word	0x200004f0

080065d0 <__ssputs_r>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	688e      	ldr	r6, [r1, #8]
 80065d6:	4682      	mov	sl, r0
 80065d8:	429e      	cmp	r6, r3
 80065da:	460c      	mov	r4, r1
 80065dc:	4690      	mov	r8, r2
 80065de:	461f      	mov	r7, r3
 80065e0:	d838      	bhi.n	8006654 <__ssputs_r+0x84>
 80065e2:	898a      	ldrh	r2, [r1, #12]
 80065e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065e8:	d032      	beq.n	8006650 <__ssputs_r+0x80>
 80065ea:	6825      	ldr	r5, [r4, #0]
 80065ec:	6909      	ldr	r1, [r1, #16]
 80065ee:	3301      	adds	r3, #1
 80065f0:	eba5 0901 	sub.w	r9, r5, r1
 80065f4:	6965      	ldr	r5, [r4, #20]
 80065f6:	444b      	add	r3, r9
 80065f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006600:	106d      	asrs	r5, r5, #1
 8006602:	429d      	cmp	r5, r3
 8006604:	bf38      	it	cc
 8006606:	461d      	movcc	r5, r3
 8006608:	0553      	lsls	r3, r2, #21
 800660a:	d531      	bpl.n	8006670 <__ssputs_r+0xa0>
 800660c:	4629      	mov	r1, r5
 800660e:	f7ff ff6b 	bl	80064e8 <_malloc_r>
 8006612:	4606      	mov	r6, r0
 8006614:	b950      	cbnz	r0, 800662c <__ssputs_r+0x5c>
 8006616:	230c      	movs	r3, #12
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	f8ca 3000 	str.w	r3, [sl]
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662c:	464a      	mov	r2, r9
 800662e:	6921      	ldr	r1, [r4, #16]
 8006630:	f7ff fb4e 	bl	8005cd0 <memcpy>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	6126      	str	r6, [r4, #16]
 8006642:	444e      	add	r6, r9
 8006644:	6026      	str	r6, [r4, #0]
 8006646:	463e      	mov	r6, r7
 8006648:	6165      	str	r5, [r4, #20]
 800664a:	eba5 0509 	sub.w	r5, r5, r9
 800664e:	60a5      	str	r5, [r4, #8]
 8006650:	42be      	cmp	r6, r7
 8006652:	d900      	bls.n	8006656 <__ssputs_r+0x86>
 8006654:	463e      	mov	r6, r7
 8006656:	4632      	mov	r2, r6
 8006658:	4641      	mov	r1, r8
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	f000 fb58 	bl	8006d10 <memmove>
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	2000      	movs	r0, #0
 8006664:	1b9b      	subs	r3, r3, r6
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	4433      	add	r3, r6
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	e7db      	b.n	8006628 <__ssputs_r+0x58>
 8006670:	462a      	mov	r2, r5
 8006672:	f000 fb73 	bl	8006d5c <_realloc_r>
 8006676:	4606      	mov	r6, r0
 8006678:	2800      	cmp	r0, #0
 800667a:	d1e1      	bne.n	8006640 <__ssputs_r+0x70>
 800667c:	4650      	mov	r0, sl
 800667e:	6921      	ldr	r1, [r4, #16]
 8006680:	f7ff feca 	bl	8006418 <_free_r>
 8006684:	e7c7      	b.n	8006616 <__ssputs_r+0x46>
	...

08006688 <_svfiprintf_r>:
 8006688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668c:	4698      	mov	r8, r3
 800668e:	898b      	ldrh	r3, [r1, #12]
 8006690:	4607      	mov	r7, r0
 8006692:	061b      	lsls	r3, r3, #24
 8006694:	460d      	mov	r5, r1
 8006696:	4614      	mov	r4, r2
 8006698:	b09d      	sub	sp, #116	; 0x74
 800669a:	d50e      	bpl.n	80066ba <_svfiprintf_r+0x32>
 800669c:	690b      	ldr	r3, [r1, #16]
 800669e:	b963      	cbnz	r3, 80066ba <_svfiprintf_r+0x32>
 80066a0:	2140      	movs	r1, #64	; 0x40
 80066a2:	f7ff ff21 	bl	80064e8 <_malloc_r>
 80066a6:	6028      	str	r0, [r5, #0]
 80066a8:	6128      	str	r0, [r5, #16]
 80066aa:	b920      	cbnz	r0, 80066b6 <_svfiprintf_r+0x2e>
 80066ac:	230c      	movs	r3, #12
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	e0d1      	b.n	800685a <_svfiprintf_r+0x1d2>
 80066b6:	2340      	movs	r3, #64	; 0x40
 80066b8:	616b      	str	r3, [r5, #20]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9309      	str	r3, [sp, #36]	; 0x24
 80066be:	2320      	movs	r3, #32
 80066c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066c4:	2330      	movs	r3, #48	; 0x30
 80066c6:	f04f 0901 	mov.w	r9, #1
 80066ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006874 <_svfiprintf_r+0x1ec>
 80066d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066d6:	4623      	mov	r3, r4
 80066d8:	469a      	mov	sl, r3
 80066da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066de:	b10a      	cbz	r2, 80066e4 <_svfiprintf_r+0x5c>
 80066e0:	2a25      	cmp	r2, #37	; 0x25
 80066e2:	d1f9      	bne.n	80066d8 <_svfiprintf_r+0x50>
 80066e4:	ebba 0b04 	subs.w	fp, sl, r4
 80066e8:	d00b      	beq.n	8006702 <_svfiprintf_r+0x7a>
 80066ea:	465b      	mov	r3, fp
 80066ec:	4622      	mov	r2, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	4638      	mov	r0, r7
 80066f2:	f7ff ff6d 	bl	80065d0 <__ssputs_r>
 80066f6:	3001      	adds	r0, #1
 80066f8:	f000 80aa 	beq.w	8006850 <_svfiprintf_r+0x1c8>
 80066fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066fe:	445a      	add	r2, fp
 8006700:	9209      	str	r2, [sp, #36]	; 0x24
 8006702:	f89a 3000 	ldrb.w	r3, [sl]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80a2 	beq.w	8006850 <_svfiprintf_r+0x1c8>
 800670c:	2300      	movs	r3, #0
 800670e:	f04f 32ff 	mov.w	r2, #4294967295
 8006712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006716:	f10a 0a01 	add.w	sl, sl, #1
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	9307      	str	r3, [sp, #28]
 800671e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006722:	931a      	str	r3, [sp, #104]	; 0x68
 8006724:	4654      	mov	r4, sl
 8006726:	2205      	movs	r2, #5
 8006728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672c:	4851      	ldr	r0, [pc, #324]	; (8006874 <_svfiprintf_r+0x1ec>)
 800672e:	f7ff fac1 	bl	8005cb4 <memchr>
 8006732:	9a04      	ldr	r2, [sp, #16]
 8006734:	b9d8      	cbnz	r0, 800676e <_svfiprintf_r+0xe6>
 8006736:	06d0      	lsls	r0, r2, #27
 8006738:	bf44      	itt	mi
 800673a:	2320      	movmi	r3, #32
 800673c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006740:	0711      	lsls	r1, r2, #28
 8006742:	bf44      	itt	mi
 8006744:	232b      	movmi	r3, #43	; 0x2b
 8006746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800674a:	f89a 3000 	ldrb.w	r3, [sl]
 800674e:	2b2a      	cmp	r3, #42	; 0x2a
 8006750:	d015      	beq.n	800677e <_svfiprintf_r+0xf6>
 8006752:	4654      	mov	r4, sl
 8006754:	2000      	movs	r0, #0
 8006756:	f04f 0c0a 	mov.w	ip, #10
 800675a:	9a07      	ldr	r2, [sp, #28]
 800675c:	4621      	mov	r1, r4
 800675e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006762:	3b30      	subs	r3, #48	; 0x30
 8006764:	2b09      	cmp	r3, #9
 8006766:	d94e      	bls.n	8006806 <_svfiprintf_r+0x17e>
 8006768:	b1b0      	cbz	r0, 8006798 <_svfiprintf_r+0x110>
 800676a:	9207      	str	r2, [sp, #28]
 800676c:	e014      	b.n	8006798 <_svfiprintf_r+0x110>
 800676e:	eba0 0308 	sub.w	r3, r0, r8
 8006772:	fa09 f303 	lsl.w	r3, r9, r3
 8006776:	4313      	orrs	r3, r2
 8006778:	46a2      	mov	sl, r4
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	e7d2      	b.n	8006724 <_svfiprintf_r+0x9c>
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	1d19      	adds	r1, r3, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	9103      	str	r1, [sp, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	bfbb      	ittet	lt
 800678a:	425b      	neglt	r3, r3
 800678c:	f042 0202 	orrlt.w	r2, r2, #2
 8006790:	9307      	strge	r3, [sp, #28]
 8006792:	9307      	strlt	r3, [sp, #28]
 8006794:	bfb8      	it	lt
 8006796:	9204      	strlt	r2, [sp, #16]
 8006798:	7823      	ldrb	r3, [r4, #0]
 800679a:	2b2e      	cmp	r3, #46	; 0x2e
 800679c:	d10c      	bne.n	80067b8 <_svfiprintf_r+0x130>
 800679e:	7863      	ldrb	r3, [r4, #1]
 80067a0:	2b2a      	cmp	r3, #42	; 0x2a
 80067a2:	d135      	bne.n	8006810 <_svfiprintf_r+0x188>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	3402      	adds	r4, #2
 80067a8:	1d1a      	adds	r2, r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	9203      	str	r2, [sp, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfb8      	it	lt
 80067b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006878 <_svfiprintf_r+0x1f0>
 80067bc:	2203      	movs	r2, #3
 80067be:	4650      	mov	r0, sl
 80067c0:	7821      	ldrb	r1, [r4, #0]
 80067c2:	f7ff fa77 	bl	8005cb4 <memchr>
 80067c6:	b140      	cbz	r0, 80067da <_svfiprintf_r+0x152>
 80067c8:	2340      	movs	r3, #64	; 0x40
 80067ca:	eba0 000a 	sub.w	r0, r0, sl
 80067ce:	fa03 f000 	lsl.w	r0, r3, r0
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	3401      	adds	r4, #1
 80067d6:	4303      	orrs	r3, r0
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067de:	2206      	movs	r2, #6
 80067e0:	4826      	ldr	r0, [pc, #152]	; (800687c <_svfiprintf_r+0x1f4>)
 80067e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e6:	f7ff fa65 	bl	8005cb4 <memchr>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d038      	beq.n	8006860 <_svfiprintf_r+0x1d8>
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <_svfiprintf_r+0x1f8>)
 80067f0:	bb1b      	cbnz	r3, 800683a <_svfiprintf_r+0x1b2>
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	3307      	adds	r3, #7
 80067f6:	f023 0307 	bic.w	r3, r3, #7
 80067fa:	3308      	adds	r3, #8
 80067fc:	9303      	str	r3, [sp, #12]
 80067fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006800:	4433      	add	r3, r6
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	e767      	b.n	80066d6 <_svfiprintf_r+0x4e>
 8006806:	460c      	mov	r4, r1
 8006808:	2001      	movs	r0, #1
 800680a:	fb0c 3202 	mla	r2, ip, r2, r3
 800680e:	e7a5      	b.n	800675c <_svfiprintf_r+0xd4>
 8006810:	2300      	movs	r3, #0
 8006812:	f04f 0c0a 	mov.w	ip, #10
 8006816:	4619      	mov	r1, r3
 8006818:	3401      	adds	r4, #1
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	4620      	mov	r0, r4
 800681e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006822:	3a30      	subs	r2, #48	; 0x30
 8006824:	2a09      	cmp	r2, #9
 8006826:	d903      	bls.n	8006830 <_svfiprintf_r+0x1a8>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0c5      	beq.n	80067b8 <_svfiprintf_r+0x130>
 800682c:	9105      	str	r1, [sp, #20]
 800682e:	e7c3      	b.n	80067b8 <_svfiprintf_r+0x130>
 8006830:	4604      	mov	r4, r0
 8006832:	2301      	movs	r3, #1
 8006834:	fb0c 2101 	mla	r1, ip, r1, r2
 8006838:	e7f0      	b.n	800681c <_svfiprintf_r+0x194>
 800683a:	ab03      	add	r3, sp, #12
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	462a      	mov	r2, r5
 8006840:	4638      	mov	r0, r7
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <_svfiprintf_r+0x1fc>)
 8006844:	a904      	add	r1, sp, #16
 8006846:	f7fd fbdb 	bl	8004000 <_printf_float>
 800684a:	1c42      	adds	r2, r0, #1
 800684c:	4606      	mov	r6, r0
 800684e:	d1d6      	bne.n	80067fe <_svfiprintf_r+0x176>
 8006850:	89ab      	ldrh	r3, [r5, #12]
 8006852:	065b      	lsls	r3, r3, #25
 8006854:	f53f af2c 	bmi.w	80066b0 <_svfiprintf_r+0x28>
 8006858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800685a:	b01d      	add	sp, #116	; 0x74
 800685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006860:	ab03      	add	r3, sp, #12
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	462a      	mov	r2, r5
 8006866:	4638      	mov	r0, r7
 8006868:	4b06      	ldr	r3, [pc, #24]	; (8006884 <_svfiprintf_r+0x1fc>)
 800686a:	a904      	add	r1, sp, #16
 800686c:	f7fd fe64 	bl	8004538 <_printf_i>
 8006870:	e7eb      	b.n	800684a <_svfiprintf_r+0x1c2>
 8006872:	bf00      	nop
 8006874:	080083b4 	.word	0x080083b4
 8006878:	080083ba 	.word	0x080083ba
 800687c:	080083be 	.word	0x080083be
 8006880:	08004001 	.word	0x08004001
 8006884:	080065d1 	.word	0x080065d1

08006888 <__sfputc_r>:
 8006888:	6893      	ldr	r3, [r2, #8]
 800688a:	b410      	push	{r4}
 800688c:	3b01      	subs	r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	6093      	str	r3, [r2, #8]
 8006892:	da07      	bge.n	80068a4 <__sfputc_r+0x1c>
 8006894:	6994      	ldr	r4, [r2, #24]
 8006896:	42a3      	cmp	r3, r4
 8006898:	db01      	blt.n	800689e <__sfputc_r+0x16>
 800689a:	290a      	cmp	r1, #10
 800689c:	d102      	bne.n	80068a4 <__sfputc_r+0x1c>
 800689e:	bc10      	pop	{r4}
 80068a0:	f7fe b8a4 	b.w	80049ec <__swbuf_r>
 80068a4:	6813      	ldr	r3, [r2, #0]
 80068a6:	1c58      	adds	r0, r3, #1
 80068a8:	6010      	str	r0, [r2, #0]
 80068aa:	7019      	strb	r1, [r3, #0]
 80068ac:	4608      	mov	r0, r1
 80068ae:	bc10      	pop	{r4}
 80068b0:	4770      	bx	lr

080068b2 <__sfputs_r>:
 80068b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b4:	4606      	mov	r6, r0
 80068b6:	460f      	mov	r7, r1
 80068b8:	4614      	mov	r4, r2
 80068ba:	18d5      	adds	r5, r2, r3
 80068bc:	42ac      	cmp	r4, r5
 80068be:	d101      	bne.n	80068c4 <__sfputs_r+0x12>
 80068c0:	2000      	movs	r0, #0
 80068c2:	e007      	b.n	80068d4 <__sfputs_r+0x22>
 80068c4:	463a      	mov	r2, r7
 80068c6:	4630      	mov	r0, r6
 80068c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068cc:	f7ff ffdc 	bl	8006888 <__sfputc_r>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d1f3      	bne.n	80068bc <__sfputs_r+0xa>
 80068d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068d8 <_vfiprintf_r>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	460d      	mov	r5, r1
 80068de:	4614      	mov	r4, r2
 80068e0:	4698      	mov	r8, r3
 80068e2:	4606      	mov	r6, r0
 80068e4:	b09d      	sub	sp, #116	; 0x74
 80068e6:	b118      	cbz	r0, 80068f0 <_vfiprintf_r+0x18>
 80068e8:	6983      	ldr	r3, [r0, #24]
 80068ea:	b90b      	cbnz	r3, 80068f0 <_vfiprintf_r+0x18>
 80068ec:	f7ff f8d0 	bl	8005a90 <__sinit>
 80068f0:	4b89      	ldr	r3, [pc, #548]	; (8006b18 <_vfiprintf_r+0x240>)
 80068f2:	429d      	cmp	r5, r3
 80068f4:	d11b      	bne.n	800692e <_vfiprintf_r+0x56>
 80068f6:	6875      	ldr	r5, [r6, #4]
 80068f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068fa:	07d9      	lsls	r1, r3, #31
 80068fc:	d405      	bmi.n	800690a <_vfiprintf_r+0x32>
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	059a      	lsls	r2, r3, #22
 8006902:	d402      	bmi.n	800690a <_vfiprintf_r+0x32>
 8006904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006906:	f7ff f966 	bl	8005bd6 <__retarget_lock_acquire_recursive>
 800690a:	89ab      	ldrh	r3, [r5, #12]
 800690c:	071b      	lsls	r3, r3, #28
 800690e:	d501      	bpl.n	8006914 <_vfiprintf_r+0x3c>
 8006910:	692b      	ldr	r3, [r5, #16]
 8006912:	b9eb      	cbnz	r3, 8006950 <_vfiprintf_r+0x78>
 8006914:	4629      	mov	r1, r5
 8006916:	4630      	mov	r0, r6
 8006918:	f7fe f8ba 	bl	8004a90 <__swsetup_r>
 800691c:	b1c0      	cbz	r0, 8006950 <_vfiprintf_r+0x78>
 800691e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006920:	07dc      	lsls	r4, r3, #31
 8006922:	d50e      	bpl.n	8006942 <_vfiprintf_r+0x6a>
 8006924:	f04f 30ff 	mov.w	r0, #4294967295
 8006928:	b01d      	add	sp, #116	; 0x74
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	4b7b      	ldr	r3, [pc, #492]	; (8006b1c <_vfiprintf_r+0x244>)
 8006930:	429d      	cmp	r5, r3
 8006932:	d101      	bne.n	8006938 <_vfiprintf_r+0x60>
 8006934:	68b5      	ldr	r5, [r6, #8]
 8006936:	e7df      	b.n	80068f8 <_vfiprintf_r+0x20>
 8006938:	4b79      	ldr	r3, [pc, #484]	; (8006b20 <_vfiprintf_r+0x248>)
 800693a:	429d      	cmp	r5, r3
 800693c:	bf08      	it	eq
 800693e:	68f5      	ldreq	r5, [r6, #12]
 8006940:	e7da      	b.n	80068f8 <_vfiprintf_r+0x20>
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	0598      	lsls	r0, r3, #22
 8006946:	d4ed      	bmi.n	8006924 <_vfiprintf_r+0x4c>
 8006948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800694a:	f7ff f945 	bl	8005bd8 <__retarget_lock_release_recursive>
 800694e:	e7e9      	b.n	8006924 <_vfiprintf_r+0x4c>
 8006950:	2300      	movs	r3, #0
 8006952:	9309      	str	r3, [sp, #36]	; 0x24
 8006954:	2320      	movs	r3, #32
 8006956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800695a:	2330      	movs	r3, #48	; 0x30
 800695c:	f04f 0901 	mov.w	r9, #1
 8006960:	f8cd 800c 	str.w	r8, [sp, #12]
 8006964:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b24 <_vfiprintf_r+0x24c>
 8006968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800696c:	4623      	mov	r3, r4
 800696e:	469a      	mov	sl, r3
 8006970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006974:	b10a      	cbz	r2, 800697a <_vfiprintf_r+0xa2>
 8006976:	2a25      	cmp	r2, #37	; 0x25
 8006978:	d1f9      	bne.n	800696e <_vfiprintf_r+0x96>
 800697a:	ebba 0b04 	subs.w	fp, sl, r4
 800697e:	d00b      	beq.n	8006998 <_vfiprintf_r+0xc0>
 8006980:	465b      	mov	r3, fp
 8006982:	4622      	mov	r2, r4
 8006984:	4629      	mov	r1, r5
 8006986:	4630      	mov	r0, r6
 8006988:	f7ff ff93 	bl	80068b2 <__sfputs_r>
 800698c:	3001      	adds	r0, #1
 800698e:	f000 80aa 	beq.w	8006ae6 <_vfiprintf_r+0x20e>
 8006992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006994:	445a      	add	r2, fp
 8006996:	9209      	str	r2, [sp, #36]	; 0x24
 8006998:	f89a 3000 	ldrb.w	r3, [sl]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80a2 	beq.w	8006ae6 <_vfiprintf_r+0x20e>
 80069a2:	2300      	movs	r3, #0
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295
 80069a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ac:	f10a 0a01 	add.w	sl, sl, #1
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	9307      	str	r3, [sp, #28]
 80069b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069b8:	931a      	str	r3, [sp, #104]	; 0x68
 80069ba:	4654      	mov	r4, sl
 80069bc:	2205      	movs	r2, #5
 80069be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c2:	4858      	ldr	r0, [pc, #352]	; (8006b24 <_vfiprintf_r+0x24c>)
 80069c4:	f7ff f976 	bl	8005cb4 <memchr>
 80069c8:	9a04      	ldr	r2, [sp, #16]
 80069ca:	b9d8      	cbnz	r0, 8006a04 <_vfiprintf_r+0x12c>
 80069cc:	06d1      	lsls	r1, r2, #27
 80069ce:	bf44      	itt	mi
 80069d0:	2320      	movmi	r3, #32
 80069d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069d6:	0713      	lsls	r3, r2, #28
 80069d8:	bf44      	itt	mi
 80069da:	232b      	movmi	r3, #43	; 0x2b
 80069dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069e0:	f89a 3000 	ldrb.w	r3, [sl]
 80069e4:	2b2a      	cmp	r3, #42	; 0x2a
 80069e6:	d015      	beq.n	8006a14 <_vfiprintf_r+0x13c>
 80069e8:	4654      	mov	r4, sl
 80069ea:	2000      	movs	r0, #0
 80069ec:	f04f 0c0a 	mov.w	ip, #10
 80069f0:	9a07      	ldr	r2, [sp, #28]
 80069f2:	4621      	mov	r1, r4
 80069f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f8:	3b30      	subs	r3, #48	; 0x30
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	d94e      	bls.n	8006a9c <_vfiprintf_r+0x1c4>
 80069fe:	b1b0      	cbz	r0, 8006a2e <_vfiprintf_r+0x156>
 8006a00:	9207      	str	r2, [sp, #28]
 8006a02:	e014      	b.n	8006a2e <_vfiprintf_r+0x156>
 8006a04:	eba0 0308 	sub.w	r3, r0, r8
 8006a08:	fa09 f303 	lsl.w	r3, r9, r3
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	46a2      	mov	sl, r4
 8006a10:	9304      	str	r3, [sp, #16]
 8006a12:	e7d2      	b.n	80069ba <_vfiprintf_r+0xe2>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	1d19      	adds	r1, r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	9103      	str	r1, [sp, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bfbb      	ittet	lt
 8006a20:	425b      	neglt	r3, r3
 8006a22:	f042 0202 	orrlt.w	r2, r2, #2
 8006a26:	9307      	strge	r3, [sp, #28]
 8006a28:	9307      	strlt	r3, [sp, #28]
 8006a2a:	bfb8      	it	lt
 8006a2c:	9204      	strlt	r2, [sp, #16]
 8006a2e:	7823      	ldrb	r3, [r4, #0]
 8006a30:	2b2e      	cmp	r3, #46	; 0x2e
 8006a32:	d10c      	bne.n	8006a4e <_vfiprintf_r+0x176>
 8006a34:	7863      	ldrb	r3, [r4, #1]
 8006a36:	2b2a      	cmp	r3, #42	; 0x2a
 8006a38:	d135      	bne.n	8006aa6 <_vfiprintf_r+0x1ce>
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	3402      	adds	r4, #2
 8006a3e:	1d1a      	adds	r2, r3, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	9203      	str	r2, [sp, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bfb8      	it	lt
 8006a48:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006b28 <_vfiprintf_r+0x250>
 8006a52:	2203      	movs	r2, #3
 8006a54:	4650      	mov	r0, sl
 8006a56:	7821      	ldrb	r1, [r4, #0]
 8006a58:	f7ff f92c 	bl	8005cb4 <memchr>
 8006a5c:	b140      	cbz	r0, 8006a70 <_vfiprintf_r+0x198>
 8006a5e:	2340      	movs	r3, #64	; 0x40
 8006a60:	eba0 000a 	sub.w	r0, r0, sl
 8006a64:	fa03 f000 	lsl.w	r0, r3, r0
 8006a68:	9b04      	ldr	r3, [sp, #16]
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	4303      	orrs	r3, r0
 8006a6e:	9304      	str	r3, [sp, #16]
 8006a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a74:	2206      	movs	r2, #6
 8006a76:	482d      	ldr	r0, [pc, #180]	; (8006b2c <_vfiprintf_r+0x254>)
 8006a78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a7c:	f7ff f91a 	bl	8005cb4 <memchr>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d03f      	beq.n	8006b04 <_vfiprintf_r+0x22c>
 8006a84:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <_vfiprintf_r+0x258>)
 8006a86:	bb1b      	cbnz	r3, 8006ad0 <_vfiprintf_r+0x1f8>
 8006a88:	9b03      	ldr	r3, [sp, #12]
 8006a8a:	3307      	adds	r3, #7
 8006a8c:	f023 0307 	bic.w	r3, r3, #7
 8006a90:	3308      	adds	r3, #8
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a96:	443b      	add	r3, r7
 8006a98:	9309      	str	r3, [sp, #36]	; 0x24
 8006a9a:	e767      	b.n	800696c <_vfiprintf_r+0x94>
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aa4:	e7a5      	b.n	80069f2 <_vfiprintf_r+0x11a>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f04f 0c0a 	mov.w	ip, #10
 8006aac:	4619      	mov	r1, r3
 8006aae:	3401      	adds	r4, #1
 8006ab0:	9305      	str	r3, [sp, #20]
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab8:	3a30      	subs	r2, #48	; 0x30
 8006aba:	2a09      	cmp	r2, #9
 8006abc:	d903      	bls.n	8006ac6 <_vfiprintf_r+0x1ee>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0c5      	beq.n	8006a4e <_vfiprintf_r+0x176>
 8006ac2:	9105      	str	r1, [sp, #20]
 8006ac4:	e7c3      	b.n	8006a4e <_vfiprintf_r+0x176>
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	2301      	movs	r3, #1
 8006aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ace:	e7f0      	b.n	8006ab2 <_vfiprintf_r+0x1da>
 8006ad0:	ab03      	add	r3, sp, #12
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	462a      	mov	r2, r5
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <_vfiprintf_r+0x25c>)
 8006ada:	a904      	add	r1, sp, #16
 8006adc:	f7fd fa90 	bl	8004000 <_printf_float>
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	1c78      	adds	r0, r7, #1
 8006ae4:	d1d6      	bne.n	8006a94 <_vfiprintf_r+0x1bc>
 8006ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ae8:	07d9      	lsls	r1, r3, #31
 8006aea:	d405      	bmi.n	8006af8 <_vfiprintf_r+0x220>
 8006aec:	89ab      	ldrh	r3, [r5, #12]
 8006aee:	059a      	lsls	r2, r3, #22
 8006af0:	d402      	bmi.n	8006af8 <_vfiprintf_r+0x220>
 8006af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006af4:	f7ff f870 	bl	8005bd8 <__retarget_lock_release_recursive>
 8006af8:	89ab      	ldrh	r3, [r5, #12]
 8006afa:	065b      	lsls	r3, r3, #25
 8006afc:	f53f af12 	bmi.w	8006924 <_vfiprintf_r+0x4c>
 8006b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b02:	e711      	b.n	8006928 <_vfiprintf_r+0x50>
 8006b04:	ab03      	add	r3, sp, #12
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	462a      	mov	r2, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <_vfiprintf_r+0x25c>)
 8006b0e:	a904      	add	r1, sp, #16
 8006b10:	f7fd fd12 	bl	8004538 <_printf_i>
 8006b14:	e7e4      	b.n	8006ae0 <_vfiprintf_r+0x208>
 8006b16:	bf00      	nop
 8006b18:	08008218 	.word	0x08008218
 8006b1c:	08008238 	.word	0x08008238
 8006b20:	080081f8 	.word	0x080081f8
 8006b24:	080083b4 	.word	0x080083b4
 8006b28:	080083ba 	.word	0x080083ba
 8006b2c:	080083be 	.word	0x080083be
 8006b30:	08004001 	.word	0x08004001
 8006b34:	080068b3 	.word	0x080068b3

08006b38 <_sbrk_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4d05      	ldr	r5, [pc, #20]	; (8006b54 <_sbrk_r+0x1c>)
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fc fd70 	bl	8003628 <_sbrk>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_sbrk_r+0x1a>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_sbrk_r+0x1a>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	200004f8 	.word	0x200004f8

08006b58 <__sread>:
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	f000 f92c 	bl	8006dbc <_read_r>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	bfab      	itete	ge
 8006b68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b6c:	181b      	addge	r3, r3, r0
 8006b6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b72:	bfac      	ite	ge
 8006b74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b76:	81a3      	strhlt	r3, [r4, #12]
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <__swrite>:
 8006b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7e:	461f      	mov	r7, r3
 8006b80:	898b      	ldrh	r3, [r1, #12]
 8006b82:	4605      	mov	r5, r0
 8006b84:	05db      	lsls	r3, r3, #23
 8006b86:	460c      	mov	r4, r1
 8006b88:	4616      	mov	r6, r2
 8006b8a:	d505      	bpl.n	8006b98 <__swrite+0x1e>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b94:	f000 f898 	bl	8006cc8 <_lseek_r>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	4632      	mov	r2, r6
 8006b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba0:	81a3      	strh	r3, [r4, #12]
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	463b      	mov	r3, r7
 8006ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bae:	f000 b817 	b.w	8006be0 <_write_r>

08006bb2 <__sseek>:
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bba:	f000 f885 	bl	8006cc8 <_lseek_r>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	bf15      	itete	ne
 8006bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bce:	81a3      	strheq	r3, [r4, #12]
 8006bd0:	bf18      	it	ne
 8006bd2:	81a3      	strhne	r3, [r4, #12]
 8006bd4:	bd10      	pop	{r4, pc}

08006bd6 <__sclose>:
 8006bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bda:	f000 b831 	b.w	8006c40 <_close_r>
	...

08006be0 <_write_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	2200      	movs	r2, #0
 8006bea:	4d05      	ldr	r5, [pc, #20]	; (8006c00 <_write_r+0x20>)
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fc f814 	bl	8002c1c <_write>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_write_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_write_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200004f8 	.word	0x200004f8

08006c04 <__assert_func>:
 8006c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c06:	4614      	mov	r4, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <__assert_func+0x2c>)
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68d8      	ldr	r0, [r3, #12]
 8006c12:	b14c      	cbz	r4, 8006c28 <__assert_func+0x24>
 8006c14:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <__assert_func+0x30>)
 8006c16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c1a:	9100      	str	r1, [sp, #0]
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	4906      	ldr	r1, [pc, #24]	; (8006c38 <__assert_func+0x34>)
 8006c20:	f000 f81e 	bl	8006c60 <fiprintf>
 8006c24:	f000 f8e9 	bl	8006dfa <abort>
 8006c28:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <__assert_func+0x38>)
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	e7f3      	b.n	8006c16 <__assert_func+0x12>
 8006c2e:	bf00      	nop
 8006c30:	20000054 	.word	0x20000054
 8006c34:	080083c5 	.word	0x080083c5
 8006c38:	080083d2 	.word	0x080083d2
 8006c3c:	08008400 	.word	0x08008400

08006c40 <_close_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	2300      	movs	r3, #0
 8006c44:	4d05      	ldr	r5, [pc, #20]	; (8006c5c <_close_r+0x1c>)
 8006c46:	4604      	mov	r4, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	f7fc fcbc 	bl	80035c8 <_close>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_close_r+0x1a>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_close_r+0x1a>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	200004f8 	.word	0x200004f8

08006c60 <fiprintf>:
 8006c60:	b40e      	push	{r1, r2, r3}
 8006c62:	b503      	push	{r0, r1, lr}
 8006c64:	4601      	mov	r1, r0
 8006c66:	ab03      	add	r3, sp, #12
 8006c68:	4805      	ldr	r0, [pc, #20]	; (8006c80 <fiprintf+0x20>)
 8006c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c6e:	6800      	ldr	r0, [r0, #0]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	f7ff fe31 	bl	80068d8 <_vfiprintf_r>
 8006c76:	b002      	add	sp, #8
 8006c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c7c:	b003      	add	sp, #12
 8006c7e:	4770      	bx	lr
 8006c80:	20000054 	.word	0x20000054

08006c84 <_fstat_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	2300      	movs	r3, #0
 8006c88:	4d06      	ldr	r5, [pc, #24]	; (8006ca4 <_fstat_r+0x20>)
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	f7fc fca4 	bl	80035de <_fstat>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d102      	bne.n	8006ca0 <_fstat_r+0x1c>
 8006c9a:	682b      	ldr	r3, [r5, #0]
 8006c9c:	b103      	cbz	r3, 8006ca0 <_fstat_r+0x1c>
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	bd38      	pop	{r3, r4, r5, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200004f8 	.word	0x200004f8

08006ca8 <_isatty_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	2300      	movs	r3, #0
 8006cac:	4d05      	ldr	r5, [pc, #20]	; (8006cc4 <_isatty_r+0x1c>)
 8006cae:	4604      	mov	r4, r0
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	f7fc fca2 	bl	80035fc <_isatty>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_isatty_r+0x1a>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_isatty_r+0x1a>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	200004f8 	.word	0x200004f8

08006cc8 <_lseek_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4604      	mov	r4, r0
 8006ccc:	4608      	mov	r0, r1
 8006cce:	4611      	mov	r1, r2
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4d05      	ldr	r5, [pc, #20]	; (8006ce8 <_lseek_r+0x20>)
 8006cd4:	602a      	str	r2, [r5, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f7fc fc9a 	bl	8003610 <_lseek>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_lseek_r+0x1e>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_lseek_r+0x1e>
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	200004f8 	.word	0x200004f8

08006cec <__ascii_mbtowc>:
 8006cec:	b082      	sub	sp, #8
 8006cee:	b901      	cbnz	r1, 8006cf2 <__ascii_mbtowc+0x6>
 8006cf0:	a901      	add	r1, sp, #4
 8006cf2:	b142      	cbz	r2, 8006d06 <__ascii_mbtowc+0x1a>
 8006cf4:	b14b      	cbz	r3, 8006d0a <__ascii_mbtowc+0x1e>
 8006cf6:	7813      	ldrb	r3, [r2, #0]
 8006cf8:	600b      	str	r3, [r1, #0]
 8006cfa:	7812      	ldrb	r2, [r2, #0]
 8006cfc:	1e10      	subs	r0, r2, #0
 8006cfe:	bf18      	it	ne
 8006d00:	2001      	movne	r0, #1
 8006d02:	b002      	add	sp, #8
 8006d04:	4770      	bx	lr
 8006d06:	4610      	mov	r0, r2
 8006d08:	e7fb      	b.n	8006d02 <__ascii_mbtowc+0x16>
 8006d0a:	f06f 0001 	mvn.w	r0, #1
 8006d0e:	e7f8      	b.n	8006d02 <__ascii_mbtowc+0x16>

08006d10 <memmove>:
 8006d10:	4288      	cmp	r0, r1
 8006d12:	b510      	push	{r4, lr}
 8006d14:	eb01 0402 	add.w	r4, r1, r2
 8006d18:	d902      	bls.n	8006d20 <memmove+0x10>
 8006d1a:	4284      	cmp	r4, r0
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	d807      	bhi.n	8006d30 <memmove+0x20>
 8006d20:	1e43      	subs	r3, r0, #1
 8006d22:	42a1      	cmp	r1, r4
 8006d24:	d008      	beq.n	8006d38 <memmove+0x28>
 8006d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d2e:	e7f8      	b.n	8006d22 <memmove+0x12>
 8006d30:	4601      	mov	r1, r0
 8006d32:	4402      	add	r2, r0
 8006d34:	428a      	cmp	r2, r1
 8006d36:	d100      	bne.n	8006d3a <memmove+0x2a>
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d42:	e7f7      	b.n	8006d34 <memmove+0x24>

08006d44 <__malloc_lock>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__malloc_lock+0x8>)
 8006d46:	f7fe bf46 	b.w	8005bd6 <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	200004ec 	.word	0x200004ec

08006d50 <__malloc_unlock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__malloc_unlock+0x8>)
 8006d52:	f7fe bf41 	b.w	8005bd8 <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	200004ec 	.word	0x200004ec

08006d5c <_realloc_r>:
 8006d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d60:	4680      	mov	r8, r0
 8006d62:	4614      	mov	r4, r2
 8006d64:	460e      	mov	r6, r1
 8006d66:	b921      	cbnz	r1, 8006d72 <_realloc_r+0x16>
 8006d68:	4611      	mov	r1, r2
 8006d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	f7ff bbbb 	b.w	80064e8 <_malloc_r>
 8006d72:	b92a      	cbnz	r2, 8006d80 <_realloc_r+0x24>
 8006d74:	f7ff fb50 	bl	8006418 <_free_r>
 8006d78:	4625      	mov	r5, r4
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d80:	f000 f842 	bl	8006e08 <_malloc_usable_size_r>
 8006d84:	4284      	cmp	r4, r0
 8006d86:	4607      	mov	r7, r0
 8006d88:	d802      	bhi.n	8006d90 <_realloc_r+0x34>
 8006d8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d8e:	d812      	bhi.n	8006db6 <_realloc_r+0x5a>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4640      	mov	r0, r8
 8006d94:	f7ff fba8 	bl	80064e8 <_malloc_r>
 8006d98:	4605      	mov	r5, r0
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d0ed      	beq.n	8006d7a <_realloc_r+0x1e>
 8006d9e:	42bc      	cmp	r4, r7
 8006da0:	4622      	mov	r2, r4
 8006da2:	4631      	mov	r1, r6
 8006da4:	bf28      	it	cs
 8006da6:	463a      	movcs	r2, r7
 8006da8:	f7fe ff92 	bl	8005cd0 <memcpy>
 8006dac:	4631      	mov	r1, r6
 8006dae:	4640      	mov	r0, r8
 8006db0:	f7ff fb32 	bl	8006418 <_free_r>
 8006db4:	e7e1      	b.n	8006d7a <_realloc_r+0x1e>
 8006db6:	4635      	mov	r5, r6
 8006db8:	e7df      	b.n	8006d7a <_realloc_r+0x1e>
	...

08006dbc <_read_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4d05      	ldr	r5, [pc, #20]	; (8006ddc <_read_r+0x20>)
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f7fc fbdf 	bl	800358e <_read>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_read_r+0x1e>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_read_r+0x1e>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	200004f8 	.word	0x200004f8

08006de0 <__ascii_wctomb>:
 8006de0:	4603      	mov	r3, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	b141      	cbz	r1, 8006df8 <__ascii_wctomb+0x18>
 8006de6:	2aff      	cmp	r2, #255	; 0xff
 8006de8:	d904      	bls.n	8006df4 <__ascii_wctomb+0x14>
 8006dea:	228a      	movs	r2, #138	; 0x8a
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	4770      	bx	lr
 8006df4:	2001      	movs	r0, #1
 8006df6:	700a      	strb	r2, [r1, #0]
 8006df8:	4770      	bx	lr

08006dfa <abort>:
 8006dfa:	2006      	movs	r0, #6
 8006dfc:	b508      	push	{r3, lr}
 8006dfe:	f000 f833 	bl	8006e68 <raise>
 8006e02:	2001      	movs	r0, #1
 8006e04:	f7fc fbb9 	bl	800357a <_exit>

08006e08 <_malloc_usable_size_r>:
 8006e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0c:	1f18      	subs	r0, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfbc      	itt	lt
 8006e12:	580b      	ldrlt	r3, [r1, r0]
 8006e14:	18c0      	addlt	r0, r0, r3
 8006e16:	4770      	bx	lr

08006e18 <_raise_r>:
 8006e18:	291f      	cmp	r1, #31
 8006e1a:	b538      	push	{r3, r4, r5, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	460d      	mov	r5, r1
 8006e20:	d904      	bls.n	8006e2c <_raise_r+0x14>
 8006e22:	2316      	movs	r3, #22
 8006e24:	6003      	str	r3, [r0, #0]
 8006e26:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e2e:	b112      	cbz	r2, 8006e36 <_raise_r+0x1e>
 8006e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e34:	b94b      	cbnz	r3, 8006e4a <_raise_r+0x32>
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 f830 	bl	8006e9c <_getpid_r>
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4601      	mov	r1, r0
 8006e40:	4620      	mov	r0, r4
 8006e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e46:	f000 b817 	b.w	8006e78 <_kill_r>
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d00a      	beq.n	8006e64 <_raise_r+0x4c>
 8006e4e:	1c59      	adds	r1, r3, #1
 8006e50:	d103      	bne.n	8006e5a <_raise_r+0x42>
 8006e52:	2316      	movs	r3, #22
 8006e54:	6003      	str	r3, [r0, #0]
 8006e56:	2001      	movs	r0, #1
 8006e58:	e7e7      	b.n	8006e2a <_raise_r+0x12>
 8006e5a:	2400      	movs	r4, #0
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e62:	4798      	blx	r3
 8006e64:	2000      	movs	r0, #0
 8006e66:	e7e0      	b.n	8006e2a <_raise_r+0x12>

08006e68 <raise>:
 8006e68:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <raise+0xc>)
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	f7ff bfd3 	b.w	8006e18 <_raise_r>
 8006e72:	bf00      	nop
 8006e74:	20000054 	.word	0x20000054

08006e78 <_kill_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4d06      	ldr	r5, [pc, #24]	; (8006e98 <_kill_r+0x20>)
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	4611      	mov	r1, r2
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	f7fc fb68 	bl	800355a <_kill>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d102      	bne.n	8006e94 <_kill_r+0x1c>
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	b103      	cbz	r3, 8006e94 <_kill_r+0x1c>
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	200004f8 	.word	0x200004f8

08006e9c <_getpid_r>:
 8006e9c:	f7fc bb56 	b.w	800354c <_getpid>

08006ea0 <pow>:
 8006ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	4680      	mov	r8, r0
 8006eaa:	4689      	mov	r9, r1
 8006eac:	f000 f860 	bl	8006f70 <__ieee754_pow>
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	4620      	mov	r0, r4
 8006eba:	4629      	mov	r1, r5
 8006ebc:	f7f9 fdb6 	bl	8000a2c <__aeabi_dcmpun>
 8006ec0:	bbc8      	cbnz	r0, 8006f36 <pow+0x96>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	4649      	mov	r1, r9
 8006eca:	f7f9 fd7d 	bl	80009c8 <__aeabi_dcmpeq>
 8006ece:	b1b8      	cbz	r0, 8006f00 <pow+0x60>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	f7f9 fd76 	bl	80009c8 <__aeabi_dcmpeq>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d141      	bne.n	8006f64 <pow+0xc4>
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f000 fe39 	bl	8007b5a <finite>
 8006ee8:	b328      	cbz	r0, 8006f36 <pow+0x96>
 8006eea:	2200      	movs	r2, #0
 8006eec:	2300      	movs	r3, #0
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7f9 fd73 	bl	80009dc <__aeabi_dcmplt>
 8006ef6:	b1f0      	cbz	r0, 8006f36 <pow+0x96>
 8006ef8:	f7fc ffb2 	bl	8003e60 <__errno>
 8006efc:	2322      	movs	r3, #34	; 0x22
 8006efe:	e019      	b.n	8006f34 <pow+0x94>
 8006f00:	4630      	mov	r0, r6
 8006f02:	4639      	mov	r1, r7
 8006f04:	f000 fe29 	bl	8007b5a <finite>
 8006f08:	b9c8      	cbnz	r0, 8006f3e <pow+0x9e>
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	f000 fe24 	bl	8007b5a <finite>
 8006f12:	b1a0      	cbz	r0, 8006f3e <pow+0x9e>
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f000 fe1f 	bl	8007b5a <finite>
 8006f1c:	b178      	cbz	r0, 8006f3e <pow+0x9e>
 8006f1e:	4632      	mov	r2, r6
 8006f20:	463b      	mov	r3, r7
 8006f22:	4630      	mov	r0, r6
 8006f24:	4639      	mov	r1, r7
 8006f26:	f7f9 fd81 	bl	8000a2c <__aeabi_dcmpun>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d0e4      	beq.n	8006ef8 <pow+0x58>
 8006f2e:	f7fc ff97 	bl	8003e60 <__errno>
 8006f32:	2321      	movs	r3, #33	; 0x21
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	4630      	mov	r0, r6
 8006f38:	4639      	mov	r1, r7
 8006f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2300      	movs	r3, #0
 8006f42:	4630      	mov	r0, r6
 8006f44:	4639      	mov	r1, r7
 8006f46:	f7f9 fd3f 	bl	80009c8 <__aeabi_dcmpeq>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d0f3      	beq.n	8006f36 <pow+0x96>
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f000 fe02 	bl	8007b5a <finite>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d0ed      	beq.n	8006f36 <pow+0x96>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f000 fdfc 	bl	8007b5a <finite>
 8006f62:	e7c8      	b.n	8006ef6 <pow+0x56>
 8006f64:	2600      	movs	r6, #0
 8006f66:	4f01      	ldr	r7, [pc, #4]	; (8006f6c <pow+0xcc>)
 8006f68:	e7e5      	b.n	8006f36 <pow+0x96>
 8006f6a:	bf00      	nop
 8006f6c:	3ff00000 	.word	0x3ff00000

08006f70 <__ieee754_pow>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	b093      	sub	sp, #76	; 0x4c
 8006f76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f7a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006f7e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006f82:	4689      	mov	r9, r1
 8006f84:	ea56 0102 	orrs.w	r1, r6, r2
 8006f88:	4680      	mov	r8, r0
 8006f8a:	d111      	bne.n	8006fb0 <__ieee754_pow+0x40>
 8006f8c:	1803      	adds	r3, r0, r0
 8006f8e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006f92:	4152      	adcs	r2, r2
 8006f94:	4299      	cmp	r1, r3
 8006f96:	4b82      	ldr	r3, [pc, #520]	; (80071a0 <__ieee754_pow+0x230>)
 8006f98:	4193      	sbcs	r3, r2
 8006f9a:	f080 84b9 	bcs.w	8007910 <__ieee754_pow+0x9a0>
 8006f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 f8f1 	bl	800018c <__adddf3>
 8006faa:	4683      	mov	fp, r0
 8006fac:	468c      	mov	ip, r1
 8006fae:	e06f      	b.n	8007090 <__ieee754_pow+0x120>
 8006fb0:	4b7c      	ldr	r3, [pc, #496]	; (80071a4 <__ieee754_pow+0x234>)
 8006fb2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	464d      	mov	r5, r9
 8006fba:	4682      	mov	sl, r0
 8006fbc:	dc06      	bgt.n	8006fcc <__ieee754_pow+0x5c>
 8006fbe:	d101      	bne.n	8006fc4 <__ieee754_pow+0x54>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d1ec      	bne.n	8006f9e <__ieee754_pow+0x2e>
 8006fc4:	429e      	cmp	r6, r3
 8006fc6:	dc01      	bgt.n	8006fcc <__ieee754_pow+0x5c>
 8006fc8:	d10f      	bne.n	8006fea <__ieee754_pow+0x7a>
 8006fca:	b172      	cbz	r2, 8006fea <__ieee754_pow+0x7a>
 8006fcc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006fd0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006fd4:	ea55 050a 	orrs.w	r5, r5, sl
 8006fd8:	d1e1      	bne.n	8006f9e <__ieee754_pow+0x2e>
 8006fda:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006fde:	18db      	adds	r3, r3, r3
 8006fe0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006fe4:	4152      	adcs	r2, r2
 8006fe6:	429d      	cmp	r5, r3
 8006fe8:	e7d5      	b.n	8006f96 <__ieee754_pow+0x26>
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	da39      	bge.n	8007062 <__ieee754_pow+0xf2>
 8006fee:	4b6e      	ldr	r3, [pc, #440]	; (80071a8 <__ieee754_pow+0x238>)
 8006ff0:	429e      	cmp	r6, r3
 8006ff2:	dc52      	bgt.n	800709a <__ieee754_pow+0x12a>
 8006ff4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006ff8:	429e      	cmp	r6, r3
 8006ffa:	f340 849c 	ble.w	8007936 <__ieee754_pow+0x9c6>
 8006ffe:	1533      	asrs	r3, r6, #20
 8007000:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007004:	2b14      	cmp	r3, #20
 8007006:	dd0f      	ble.n	8007028 <__ieee754_pow+0xb8>
 8007008:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800700c:	fa22 f103 	lsr.w	r1, r2, r3
 8007010:	fa01 f303 	lsl.w	r3, r1, r3
 8007014:	4293      	cmp	r3, r2
 8007016:	f040 848e 	bne.w	8007936 <__ieee754_pow+0x9c6>
 800701a:	f001 0101 	and.w	r1, r1, #1
 800701e:	f1c1 0302 	rsb	r3, r1, #2
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	b182      	cbz	r2, 8007048 <__ieee754_pow+0xd8>
 8007026:	e05d      	b.n	80070e4 <__ieee754_pow+0x174>
 8007028:	2a00      	cmp	r2, #0
 800702a:	d159      	bne.n	80070e0 <__ieee754_pow+0x170>
 800702c:	f1c3 0314 	rsb	r3, r3, #20
 8007030:	fa46 f103 	asr.w	r1, r6, r3
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	42b3      	cmp	r3, r6
 800703a:	f040 8479 	bne.w	8007930 <__ieee754_pow+0x9c0>
 800703e:	f001 0101 	and.w	r1, r1, #1
 8007042:	f1c1 0302 	rsb	r3, r1, #2
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	4b58      	ldr	r3, [pc, #352]	; (80071ac <__ieee754_pow+0x23c>)
 800704a:	429e      	cmp	r6, r3
 800704c:	d132      	bne.n	80070b4 <__ieee754_pow+0x144>
 800704e:	2f00      	cmp	r7, #0
 8007050:	f280 846a 	bge.w	8007928 <__ieee754_pow+0x9b8>
 8007054:	4642      	mov	r2, r8
 8007056:	464b      	mov	r3, r9
 8007058:	2000      	movs	r0, #0
 800705a:	4954      	ldr	r1, [pc, #336]	; (80071ac <__ieee754_pow+0x23c>)
 800705c:	f7f9 fb76 	bl	800074c <__aeabi_ddiv>
 8007060:	e7a3      	b.n	8006faa <__ieee754_pow+0x3a>
 8007062:	2300      	movs	r3, #0
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2a00      	cmp	r2, #0
 8007068:	d13c      	bne.n	80070e4 <__ieee754_pow+0x174>
 800706a:	4b4e      	ldr	r3, [pc, #312]	; (80071a4 <__ieee754_pow+0x234>)
 800706c:	429e      	cmp	r6, r3
 800706e:	d1eb      	bne.n	8007048 <__ieee754_pow+0xd8>
 8007070:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007074:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007078:	ea53 030a 	orrs.w	r3, r3, sl
 800707c:	f000 8448 	beq.w	8007910 <__ieee754_pow+0x9a0>
 8007080:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <__ieee754_pow+0x240>)
 8007082:	429c      	cmp	r4, r3
 8007084:	dd0b      	ble.n	800709e <__ieee754_pow+0x12e>
 8007086:	2f00      	cmp	r7, #0
 8007088:	f2c0 8448 	blt.w	800791c <__ieee754_pow+0x9ac>
 800708c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007090:	4658      	mov	r0, fp
 8007092:	4661      	mov	r1, ip
 8007094:	b013      	add	sp, #76	; 0x4c
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	2302      	movs	r3, #2
 800709c:	e7e2      	b.n	8007064 <__ieee754_pow+0xf4>
 800709e:	2f00      	cmp	r7, #0
 80070a0:	f04f 0b00 	mov.w	fp, #0
 80070a4:	f04f 0c00 	mov.w	ip, #0
 80070a8:	daf2      	bge.n	8007090 <__ieee754_pow+0x120>
 80070aa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80070ae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80070b2:	e7ed      	b.n	8007090 <__ieee754_pow+0x120>
 80070b4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80070b8:	d106      	bne.n	80070c8 <__ieee754_pow+0x158>
 80070ba:	4642      	mov	r2, r8
 80070bc:	464b      	mov	r3, r9
 80070be:	4640      	mov	r0, r8
 80070c0:	4649      	mov	r1, r9
 80070c2:	f7f9 fa19 	bl	80004f8 <__aeabi_dmul>
 80070c6:	e770      	b.n	8006faa <__ieee754_pow+0x3a>
 80070c8:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <__ieee754_pow+0x244>)
 80070ca:	429f      	cmp	r7, r3
 80070cc:	d10a      	bne.n	80070e4 <__ieee754_pow+0x174>
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	db08      	blt.n	80070e4 <__ieee754_pow+0x174>
 80070d2:	4640      	mov	r0, r8
 80070d4:	4649      	mov	r1, r9
 80070d6:	b013      	add	sp, #76	; 0x4c
 80070d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	f000 bc5e 	b.w	800799c <__ieee754_sqrt>
 80070e0:	2300      	movs	r3, #0
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4640      	mov	r0, r8
 80070e6:	4649      	mov	r1, r9
 80070e8:	f000 fd34 	bl	8007b54 <fabs>
 80070ec:	4683      	mov	fp, r0
 80070ee:	468c      	mov	ip, r1
 80070f0:	f1ba 0f00 	cmp.w	sl, #0
 80070f4:	d128      	bne.n	8007148 <__ieee754_pow+0x1d8>
 80070f6:	b124      	cbz	r4, 8007102 <__ieee754_pow+0x192>
 80070f8:	4b2c      	ldr	r3, [pc, #176]	; (80071ac <__ieee754_pow+0x23c>)
 80070fa:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80070fe:	429a      	cmp	r2, r3
 8007100:	d122      	bne.n	8007148 <__ieee754_pow+0x1d8>
 8007102:	2f00      	cmp	r7, #0
 8007104:	da07      	bge.n	8007116 <__ieee754_pow+0x1a6>
 8007106:	465a      	mov	r2, fp
 8007108:	4663      	mov	r3, ip
 800710a:	2000      	movs	r0, #0
 800710c:	4927      	ldr	r1, [pc, #156]	; (80071ac <__ieee754_pow+0x23c>)
 800710e:	f7f9 fb1d 	bl	800074c <__aeabi_ddiv>
 8007112:	4683      	mov	fp, r0
 8007114:	468c      	mov	ip, r1
 8007116:	2d00      	cmp	r5, #0
 8007118:	daba      	bge.n	8007090 <__ieee754_pow+0x120>
 800711a:	9b00      	ldr	r3, [sp, #0]
 800711c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007120:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007124:	4323      	orrs	r3, r4
 8007126:	d108      	bne.n	800713a <__ieee754_pow+0x1ca>
 8007128:	465a      	mov	r2, fp
 800712a:	4663      	mov	r3, ip
 800712c:	4658      	mov	r0, fp
 800712e:	4661      	mov	r1, ip
 8007130:	f7f9 f82a 	bl	8000188 <__aeabi_dsub>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	e790      	b.n	800705c <__ieee754_pow+0xec>
 800713a:	9b00      	ldr	r3, [sp, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d1a7      	bne.n	8007090 <__ieee754_pow+0x120>
 8007140:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007144:	469c      	mov	ip, r3
 8007146:	e7a3      	b.n	8007090 <__ieee754_pow+0x120>
 8007148:	0feb      	lsrs	r3, r5, #31
 800714a:	3b01      	subs	r3, #1
 800714c:	930c      	str	r3, [sp, #48]	; 0x30
 800714e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007150:	9b00      	ldr	r3, [sp, #0]
 8007152:	4313      	orrs	r3, r2
 8007154:	d104      	bne.n	8007160 <__ieee754_pow+0x1f0>
 8007156:	4642      	mov	r2, r8
 8007158:	464b      	mov	r3, r9
 800715a:	4640      	mov	r0, r8
 800715c:	4649      	mov	r1, r9
 800715e:	e7e7      	b.n	8007130 <__ieee754_pow+0x1c0>
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <__ieee754_pow+0x248>)
 8007162:	429e      	cmp	r6, r3
 8007164:	f340 80f6 	ble.w	8007354 <__ieee754_pow+0x3e4>
 8007168:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800716c:	429e      	cmp	r6, r3
 800716e:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <__ieee754_pow+0x240>)
 8007170:	dd09      	ble.n	8007186 <__ieee754_pow+0x216>
 8007172:	429c      	cmp	r4, r3
 8007174:	dc0c      	bgt.n	8007190 <__ieee754_pow+0x220>
 8007176:	2f00      	cmp	r7, #0
 8007178:	da0c      	bge.n	8007194 <__ieee754_pow+0x224>
 800717a:	2000      	movs	r0, #0
 800717c:	b013      	add	sp, #76	; 0x4c
 800717e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007182:	f000 bce2 	b.w	8007b4a <__math_oflow>
 8007186:	429c      	cmp	r4, r3
 8007188:	dbf5      	blt.n	8007176 <__ieee754_pow+0x206>
 800718a:	4b08      	ldr	r3, [pc, #32]	; (80071ac <__ieee754_pow+0x23c>)
 800718c:	429c      	cmp	r4, r3
 800718e:	dd15      	ble.n	80071bc <__ieee754_pow+0x24c>
 8007190:	2f00      	cmp	r7, #0
 8007192:	dcf2      	bgt.n	800717a <__ieee754_pow+0x20a>
 8007194:	2000      	movs	r0, #0
 8007196:	b013      	add	sp, #76	; 0x4c
 8007198:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	f000 bcd0 	b.w	8007b40 <__math_uflow>
 80071a0:	fff00000 	.word	0xfff00000
 80071a4:	7ff00000 	.word	0x7ff00000
 80071a8:	433fffff 	.word	0x433fffff
 80071ac:	3ff00000 	.word	0x3ff00000
 80071b0:	3fefffff 	.word	0x3fefffff
 80071b4:	3fe00000 	.word	0x3fe00000
 80071b8:	41e00000 	.word	0x41e00000
 80071bc:	4661      	mov	r1, ip
 80071be:	2200      	movs	r2, #0
 80071c0:	4658      	mov	r0, fp
 80071c2:	4b5f      	ldr	r3, [pc, #380]	; (8007340 <__ieee754_pow+0x3d0>)
 80071c4:	f7f8 ffe0 	bl	8000188 <__aeabi_dsub>
 80071c8:	a355      	add	r3, pc, #340	; (adr r3, 8007320 <__ieee754_pow+0x3b0>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	4604      	mov	r4, r0
 80071d0:	460d      	mov	r5, r1
 80071d2:	f7f9 f991 	bl	80004f8 <__aeabi_dmul>
 80071d6:	a354      	add	r3, pc, #336	; (adr r3, 8007328 <__ieee754_pow+0x3b8>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 f988 	bl	80004f8 <__aeabi_dmul>
 80071e8:	2200      	movs	r2, #0
 80071ea:	4682      	mov	sl, r0
 80071ec:	468b      	mov	fp, r1
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	4b54      	ldr	r3, [pc, #336]	; (8007344 <__ieee754_pow+0x3d4>)
 80071f4:	f7f9 f980 	bl	80004f8 <__aeabi_dmul>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	a14c      	add	r1, pc, #304	; (adr r1, 8007330 <__ieee754_pow+0x3c0>)
 80071fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007202:	f7f8 ffc1 	bl	8000188 <__aeabi_dsub>
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	f7f9 f975 	bl	80004f8 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	2000      	movs	r0, #0
 8007214:	494c      	ldr	r1, [pc, #304]	; (8007348 <__ieee754_pow+0x3d8>)
 8007216:	f7f8 ffb7 	bl	8000188 <__aeabi_dsub>
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	4620      	mov	r0, r4
 8007224:	4629      	mov	r1, r5
 8007226:	f7f9 f967 	bl	80004f8 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4640      	mov	r0, r8
 8007230:	4649      	mov	r1, r9
 8007232:	f7f9 f961 	bl	80004f8 <__aeabi_dmul>
 8007236:	a340      	add	r3, pc, #256	; (adr r3, 8007338 <__ieee754_pow+0x3c8>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 f95c 	bl	80004f8 <__aeabi_dmul>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4650      	mov	r0, sl
 8007246:	4659      	mov	r1, fp
 8007248:	f7f8 ff9e 	bl	8000188 <__aeabi_dsub>
 800724c:	f04f 0a00 	mov.w	sl, #0
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	4630      	mov	r0, r6
 800725a:	4639      	mov	r1, r7
 800725c:	f7f8 ff96 	bl	800018c <__adddf3>
 8007260:	4632      	mov	r2, r6
 8007262:	463b      	mov	r3, r7
 8007264:	4650      	mov	r0, sl
 8007266:	468b      	mov	fp, r1
 8007268:	f7f8 ff8e 	bl	8000188 <__aeabi_dsub>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4620      	mov	r0, r4
 8007272:	4629      	mov	r1, r5
 8007274:	f7f8 ff88 	bl	8000188 <__aeabi_dsub>
 8007278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007280:	3b01      	subs	r3, #1
 8007282:	4313      	orrs	r3, r2
 8007284:	f04f 0600 	mov.w	r6, #0
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	bf0c      	ite	eq
 800728e:	4b2f      	ldreq	r3, [pc, #188]	; (800734c <__ieee754_pow+0x3dc>)
 8007290:	4b2b      	ldrne	r3, [pc, #172]	; (8007340 <__ieee754_pow+0x3d0>)
 8007292:	4604      	mov	r4, r0
 8007294:	460d      	mov	r5, r1
 8007296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729a:	e9cd 2300 	strd	r2, r3, [sp]
 800729e:	4632      	mov	r2, r6
 80072a0:	463b      	mov	r3, r7
 80072a2:	f7f8 ff71 	bl	8000188 <__aeabi_dsub>
 80072a6:	4652      	mov	r2, sl
 80072a8:	465b      	mov	r3, fp
 80072aa:	f7f9 f925 	bl	80004f8 <__aeabi_dmul>
 80072ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072b2:	4680      	mov	r8, r0
 80072b4:	4689      	mov	r9, r1
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f9 f91d 	bl	80004f8 <__aeabi_dmul>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4640      	mov	r0, r8
 80072c4:	4649      	mov	r1, r9
 80072c6:	f7f8 ff61 	bl	800018c <__adddf3>
 80072ca:	4632      	mov	r2, r6
 80072cc:	463b      	mov	r3, r7
 80072ce:	4680      	mov	r8, r0
 80072d0:	4689      	mov	r9, r1
 80072d2:	4650      	mov	r0, sl
 80072d4:	4659      	mov	r1, fp
 80072d6:	f7f9 f90f 	bl	80004f8 <__aeabi_dmul>
 80072da:	4604      	mov	r4, r0
 80072dc:	460d      	mov	r5, r1
 80072de:	460b      	mov	r3, r1
 80072e0:	4602      	mov	r2, r0
 80072e2:	4649      	mov	r1, r9
 80072e4:	4640      	mov	r0, r8
 80072e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80072ea:	f7f8 ff4f 	bl	800018c <__adddf3>
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <__ieee754_pow+0x3e0>)
 80072f0:	4682      	mov	sl, r0
 80072f2:	4299      	cmp	r1, r3
 80072f4:	460f      	mov	r7, r1
 80072f6:	460e      	mov	r6, r1
 80072f8:	f340 82e5 	ble.w	80078c6 <__ieee754_pow+0x956>
 80072fc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007300:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007304:	4303      	orrs	r3, r0
 8007306:	f000 81df 	beq.w	80076c8 <__ieee754_pow+0x758>
 800730a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800730e:	2200      	movs	r2, #0
 8007310:	2300      	movs	r3, #0
 8007312:	f7f9 fb63 	bl	80009dc <__aeabi_dcmplt>
 8007316:	3800      	subs	r0, #0
 8007318:	bf18      	it	ne
 800731a:	2001      	movne	r0, #1
 800731c:	e72e      	b.n	800717c <__ieee754_pow+0x20c>
 800731e:	bf00      	nop
 8007320:	60000000 	.word	0x60000000
 8007324:	3ff71547 	.word	0x3ff71547
 8007328:	f85ddf44 	.word	0xf85ddf44
 800732c:	3e54ae0b 	.word	0x3e54ae0b
 8007330:	55555555 	.word	0x55555555
 8007334:	3fd55555 	.word	0x3fd55555
 8007338:	652b82fe 	.word	0x652b82fe
 800733c:	3ff71547 	.word	0x3ff71547
 8007340:	3ff00000 	.word	0x3ff00000
 8007344:	3fd00000 	.word	0x3fd00000
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	bff00000 	.word	0xbff00000
 8007350:	408fffff 	.word	0x408fffff
 8007354:	4bd2      	ldr	r3, [pc, #840]	; (80076a0 <__ieee754_pow+0x730>)
 8007356:	2200      	movs	r2, #0
 8007358:	402b      	ands	r3, r5
 800735a:	b943      	cbnz	r3, 800736e <__ieee754_pow+0x3fe>
 800735c:	4658      	mov	r0, fp
 800735e:	4661      	mov	r1, ip
 8007360:	4bd0      	ldr	r3, [pc, #832]	; (80076a4 <__ieee754_pow+0x734>)
 8007362:	f7f9 f8c9 	bl	80004f8 <__aeabi_dmul>
 8007366:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800736a:	4683      	mov	fp, r0
 800736c:	460c      	mov	r4, r1
 800736e:	1523      	asrs	r3, r4, #20
 8007370:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007374:	4413      	add	r3, r2
 8007376:	930b      	str	r3, [sp, #44]	; 0x2c
 8007378:	4bcb      	ldr	r3, [pc, #812]	; (80076a8 <__ieee754_pow+0x738>)
 800737a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800737e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007382:	429c      	cmp	r4, r3
 8007384:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007388:	dd08      	ble.n	800739c <__ieee754_pow+0x42c>
 800738a:	4bc8      	ldr	r3, [pc, #800]	; (80076ac <__ieee754_pow+0x73c>)
 800738c:	429c      	cmp	r4, r3
 800738e:	f340 8199 	ble.w	80076c4 <__ieee754_pow+0x754>
 8007392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007394:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007398:	3301      	adds	r3, #1
 800739a:	930b      	str	r3, [sp, #44]	; 0x2c
 800739c:	2600      	movs	r6, #0
 800739e:	00f3      	lsls	r3, r6, #3
 80073a0:	930d      	str	r3, [sp, #52]	; 0x34
 80073a2:	4bc3      	ldr	r3, [pc, #780]	; (80076b0 <__ieee754_pow+0x740>)
 80073a4:	4658      	mov	r0, fp
 80073a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073ae:	4629      	mov	r1, r5
 80073b0:	461a      	mov	r2, r3
 80073b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80073b6:	4623      	mov	r3, r4
 80073b8:	f7f8 fee6 	bl	8000188 <__aeabi_dsub>
 80073bc:	46da      	mov	sl, fp
 80073be:	462b      	mov	r3, r5
 80073c0:	4652      	mov	r2, sl
 80073c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80073c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073ca:	f7f8 fedf 	bl	800018c <__adddf3>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	2000      	movs	r0, #0
 80073d4:	49b7      	ldr	r1, [pc, #732]	; (80076b4 <__ieee754_pow+0x744>)
 80073d6:	f7f9 f9b9 	bl	800074c <__aeabi_ddiv>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80073e6:	f7f9 f887 	bl	80004f8 <__aeabi_dmul>
 80073ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073ee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80073f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073f6:	2300      	movs	r3, #0
 80073f8:	2200      	movs	r2, #0
 80073fa:	46ab      	mov	fp, r5
 80073fc:	106d      	asrs	r5, r5, #1
 80073fe:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007408:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800740c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	f7f9 f86e 	bl	80004f8 <__aeabi_dmul>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007424:	f7f8 feb0 	bl	8000188 <__aeabi_dsub>
 8007428:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800742c:	4606      	mov	r6, r0
 800742e:	460f      	mov	r7, r1
 8007430:	4620      	mov	r0, r4
 8007432:	4629      	mov	r1, r5
 8007434:	f7f8 fea8 	bl	8000188 <__aeabi_dsub>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4650      	mov	r0, sl
 800743e:	4659      	mov	r1, fp
 8007440:	f7f8 fea2 	bl	8000188 <__aeabi_dsub>
 8007444:	4642      	mov	r2, r8
 8007446:	464b      	mov	r3, r9
 8007448:	f7f9 f856 	bl	80004f8 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4630      	mov	r0, r6
 8007452:	4639      	mov	r1, r7
 8007454:	f7f8 fe98 	bl	8000188 <__aeabi_dsub>
 8007458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800745c:	f7f9 f84c 	bl	80004f8 <__aeabi_dmul>
 8007460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007464:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007468:	4610      	mov	r0, r2
 800746a:	4619      	mov	r1, r3
 800746c:	f7f9 f844 	bl	80004f8 <__aeabi_dmul>
 8007470:	a379      	add	r3, pc, #484	; (adr r3, 8007658 <__ieee754_pow+0x6e8>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	4604      	mov	r4, r0
 8007478:	460d      	mov	r5, r1
 800747a:	f7f9 f83d 	bl	80004f8 <__aeabi_dmul>
 800747e:	a378      	add	r3, pc, #480	; (adr r3, 8007660 <__ieee754_pow+0x6f0>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f7f8 fe82 	bl	800018c <__adddf3>
 8007488:	4622      	mov	r2, r4
 800748a:	462b      	mov	r3, r5
 800748c:	f7f9 f834 	bl	80004f8 <__aeabi_dmul>
 8007490:	a375      	add	r3, pc, #468	; (adr r3, 8007668 <__ieee754_pow+0x6f8>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f8 fe79 	bl	800018c <__adddf3>
 800749a:	4622      	mov	r2, r4
 800749c:	462b      	mov	r3, r5
 800749e:	f7f9 f82b 	bl	80004f8 <__aeabi_dmul>
 80074a2:	a373      	add	r3, pc, #460	; (adr r3, 8007670 <__ieee754_pow+0x700>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f8 fe70 	bl	800018c <__adddf3>
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	f7f9 f822 	bl	80004f8 <__aeabi_dmul>
 80074b4:	a370      	add	r3, pc, #448	; (adr r3, 8007678 <__ieee754_pow+0x708>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f8 fe67 	bl	800018c <__adddf3>
 80074be:	4622      	mov	r2, r4
 80074c0:	462b      	mov	r3, r5
 80074c2:	f7f9 f819 	bl	80004f8 <__aeabi_dmul>
 80074c6:	a36e      	add	r3, pc, #440	; (adr r3, 8007680 <__ieee754_pow+0x710>)
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f7f8 fe5e 	bl	800018c <__adddf3>
 80074d0:	4622      	mov	r2, r4
 80074d2:	4606      	mov	r6, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	462b      	mov	r3, r5
 80074d8:	4620      	mov	r0, r4
 80074da:	4629      	mov	r1, r5
 80074dc:	f7f9 f80c 	bl	80004f8 <__aeabi_dmul>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f9 f806 	bl	80004f8 <__aeabi_dmul>
 80074ec:	4604      	mov	r4, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	f7f8 fe48 	bl	800018c <__adddf3>
 80074fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007500:	f7f8 fffa 	bl	80004f8 <__aeabi_dmul>
 8007504:	4622      	mov	r2, r4
 8007506:	462b      	mov	r3, r5
 8007508:	f7f8 fe40 	bl	800018c <__adddf3>
 800750c:	4642      	mov	r2, r8
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	464b      	mov	r3, r9
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7f8 ffee 	bl	80004f8 <__aeabi_dmul>
 800751c:	2200      	movs	r2, #0
 800751e:	4b66      	ldr	r3, [pc, #408]	; (80076b8 <__ieee754_pow+0x748>)
 8007520:	4682      	mov	sl, r0
 8007522:	468b      	mov	fp, r1
 8007524:	f7f8 fe32 	bl	800018c <__adddf3>
 8007528:	4632      	mov	r2, r6
 800752a:	463b      	mov	r3, r7
 800752c:	f7f8 fe2e 	bl	800018c <__adddf3>
 8007530:	2400      	movs	r4, #0
 8007532:	460d      	mov	r5, r1
 8007534:	4622      	mov	r2, r4
 8007536:	460b      	mov	r3, r1
 8007538:	4640      	mov	r0, r8
 800753a:	4649      	mov	r1, r9
 800753c:	f7f8 ffdc 	bl	80004f8 <__aeabi_dmul>
 8007540:	2200      	movs	r2, #0
 8007542:	4680      	mov	r8, r0
 8007544:	4689      	mov	r9, r1
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	4b5b      	ldr	r3, [pc, #364]	; (80076b8 <__ieee754_pow+0x748>)
 800754c:	f7f8 fe1c 	bl	8000188 <__aeabi_dsub>
 8007550:	4652      	mov	r2, sl
 8007552:	465b      	mov	r3, fp
 8007554:	f7f8 fe18 	bl	8000188 <__aeabi_dsub>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f8 fe12 	bl	8000188 <__aeabi_dsub>
 8007564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007568:	f7f8 ffc6 	bl	80004f8 <__aeabi_dmul>
 800756c:	4622      	mov	r2, r4
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007576:	462b      	mov	r3, r5
 8007578:	f7f8 ffbe 	bl	80004f8 <__aeabi_dmul>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7f8 fe02 	bl	800018c <__adddf3>
 8007588:	2400      	movs	r4, #0
 800758a:	4606      	mov	r6, r0
 800758c:	460f      	mov	r7, r1
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f8 fdf9 	bl	800018c <__adddf3>
 800759a:	a33b      	add	r3, pc, #236	; (adr r3, 8007688 <__ieee754_pow+0x718>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	4620      	mov	r0, r4
 80075a2:	460d      	mov	r5, r1
 80075a4:	f7f8 ffa8 	bl	80004f8 <__aeabi_dmul>
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075b0:	4620      	mov	r0, r4
 80075b2:	4629      	mov	r1, r5
 80075b4:	f7f8 fde8 	bl	8000188 <__aeabi_dsub>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4630      	mov	r0, r6
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f8 fde2 	bl	8000188 <__aeabi_dsub>
 80075c4:	a332      	add	r3, pc, #200	; (adr r3, 8007690 <__ieee754_pow+0x720>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f8 ff95 	bl	80004f8 <__aeabi_dmul>
 80075ce:	a332      	add	r3, pc, #200	; (adr r3, 8007698 <__ieee754_pow+0x728>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	4606      	mov	r6, r0
 80075d6:	460f      	mov	r7, r1
 80075d8:	4620      	mov	r0, r4
 80075da:	4629      	mov	r1, r5
 80075dc:	f7f8 ff8c 	bl	80004f8 <__aeabi_dmul>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4630      	mov	r0, r6
 80075e6:	4639      	mov	r1, r7
 80075e8:	f7f8 fdd0 	bl	800018c <__adddf3>
 80075ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075ee:	4b33      	ldr	r3, [pc, #204]	; (80076bc <__ieee754_pow+0x74c>)
 80075f0:	f04f 0a00 	mov.w	sl, #0
 80075f4:	4413      	add	r3, r2
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fdc7 	bl	800018c <__adddf3>
 80075fe:	4680      	mov	r8, r0
 8007600:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007602:	4689      	mov	r9, r1
 8007604:	f7f8 ff0e 	bl	8000424 <__aeabi_i2d>
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
 800760c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800760e:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <__ieee754_pow+0x750>)
 8007610:	4413      	add	r3, r2
 8007612:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007616:	4642      	mov	r2, r8
 8007618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800761c:	464b      	mov	r3, r9
 800761e:	f7f8 fdb5 	bl	800018c <__adddf3>
 8007622:	4632      	mov	r2, r6
 8007624:	463b      	mov	r3, r7
 8007626:	f7f8 fdb1 	bl	800018c <__adddf3>
 800762a:	4622      	mov	r2, r4
 800762c:	462b      	mov	r3, r5
 800762e:	f7f8 fdad 	bl	800018c <__adddf3>
 8007632:	4622      	mov	r2, r4
 8007634:	462b      	mov	r3, r5
 8007636:	4650      	mov	r0, sl
 8007638:	468b      	mov	fp, r1
 800763a:	f7f8 fda5 	bl	8000188 <__aeabi_dsub>
 800763e:	4632      	mov	r2, r6
 8007640:	463b      	mov	r3, r7
 8007642:	f7f8 fda1 	bl	8000188 <__aeabi_dsub>
 8007646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800764a:	f7f8 fd9d 	bl	8000188 <__aeabi_dsub>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	e60d      	b.n	8007274 <__ieee754_pow+0x304>
 8007658:	4a454eef 	.word	0x4a454eef
 800765c:	3fca7e28 	.word	0x3fca7e28
 8007660:	93c9db65 	.word	0x93c9db65
 8007664:	3fcd864a 	.word	0x3fcd864a
 8007668:	a91d4101 	.word	0xa91d4101
 800766c:	3fd17460 	.word	0x3fd17460
 8007670:	518f264d 	.word	0x518f264d
 8007674:	3fd55555 	.word	0x3fd55555
 8007678:	db6fabff 	.word	0xdb6fabff
 800767c:	3fdb6db6 	.word	0x3fdb6db6
 8007680:	33333303 	.word	0x33333303
 8007684:	3fe33333 	.word	0x3fe33333
 8007688:	e0000000 	.word	0xe0000000
 800768c:	3feec709 	.word	0x3feec709
 8007690:	dc3a03fd 	.word	0xdc3a03fd
 8007694:	3feec709 	.word	0x3feec709
 8007698:	145b01f5 	.word	0x145b01f5
 800769c:	be3e2fe0 	.word	0xbe3e2fe0
 80076a0:	7ff00000 	.word	0x7ff00000
 80076a4:	43400000 	.word	0x43400000
 80076a8:	0003988e 	.word	0x0003988e
 80076ac:	000bb679 	.word	0x000bb679
 80076b0:	08008410 	.word	0x08008410
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	40080000 	.word	0x40080000
 80076bc:	08008430 	.word	0x08008430
 80076c0:	08008420 	.word	0x08008420
 80076c4:	2601      	movs	r6, #1
 80076c6:	e66a      	b.n	800739e <__ieee754_pow+0x42e>
 80076c8:	a39d      	add	r3, pc, #628	; (adr r3, 8007940 <__ieee754_pow+0x9d0>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	4640      	mov	r0, r8
 80076d0:	4649      	mov	r1, r9
 80076d2:	f7f8 fd5b 	bl	800018c <__adddf3>
 80076d6:	4622      	mov	r2, r4
 80076d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076dc:	462b      	mov	r3, r5
 80076de:	4650      	mov	r0, sl
 80076e0:	4639      	mov	r1, r7
 80076e2:	f7f8 fd51 	bl	8000188 <__aeabi_dsub>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ee:	f7f9 f993 	bl	8000a18 <__aeabi_dcmpgt>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f47f ae09 	bne.w	800730a <__ieee754_pow+0x39a>
 80076f8:	4aa3      	ldr	r2, [pc, #652]	; (8007988 <__ieee754_pow+0xa18>)
 80076fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80076fe:	4293      	cmp	r3, r2
 8007700:	f340 8101 	ble.w	8007906 <__ieee754_pow+0x996>
 8007704:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007708:	2000      	movs	r0, #0
 800770a:	151b      	asrs	r3, r3, #20
 800770c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007710:	fa4a f303 	asr.w	r3, sl, r3
 8007714:	4433      	add	r3, r6
 8007716:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800771a:	4f9c      	ldr	r7, [pc, #624]	; (800798c <__ieee754_pow+0xa1c>)
 800771c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007720:	4117      	asrs	r7, r2
 8007722:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007726:	ea23 0107 	bic.w	r1, r3, r7
 800772a:	f1c2 0214 	rsb	r2, r2, #20
 800772e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007732:	460b      	mov	r3, r1
 8007734:	fa4a fa02 	asr.w	sl, sl, r2
 8007738:	2e00      	cmp	r6, #0
 800773a:	4602      	mov	r2, r0
 800773c:	4629      	mov	r1, r5
 800773e:	4620      	mov	r0, r4
 8007740:	bfb8      	it	lt
 8007742:	f1ca 0a00 	rsblt	sl, sl, #0
 8007746:	f7f8 fd1f 	bl	8000188 <__aeabi_dsub>
 800774a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800774e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007752:	2400      	movs	r4, #0
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	f7f8 fd18 	bl	800018c <__adddf3>
 800775c:	a37a      	add	r3, pc, #488	; (adr r3, 8007948 <__ieee754_pow+0x9d8>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	4620      	mov	r0, r4
 8007764:	460d      	mov	r5, r1
 8007766:	f7f8 fec7 	bl	80004f8 <__aeabi_dmul>
 800776a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800776e:	4606      	mov	r6, r0
 8007770:	460f      	mov	r7, r1
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	f7f8 fd07 	bl	8000188 <__aeabi_dsub>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4640      	mov	r0, r8
 8007780:	4649      	mov	r1, r9
 8007782:	f7f8 fd01 	bl	8000188 <__aeabi_dsub>
 8007786:	a372      	add	r3, pc, #456	; (adr r3, 8007950 <__ieee754_pow+0x9e0>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f8 feb4 	bl	80004f8 <__aeabi_dmul>
 8007790:	a371      	add	r3, pc, #452	; (adr r3, 8007958 <__ieee754_pow+0x9e8>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	4680      	mov	r8, r0
 8007798:	4689      	mov	r9, r1
 800779a:	4620      	mov	r0, r4
 800779c:	4629      	mov	r1, r5
 800779e:	f7f8 feab 	bl	80004f8 <__aeabi_dmul>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4640      	mov	r0, r8
 80077a8:	4649      	mov	r1, r9
 80077aa:	f7f8 fcef 	bl	800018c <__adddf3>
 80077ae:	4604      	mov	r4, r0
 80077b0:	460d      	mov	r5, r1
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f8 fce7 	bl	800018c <__adddf3>
 80077be:	4632      	mov	r2, r6
 80077c0:	463b      	mov	r3, r7
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	f7f8 fcdf 	bl	8000188 <__aeabi_dsub>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4620      	mov	r0, r4
 80077d0:	4629      	mov	r1, r5
 80077d2:	f7f8 fcd9 	bl	8000188 <__aeabi_dsub>
 80077d6:	4642      	mov	r2, r8
 80077d8:	4606      	mov	r6, r0
 80077da:	460f      	mov	r7, r1
 80077dc:	464b      	mov	r3, r9
 80077de:	4640      	mov	r0, r8
 80077e0:	4649      	mov	r1, r9
 80077e2:	f7f8 fe89 	bl	80004f8 <__aeabi_dmul>
 80077e6:	a35e      	add	r3, pc, #376	; (adr r3, 8007960 <__ieee754_pow+0x9f0>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	4604      	mov	r4, r0
 80077ee:	460d      	mov	r5, r1
 80077f0:	f7f8 fe82 	bl	80004f8 <__aeabi_dmul>
 80077f4:	a35c      	add	r3, pc, #368	; (adr r3, 8007968 <__ieee754_pow+0x9f8>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f8 fcc5 	bl	8000188 <__aeabi_dsub>
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	f7f8 fe79 	bl	80004f8 <__aeabi_dmul>
 8007806:	a35a      	add	r3, pc, #360	; (adr r3, 8007970 <__ieee754_pow+0xa00>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 fcbe 	bl	800018c <__adddf3>
 8007810:	4622      	mov	r2, r4
 8007812:	462b      	mov	r3, r5
 8007814:	f7f8 fe70 	bl	80004f8 <__aeabi_dmul>
 8007818:	a357      	add	r3, pc, #348	; (adr r3, 8007978 <__ieee754_pow+0xa08>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f7f8 fcb3 	bl	8000188 <__aeabi_dsub>
 8007822:	4622      	mov	r2, r4
 8007824:	462b      	mov	r3, r5
 8007826:	f7f8 fe67 	bl	80004f8 <__aeabi_dmul>
 800782a:	a355      	add	r3, pc, #340	; (adr r3, 8007980 <__ieee754_pow+0xa10>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f8 fcac 	bl	800018c <__adddf3>
 8007834:	4622      	mov	r2, r4
 8007836:	462b      	mov	r3, r5
 8007838:	f7f8 fe5e 	bl	80004f8 <__aeabi_dmul>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4640      	mov	r0, r8
 8007842:	4649      	mov	r1, r9
 8007844:	f7f8 fca0 	bl	8000188 <__aeabi_dsub>
 8007848:	4604      	mov	r4, r0
 800784a:	460d      	mov	r5, r1
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4640      	mov	r0, r8
 8007852:	4649      	mov	r1, r9
 8007854:	f7f8 fe50 	bl	80004f8 <__aeabi_dmul>
 8007858:	2200      	movs	r2, #0
 800785a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800785e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007862:	4620      	mov	r0, r4
 8007864:	4629      	mov	r1, r5
 8007866:	f7f8 fc8f 	bl	8000188 <__aeabi_dsub>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007872:	f7f8 ff6b 	bl	800074c <__aeabi_ddiv>
 8007876:	4632      	mov	r2, r6
 8007878:	4604      	mov	r4, r0
 800787a:	460d      	mov	r5, r1
 800787c:	463b      	mov	r3, r7
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	f7f8 fe39 	bl	80004f8 <__aeabi_dmul>
 8007886:	4632      	mov	r2, r6
 8007888:	463b      	mov	r3, r7
 800788a:	f7f8 fc7f 	bl	800018c <__adddf3>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f8 fc77 	bl	8000188 <__aeabi_dsub>
 800789a:	4642      	mov	r2, r8
 800789c:	464b      	mov	r3, r9
 800789e:	f7f8 fc73 	bl	8000188 <__aeabi_dsub>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	2000      	movs	r0, #0
 80078a8:	4939      	ldr	r1, [pc, #228]	; (8007990 <__ieee754_pow+0xa20>)
 80078aa:	f7f8 fc6d 	bl	8000188 <__aeabi_dsub>
 80078ae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80078b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80078b6:	da29      	bge.n	800790c <__ieee754_pow+0x99c>
 80078b8:	4652      	mov	r2, sl
 80078ba:	f000 f955 	bl	8007b68 <scalbn>
 80078be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078c2:	f7ff bbfe 	b.w	80070c2 <__ieee754_pow+0x152>
 80078c6:	4b33      	ldr	r3, [pc, #204]	; (8007994 <__ieee754_pow+0xa24>)
 80078c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80078cc:	429f      	cmp	r7, r3
 80078ce:	f77f af13 	ble.w	80076f8 <__ieee754_pow+0x788>
 80078d2:	4b31      	ldr	r3, [pc, #196]	; (8007998 <__ieee754_pow+0xa28>)
 80078d4:	440b      	add	r3, r1
 80078d6:	4303      	orrs	r3, r0
 80078d8:	d009      	beq.n	80078ee <__ieee754_pow+0x97e>
 80078da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078de:	2200      	movs	r2, #0
 80078e0:	2300      	movs	r3, #0
 80078e2:	f7f9 f87b 	bl	80009dc <__aeabi_dcmplt>
 80078e6:	3800      	subs	r0, #0
 80078e8:	bf18      	it	ne
 80078ea:	2001      	movne	r0, #1
 80078ec:	e453      	b.n	8007196 <__ieee754_pow+0x226>
 80078ee:	4622      	mov	r2, r4
 80078f0:	462b      	mov	r3, r5
 80078f2:	f7f8 fc49 	bl	8000188 <__aeabi_dsub>
 80078f6:	4642      	mov	r2, r8
 80078f8:	464b      	mov	r3, r9
 80078fa:	f7f9 f883 	bl	8000a04 <__aeabi_dcmpge>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aefa 	beq.w	80076f8 <__ieee754_pow+0x788>
 8007904:	e7e9      	b.n	80078da <__ieee754_pow+0x96a>
 8007906:	f04f 0a00 	mov.w	sl, #0
 800790a:	e720      	b.n	800774e <__ieee754_pow+0x7de>
 800790c:	4621      	mov	r1, r4
 800790e:	e7d6      	b.n	80078be <__ieee754_pow+0x94e>
 8007910:	f04f 0b00 	mov.w	fp, #0
 8007914:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007990 <__ieee754_pow+0xa20>
 8007918:	f7ff bbba 	b.w	8007090 <__ieee754_pow+0x120>
 800791c:	f04f 0b00 	mov.w	fp, #0
 8007920:	f04f 0c00 	mov.w	ip, #0
 8007924:	f7ff bbb4 	b.w	8007090 <__ieee754_pow+0x120>
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	f7ff bb3d 	b.w	8006faa <__ieee754_pow+0x3a>
 8007930:	9200      	str	r2, [sp, #0]
 8007932:	f7ff bb89 	b.w	8007048 <__ieee754_pow+0xd8>
 8007936:	2300      	movs	r3, #0
 8007938:	f7ff bb73 	b.w	8007022 <__ieee754_pow+0xb2>
 800793c:	f3af 8000 	nop.w
 8007940:	652b82fe 	.word	0x652b82fe
 8007944:	3c971547 	.word	0x3c971547
 8007948:	00000000 	.word	0x00000000
 800794c:	3fe62e43 	.word	0x3fe62e43
 8007950:	fefa39ef 	.word	0xfefa39ef
 8007954:	3fe62e42 	.word	0x3fe62e42
 8007958:	0ca86c39 	.word	0x0ca86c39
 800795c:	be205c61 	.word	0xbe205c61
 8007960:	72bea4d0 	.word	0x72bea4d0
 8007964:	3e663769 	.word	0x3e663769
 8007968:	c5d26bf1 	.word	0xc5d26bf1
 800796c:	3ebbbd41 	.word	0x3ebbbd41
 8007970:	af25de2c 	.word	0xaf25de2c
 8007974:	3f11566a 	.word	0x3f11566a
 8007978:	16bebd93 	.word	0x16bebd93
 800797c:	3f66c16c 	.word	0x3f66c16c
 8007980:	5555553e 	.word	0x5555553e
 8007984:	3fc55555 	.word	0x3fc55555
 8007988:	3fe00000 	.word	0x3fe00000
 800798c:	000fffff 	.word	0x000fffff
 8007990:	3ff00000 	.word	0x3ff00000
 8007994:	4090cbff 	.word	0x4090cbff
 8007998:	3f6f3400 	.word	0x3f6f3400

0800799c <__ieee754_sqrt>:
 800799c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007af8 <__ieee754_sqrt+0x15c>
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	ea3c 0c01 	bics.w	ip, ip, r1
 80079a8:	4606      	mov	r6, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	460c      	mov	r4, r1
 80079ae:	460a      	mov	r2, r1
 80079b0:	4607      	mov	r7, r0
 80079b2:	4603      	mov	r3, r0
 80079b4:	d10f      	bne.n	80079d6 <__ieee754_sqrt+0x3a>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	f7f8 fd9d 	bl	80004f8 <__aeabi_dmul>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4630      	mov	r0, r6
 80079c4:	4629      	mov	r1, r5
 80079c6:	f7f8 fbe1 	bl	800018c <__adddf3>
 80079ca:	4606      	mov	r6, r0
 80079cc:	460d      	mov	r5, r1
 80079ce:	4630      	mov	r0, r6
 80079d0:	4629      	mov	r1, r5
 80079d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d6:	2900      	cmp	r1, #0
 80079d8:	dc0e      	bgt.n	80079f8 <__ieee754_sqrt+0x5c>
 80079da:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80079de:	ea5c 0707 	orrs.w	r7, ip, r7
 80079e2:	d0f4      	beq.n	80079ce <__ieee754_sqrt+0x32>
 80079e4:	b141      	cbz	r1, 80079f8 <__ieee754_sqrt+0x5c>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	f7f8 fbcd 	bl	8000188 <__aeabi_dsub>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	f7f8 feab 	bl	800074c <__aeabi_ddiv>
 80079f6:	e7e8      	b.n	80079ca <__ieee754_sqrt+0x2e>
 80079f8:	1521      	asrs	r1, r4, #20
 80079fa:	d075      	beq.n	8007ae8 <__ieee754_sqrt+0x14c>
 80079fc:	07cc      	lsls	r4, r1, #31
 80079fe:	f04f 0400 	mov.w	r4, #0
 8007a02:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a06:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007a0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a0e:	bf5e      	ittt	pl
 8007a10:	0fd9      	lsrpl	r1, r3, #31
 8007a12:	005b      	lslpl	r3, r3, #1
 8007a14:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007a18:	0fd9      	lsrs	r1, r3, #31
 8007a1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007a1e:	2516      	movs	r5, #22
 8007a20:	4620      	mov	r0, r4
 8007a22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a26:	107f      	asrs	r7, r7, #1
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	1846      	adds	r6, r0, r1
 8007a2c:	4296      	cmp	r6, r2
 8007a2e:	bfde      	ittt	le
 8007a30:	1b92      	suble	r2, r2, r6
 8007a32:	1870      	addle	r0, r6, r1
 8007a34:	1864      	addle	r4, r4, r1
 8007a36:	0052      	lsls	r2, r2, #1
 8007a38:	3d01      	subs	r5, #1
 8007a3a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007a3e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a46:	d1f0      	bne.n	8007a2a <__ieee754_sqrt+0x8e>
 8007a48:	4629      	mov	r1, r5
 8007a4a:	f04f 0e20 	mov.w	lr, #32
 8007a4e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a52:	4282      	cmp	r2, r0
 8007a54:	eb06 0c05 	add.w	ip, r6, r5
 8007a58:	dc02      	bgt.n	8007a60 <__ieee754_sqrt+0xc4>
 8007a5a:	d113      	bne.n	8007a84 <__ieee754_sqrt+0xe8>
 8007a5c:	459c      	cmp	ip, r3
 8007a5e:	d811      	bhi.n	8007a84 <__ieee754_sqrt+0xe8>
 8007a60:	f1bc 0f00 	cmp.w	ip, #0
 8007a64:	eb0c 0506 	add.w	r5, ip, r6
 8007a68:	da43      	bge.n	8007af2 <__ieee754_sqrt+0x156>
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	db41      	blt.n	8007af2 <__ieee754_sqrt+0x156>
 8007a6e:	f100 0801 	add.w	r8, r0, #1
 8007a72:	1a12      	subs	r2, r2, r0
 8007a74:	4640      	mov	r0, r8
 8007a76:	459c      	cmp	ip, r3
 8007a78:	bf88      	it	hi
 8007a7a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007a7e:	eba3 030c 	sub.w	r3, r3, ip
 8007a82:	4431      	add	r1, r6
 8007a84:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007a88:	f1be 0e01 	subs.w	lr, lr, #1
 8007a8c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a94:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a98:	d1db      	bne.n	8007a52 <__ieee754_sqrt+0xb6>
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	d006      	beq.n	8007aac <__ieee754_sqrt+0x110>
 8007a9e:	1c48      	adds	r0, r1, #1
 8007aa0:	bf0b      	itete	eq
 8007aa2:	4671      	moveq	r1, lr
 8007aa4:	3101      	addne	r1, #1
 8007aa6:	3401      	addeq	r4, #1
 8007aa8:	f021 0101 	bicne.w	r1, r1, #1
 8007aac:	1063      	asrs	r3, r4, #1
 8007aae:	0849      	lsrs	r1, r1, #1
 8007ab0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007ab4:	07e2      	lsls	r2, r4, #31
 8007ab6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007aba:	bf48      	it	mi
 8007abc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007ac0:	460e      	mov	r6, r1
 8007ac2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007ac6:	e782      	b.n	80079ce <__ieee754_sqrt+0x32>
 8007ac8:	0ada      	lsrs	r2, r3, #11
 8007aca:	3815      	subs	r0, #21
 8007acc:	055b      	lsls	r3, r3, #21
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d0fa      	beq.n	8007ac8 <__ieee754_sqrt+0x12c>
 8007ad2:	02d5      	lsls	r5, r2, #11
 8007ad4:	d50a      	bpl.n	8007aec <__ieee754_sqrt+0x150>
 8007ad6:	f1c1 0420 	rsb	r4, r1, #32
 8007ada:	fa23 f404 	lsr.w	r4, r3, r4
 8007ade:	1e4d      	subs	r5, r1, #1
 8007ae0:	408b      	lsls	r3, r1
 8007ae2:	4322      	orrs	r2, r4
 8007ae4:	1b41      	subs	r1, r0, r5
 8007ae6:	e789      	b.n	80079fc <__ieee754_sqrt+0x60>
 8007ae8:	4608      	mov	r0, r1
 8007aea:	e7f0      	b.n	8007ace <__ieee754_sqrt+0x132>
 8007aec:	0052      	lsls	r2, r2, #1
 8007aee:	3101      	adds	r1, #1
 8007af0:	e7ef      	b.n	8007ad2 <__ieee754_sqrt+0x136>
 8007af2:	4680      	mov	r8, r0
 8007af4:	e7bd      	b.n	8007a72 <__ieee754_sqrt+0xd6>
 8007af6:	bf00      	nop
 8007af8:	7ff00000 	.word	0x7ff00000

08007afc <with_errno>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4604      	mov	r4, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	4616      	mov	r6, r2
 8007b04:	f7fc f9ac 	bl	8003e60 <__errno>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	6006      	str	r6, [r0, #0]
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}

08007b10 <xflow>:
 8007b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b12:	4615      	mov	r5, r2
 8007b14:	461c      	mov	r4, r3
 8007b16:	b180      	cbz	r0, 8007b3a <xflow+0x2a>
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007b1e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b26:	4628      	mov	r0, r5
 8007b28:	4621      	mov	r1, r4
 8007b2a:	f7f8 fce5 	bl	80004f8 <__aeabi_dmul>
 8007b2e:	2222      	movs	r2, #34	; 0x22
 8007b30:	b003      	add	sp, #12
 8007b32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b36:	f7ff bfe1 	b.w	8007afc <with_errno>
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	e7ee      	b.n	8007b1e <xflow+0xe>

08007b40 <__math_uflow>:
 8007b40:	2200      	movs	r2, #0
 8007b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b46:	f7ff bfe3 	b.w	8007b10 <xflow>

08007b4a <__math_oflow>:
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007b50:	f7ff bfde 	b.w	8007b10 <xflow>

08007b54 <fabs>:
 8007b54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007b58:	4770      	bx	lr

08007b5a <finite>:
 8007b5a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007b5e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b62:	0fc0      	lsrs	r0, r0, #31
 8007b64:	4770      	bx	lr
	...

08007b68 <scalbn>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	4617      	mov	r7, r2
 8007b74:	460b      	mov	r3, r1
 8007b76:	b996      	cbnz	r6, 8007b9e <scalbn+0x36>
 8007b78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b7c:	4303      	orrs	r3, r0
 8007b7e:	d039      	beq.n	8007bf4 <scalbn+0x8c>
 8007b80:	4b33      	ldr	r3, [pc, #204]	; (8007c50 <scalbn+0xe8>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fcb8 	bl	80004f8 <__aeabi_dmul>
 8007b88:	4b32      	ldr	r3, [pc, #200]	; (8007c54 <scalbn+0xec>)
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	429f      	cmp	r7, r3
 8007b8e:	460d      	mov	r5, r1
 8007b90:	da0f      	bge.n	8007bb2 <scalbn+0x4a>
 8007b92:	a32b      	add	r3, pc, #172	; (adr r3, 8007c40 <scalbn+0xd8>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f7f8 fcae 	bl	80004f8 <__aeabi_dmul>
 8007b9c:	e006      	b.n	8007bac <scalbn+0x44>
 8007b9e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007ba2:	4296      	cmp	r6, r2
 8007ba4:	d10a      	bne.n	8007bbc <scalbn+0x54>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	f7f8 faf0 	bl	800018c <__adddf3>
 8007bac:	4604      	mov	r4, r0
 8007bae:	460d      	mov	r5, r1
 8007bb0:	e020      	b.n	8007bf4 <scalbn+0x8c>
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007bb8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8007bbc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007bc0:	19b9      	adds	r1, r7, r6
 8007bc2:	4291      	cmp	r1, r2
 8007bc4:	dd0e      	ble.n	8007be4 <scalbn+0x7c>
 8007bc6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007bca:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007bce:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007bd2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007bd6:	4820      	ldr	r0, [pc, #128]	; (8007c58 <scalbn+0xf0>)
 8007bd8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007bdc:	a31a      	add	r3, pc, #104	; (adr r3, 8007c48 <scalbn+0xe0>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	e7d9      	b.n	8007b98 <scalbn+0x30>
 8007be4:	2900      	cmp	r1, #0
 8007be6:	dd08      	ble.n	8007bfa <scalbn+0x92>
 8007be8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bf0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007bfe:	da12      	bge.n	8007c26 <scalbn+0xbe>
 8007c00:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c04:	429f      	cmp	r7, r3
 8007c06:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007c0a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007c0e:	dcdc      	bgt.n	8007bca <scalbn+0x62>
 8007c10:	a30b      	add	r3, pc, #44	; (adr r3, 8007c40 <scalbn+0xd8>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007c1a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007c1e:	480f      	ldr	r0, [pc, #60]	; (8007c5c <scalbn+0xf4>)
 8007c20:	f041 011f 	orr.w	r1, r1, #31
 8007c24:	e7b8      	b.n	8007b98 <scalbn+0x30>
 8007c26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c2a:	3136      	adds	r1, #54	; 0x36
 8007c2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c30:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <scalbn+0xf8>)
 8007c3c:	e7ac      	b.n	8007b98 <scalbn+0x30>
 8007c3e:	bf00      	nop
 8007c40:	c2f8f359 	.word	0xc2f8f359
 8007c44:	01a56e1f 	.word	0x01a56e1f
 8007c48:	8800759c 	.word	0x8800759c
 8007c4c:	7e37e43c 	.word	0x7e37e43c
 8007c50:	43500000 	.word	0x43500000
 8007c54:	ffff3cb0 	.word	0xffff3cb0
 8007c58:	8800759c 	.word	0x8800759c
 8007c5c:	c2f8f359 	.word	0xc2f8f359
 8007c60:	3c900000 	.word	0x3c900000

08007c64 <_init>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	bf00      	nop
 8007c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6a:	bc08      	pop	{r3}
 8007c6c:	469e      	mov	lr, r3
 8007c6e:	4770      	bx	lr

08007c70 <_fini>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr
